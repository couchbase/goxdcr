// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	base "github.com/couchbase/goxdcr/v8/base"
	common "github.com/couchbase/goxdcr/v8/common"

	mock "github.com/stretchr/testify/mock"
)

// ReplicationManagerIf is an autogenerated mock type for the ReplicationManagerIf type
type ReplicationManagerIf struct {
	mock.Mock
}

type ReplicationManagerIf_Expecter struct {
	mock *mock.Mock
}

func (_m *ReplicationManagerIf) EXPECT() *ReplicationManagerIf_Expecter {
	return &ReplicationManagerIf_Expecter{mock: &_m.Mock}
}

// OnError provides a mock function with given fields: s, errMap
func (_m *ReplicationManagerIf) OnError(s common.Supervisor, errMap base.ErrorMap) {
	_m.Called(s, errMap)
}

// ReplicationManagerIf_OnError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnError'
type ReplicationManagerIf_OnError_Call struct {
	*mock.Call
}

// OnError is a helper method to define mock.On call
//   - s common.Supervisor
//   - errMap base.ErrorMap
func (_e *ReplicationManagerIf_Expecter) OnError(s interface{}, errMap interface{}) *ReplicationManagerIf_OnError_Call {
	return &ReplicationManagerIf_OnError_Call{Call: _e.mock.On("OnError", s, errMap)}
}

func (_c *ReplicationManagerIf_OnError_Call) Run(run func(s common.Supervisor, errMap base.ErrorMap)) *ReplicationManagerIf_OnError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.Supervisor), args[1].(base.ErrorMap))
	})
	return _c
}

func (_c *ReplicationManagerIf_OnError_Call) Return() *ReplicationManagerIf_OnError_Call {
	_c.Call.Return()
	return _c
}

func (_c *ReplicationManagerIf_OnError_Call) RunAndReturn(run func(common.Supervisor, base.ErrorMap)) *ReplicationManagerIf_OnError_Call {
	_c.Call.Return(run)
	return _c
}

// NewReplicationManagerIf creates a new instance of ReplicationManagerIf. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReplicationManagerIf(t interface {
	mock.TestingT
	Cleanup(func())
}) *ReplicationManagerIf {
	mock := &ReplicationManagerIf{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
