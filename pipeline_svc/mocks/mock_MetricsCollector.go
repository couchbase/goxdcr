// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	base "github.com/couchbase/goxdcr/base"
	common "github.com/couchbase/goxdcr/common"

	metrics "github.com/rcrowley/go-metrics"

	mock "github.com/stretchr/testify/mock"

	pipeline_svc "github.com/couchbase/goxdcr/pipeline_svc"
)

// MetricsCollector is an autogenerated mock type for the MetricsCollector type
type MetricsCollector struct {
	mock.Mock
}

type MetricsCollector_Expecter struct {
	mock *mock.Mock
}

func (_m *MetricsCollector) EXPECT() *MetricsCollector_Expecter {
	return &MetricsCollector_Expecter{mock: &_m.Mock}
}

// AddVbSpecificMetrics provides a mock function with given fields: vbno, compiledMap
func (_m *MetricsCollector) AddVbSpecificMetrics(vbno uint16, compiledMap base.VBCountMetricMap) error {
	ret := _m.Called(vbno, compiledMap)

	if len(ret) == 0 {
		panic("no return value specified for AddVbSpecificMetrics")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint16, base.VBCountMetricMap) error); ok {
		r0 = rf(vbno, compiledMap)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MetricsCollector_AddVbSpecificMetrics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddVbSpecificMetrics'
type MetricsCollector_AddVbSpecificMetrics_Call struct {
	*mock.Call
}

// AddVbSpecificMetrics is a helper method to define mock.On call
//   - vbno uint16
//   - compiledMap base.VBCountMetricMap
func (_e *MetricsCollector_Expecter) AddVbSpecificMetrics(vbno interface{}, compiledMap interface{}) *MetricsCollector_AddVbSpecificMetrics_Call {
	return &MetricsCollector_AddVbSpecificMetrics_Call{Call: _e.mock.On("AddVbSpecificMetrics", vbno, compiledMap)}
}

func (_c *MetricsCollector_AddVbSpecificMetrics_Call) Run(run func(vbno uint16, compiledMap base.VBCountMetricMap)) *MetricsCollector_AddVbSpecificMetrics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint16), args[1].(base.VBCountMetricMap))
	})
	return _c
}

func (_c *MetricsCollector_AddVbSpecificMetrics_Call) Return(_a0 error) *MetricsCollector_AddVbSpecificMetrics_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MetricsCollector_AddVbSpecificMetrics_Call) RunAndReturn(run func(uint16, base.VBCountMetricMap) error) *MetricsCollector_AddVbSpecificMetrics_Call {
	_c.Call.Return(run)
	return _c
}

// HandleLatestThroughSeqnos provides a mock function with given fields: SeqnoMap
func (_m *MetricsCollector) HandleLatestThroughSeqnos(SeqnoMap map[uint16]uint64) {
	_m.Called(SeqnoMap)
}

// MetricsCollector_HandleLatestThroughSeqnos_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleLatestThroughSeqnos'
type MetricsCollector_HandleLatestThroughSeqnos_Call struct {
	*mock.Call
}

// HandleLatestThroughSeqnos is a helper method to define mock.On call
//   - SeqnoMap map[uint16]uint64
func (_e *MetricsCollector_Expecter) HandleLatestThroughSeqnos(SeqnoMap interface{}) *MetricsCollector_HandleLatestThroughSeqnos_Call {
	return &MetricsCollector_HandleLatestThroughSeqnos_Call{Call: _e.mock.On("HandleLatestThroughSeqnos", SeqnoMap)}
}

func (_c *MetricsCollector_HandleLatestThroughSeqnos_Call) Run(run func(SeqnoMap map[uint16]uint64)) *MetricsCollector_HandleLatestThroughSeqnos_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(map[uint16]uint64))
	})
	return _c
}

func (_c *MetricsCollector_HandleLatestThroughSeqnos_Call) Return() *MetricsCollector_HandleLatestThroughSeqnos_Call {
	_c.Call.Return()
	return _c
}

func (_c *MetricsCollector_HandleLatestThroughSeqnos_Call) RunAndReturn(run func(map[uint16]uint64)) *MetricsCollector_HandleLatestThroughSeqnos_Call {
	_c.Call.Return(run)
	return _c
}

// Mount provides a mock function with given fields: pipeline, stats_mgr
func (_m *MetricsCollector) Mount(pipeline common.Pipeline, stats_mgr *pipeline_svc.StatisticsManager) error {
	ret := _m.Called(pipeline, stats_mgr)

	if len(ret) == 0 {
		panic("no return value specified for Mount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(common.Pipeline, *pipeline_svc.StatisticsManager) error); ok {
		r0 = rf(pipeline, stats_mgr)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MetricsCollector_Mount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Mount'
type MetricsCollector_Mount_Call struct {
	*mock.Call
}

// Mount is a helper method to define mock.On call
//   - pipeline common.Pipeline
//   - stats_mgr *pipeline_svc.StatisticsManager
func (_e *MetricsCollector_Expecter) Mount(pipeline interface{}, stats_mgr interface{}) *MetricsCollector_Mount_Call {
	return &MetricsCollector_Mount_Call{Call: _e.mock.On("Mount", pipeline, stats_mgr)}
}

func (_c *MetricsCollector_Mount_Call) Run(run func(pipeline common.Pipeline, stats_mgr *pipeline_svc.StatisticsManager)) *MetricsCollector_Mount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.Pipeline), args[1].(*pipeline_svc.StatisticsManager))
	})
	return _c
}

func (_c *MetricsCollector_Mount_Call) Return(_a0 error) *MetricsCollector_Mount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MetricsCollector_Mount_Call) RunAndReturn(run func(common.Pipeline, *pipeline_svc.StatisticsManager) error) *MetricsCollector_Mount_Call {
	_c.Call.Return(run)
	return _c
}

// OnEvent provides a mock function with given fields: event
func (_m *MetricsCollector) OnEvent(event *common.Event) {
	_m.Called(event)
}

// MetricsCollector_OnEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnEvent'
type MetricsCollector_OnEvent_Call struct {
	*mock.Call
}

// OnEvent is a helper method to define mock.On call
//   - event *common.Event
func (_e *MetricsCollector_Expecter) OnEvent(event interface{}) *MetricsCollector_OnEvent_Call {
	return &MetricsCollector_OnEvent_Call{Call: _e.mock.On("OnEvent", event)}
}

func (_c *MetricsCollector_OnEvent_Call) Run(run func(event *common.Event)) *MetricsCollector_OnEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*common.Event))
	})
	return _c
}

func (_c *MetricsCollector_OnEvent_Call) Return() *MetricsCollector_OnEvent_Call {
	_c.Call.Return()
	return _c
}

func (_c *MetricsCollector_OnEvent_Call) RunAndReturn(run func(*common.Event)) *MetricsCollector_OnEvent_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateCurrentVbSpecificMetrics provides a mock function with given fields: vbno, valuesToApply, currentRegistries
func (_m *MetricsCollector) UpdateCurrentVbSpecificMetrics(vbno uint16, valuesToApply base.VBCountMetricMap, currentRegistries map[string]metrics.Registry) error {
	ret := _m.Called(vbno, valuesToApply, currentRegistries)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCurrentVbSpecificMetrics")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint16, base.VBCountMetricMap, map[string]metrics.Registry) error); ok {
		r0 = rf(vbno, valuesToApply, currentRegistries)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MetricsCollector_UpdateCurrentVbSpecificMetrics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateCurrentVbSpecificMetrics'
type MetricsCollector_UpdateCurrentVbSpecificMetrics_Call struct {
	*mock.Call
}

// UpdateCurrentVbSpecificMetrics is a helper method to define mock.On call
//   - vbno uint16
//   - valuesToApply base.VBCountMetricMap
//   - currentRegistries map[string]metrics.Registry
func (_e *MetricsCollector_Expecter) UpdateCurrentVbSpecificMetrics(vbno interface{}, valuesToApply interface{}, currentRegistries interface{}) *MetricsCollector_UpdateCurrentVbSpecificMetrics_Call {
	return &MetricsCollector_UpdateCurrentVbSpecificMetrics_Call{Call: _e.mock.On("UpdateCurrentVbSpecificMetrics", vbno, valuesToApply, currentRegistries)}
}

func (_c *MetricsCollector_UpdateCurrentVbSpecificMetrics_Call) Run(run func(vbno uint16, valuesToApply base.VBCountMetricMap, currentRegistries map[string]metrics.Registry)) *MetricsCollector_UpdateCurrentVbSpecificMetrics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint16), args[1].(base.VBCountMetricMap), args[2].(map[string]metrics.Registry))
	})
	return _c
}

func (_c *MetricsCollector_UpdateCurrentVbSpecificMetrics_Call) Return(_a0 error) *MetricsCollector_UpdateCurrentVbSpecificMetrics_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MetricsCollector_UpdateCurrentVbSpecificMetrics_Call) RunAndReturn(run func(uint16, base.VBCountMetricMap, map[string]metrics.Registry) error) *MetricsCollector_UpdateCurrentVbSpecificMetrics_Call {
	_c.Call.Return(run)
	return _c
}

// NewMetricsCollector creates a new instance of MetricsCollector. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMetricsCollector(t interface {
	mock.TestingT
	Cleanup(func())
}) *MetricsCollector {
	mock := &MetricsCollector{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
