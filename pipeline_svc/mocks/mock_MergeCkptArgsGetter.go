// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	pipeline_svc "github.com/couchbase/goxdcr/pipeline_svc"
	mock "github.com/stretchr/testify/mock"
)

// MergeCkptArgsGetter is an autogenerated mock type for the MergeCkptArgsGetter type
type MergeCkptArgsGetter struct {
	mock.Mock
}

type MergeCkptArgsGetter_Expecter struct {
	mock *mock.Mock
}

func (_m *MergeCkptArgsGetter) EXPECT() *MergeCkptArgsGetter_Expecter {
	return &MergeCkptArgsGetter_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields:
func (_m *MergeCkptArgsGetter) Execute() *pipeline_svc.MergeCkptArgs {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 *pipeline_svc.MergeCkptArgs
	if rf, ok := ret.Get(0).(func() *pipeline_svc.MergeCkptArgs); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pipeline_svc.MergeCkptArgs)
		}
	}

	return r0
}

// MergeCkptArgsGetter_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MergeCkptArgsGetter_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
func (_e *MergeCkptArgsGetter_Expecter) Execute() *MergeCkptArgsGetter_Execute_Call {
	return &MergeCkptArgsGetter_Execute_Call{Call: _e.mock.On("Execute")}
}

func (_c *MergeCkptArgsGetter_Execute_Call) Run(run func()) *MergeCkptArgsGetter_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MergeCkptArgsGetter_Execute_Call) Return(_a0 *pipeline_svc.MergeCkptArgs) *MergeCkptArgsGetter_Execute_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MergeCkptArgsGetter_Execute_Call) RunAndReturn(run func() *pipeline_svc.MergeCkptArgs) *MergeCkptArgsGetter_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMergeCkptArgsGetter creates a new instance of MergeCkptArgsGetter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMergeCkptArgsGetter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MergeCkptArgsGetter {
	mock := &MergeCkptArgsGetter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
