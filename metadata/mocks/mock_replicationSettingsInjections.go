// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	metadata "github.com/couchbase/goxdcr/v8/metadata"
	mock "github.com/stretchr/testify/mock"
)

// replicationSettingsInjections is an autogenerated mock type for the replicationSettingsInjections type
type replicationSettingsInjections struct {
	mock.Mock
}

type replicationSettingsInjections_Expecter struct {
	mock *mock.Mock
}

func (_m *replicationSettingsInjections) EXPECT() *replicationSettingsInjections_Expecter {
	return &replicationSettingsInjections_Expecter{mock: &_m.Mock}
}

// GetCasDriftInjectDocKey provides a mock function with given fields: settings
func (_m *replicationSettingsInjections) GetCasDriftInjectDocKey(settings *metadata.ReplicationSettings) string {
	ret := _m.Called(settings)

	if len(ret) == 0 {
		panic("no return value specified for GetCasDriftInjectDocKey")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(*metadata.ReplicationSettings) string); ok {
		r0 = rf(settings)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// replicationSettingsInjections_GetCasDriftInjectDocKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCasDriftInjectDocKey'
type replicationSettingsInjections_GetCasDriftInjectDocKey_Call struct {
	*mock.Call
}

// GetCasDriftInjectDocKey is a helper method to define mock.On call
//   - settings *metadata.ReplicationSettings
func (_e *replicationSettingsInjections_Expecter) GetCasDriftInjectDocKey(settings interface{}) *replicationSettingsInjections_GetCasDriftInjectDocKey_Call {
	return &replicationSettingsInjections_GetCasDriftInjectDocKey_Call{Call: _e.mock.On("GetCasDriftInjectDocKey", settings)}
}

func (_c *replicationSettingsInjections_GetCasDriftInjectDocKey_Call) Run(run func(settings *metadata.ReplicationSettings)) *replicationSettingsInjections_GetCasDriftInjectDocKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*metadata.ReplicationSettings))
	})
	return _c
}

func (_c *replicationSettingsInjections_GetCasDriftInjectDocKey_Call) Return(_a0 string) *replicationSettingsInjections_GetCasDriftInjectDocKey_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *replicationSettingsInjections_GetCasDriftInjectDocKey_Call) RunAndReturn(run func(*metadata.ReplicationSettings) string) *replicationSettingsInjections_GetCasDriftInjectDocKey_Call {
	_c.Call.Return(run)
	return _c
}

// GetDevBackfillPipelineDelay provides a mock function with given fields: settings
func (_m *replicationSettingsInjections) GetDevBackfillPipelineDelay(settings *metadata.ReplicationSettings) int {
	ret := _m.Called(settings)

	if len(ret) == 0 {
		panic("no return value specified for GetDevBackfillPipelineDelay")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func(*metadata.ReplicationSettings) int); ok {
		r0 = rf(settings)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// replicationSettingsInjections_GetDevBackfillPipelineDelay_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDevBackfillPipelineDelay'
type replicationSettingsInjections_GetDevBackfillPipelineDelay_Call struct {
	*mock.Call
}

// GetDevBackfillPipelineDelay is a helper method to define mock.On call
//   - settings *metadata.ReplicationSettings
func (_e *replicationSettingsInjections_Expecter) GetDevBackfillPipelineDelay(settings interface{}) *replicationSettingsInjections_GetDevBackfillPipelineDelay_Call {
	return &replicationSettingsInjections_GetDevBackfillPipelineDelay_Call{Call: _e.mock.On("GetDevBackfillPipelineDelay", settings)}
}

func (_c *replicationSettingsInjections_GetDevBackfillPipelineDelay_Call) Run(run func(settings *metadata.ReplicationSettings)) *replicationSettingsInjections_GetDevBackfillPipelineDelay_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*metadata.ReplicationSettings))
	})
	return _c
}

func (_c *replicationSettingsInjections_GetDevBackfillPipelineDelay_Call) Return(_a0 int) *replicationSettingsInjections_GetDevBackfillPipelineDelay_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *replicationSettingsInjections_GetDevBackfillPipelineDelay_Call) RunAndReturn(run func(*metadata.ReplicationSettings) int) *replicationSettingsInjections_GetDevBackfillPipelineDelay_Call {
	_c.Call.Return(run)
	return _c
}

// GetDevMainPipelineDelay provides a mock function with given fields: _a0
func (_m *replicationSettingsInjections) GetDevMainPipelineDelay(_a0 *metadata.ReplicationSettings) int {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetDevMainPipelineDelay")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func(*metadata.ReplicationSettings) int); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// replicationSettingsInjections_GetDevMainPipelineDelay_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDevMainPipelineDelay'
type replicationSettingsInjections_GetDevMainPipelineDelay_Call struct {
	*mock.Call
}

// GetDevMainPipelineDelay is a helper method to define mock.On call
//   - _a0 *metadata.ReplicationSettings
func (_e *replicationSettingsInjections_Expecter) GetDevMainPipelineDelay(_a0 interface{}) *replicationSettingsInjections_GetDevMainPipelineDelay_Call {
	return &replicationSettingsInjections_GetDevMainPipelineDelay_Call{Call: _e.mock.On("GetDevMainPipelineDelay", _a0)}
}

func (_c *replicationSettingsInjections_GetDevMainPipelineDelay_Call) Run(run func(_a0 *metadata.ReplicationSettings)) *replicationSettingsInjections_GetDevMainPipelineDelay_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*metadata.ReplicationSettings))
	})
	return _c
}

func (_c *replicationSettingsInjections_GetDevMainPipelineDelay_Call) Return(_a0 int) *replicationSettingsInjections_GetDevMainPipelineDelay_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *replicationSettingsInjections_GetDevMainPipelineDelay_Call) RunAndReturn(run func(*metadata.ReplicationSettings) int) *replicationSettingsInjections_GetDevMainPipelineDelay_Call {
	_c.Call.Return(run)
	return _c
}

// GetDevPreCheckMaxCasErrorInjection provides a mock function with given fields: settings
func (_m *replicationSettingsInjections) GetDevPreCheckMaxCasErrorInjection(settings *metadata.ReplicationSettings) bool {
	ret := _m.Called(settings)

	if len(ret) == 0 {
		panic("no return value specified for GetDevPreCheckMaxCasErrorInjection")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(*metadata.ReplicationSettings) bool); ok {
		r0 = rf(settings)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// replicationSettingsInjections_GetDevPreCheckMaxCasErrorInjection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDevPreCheckMaxCasErrorInjection'
type replicationSettingsInjections_GetDevPreCheckMaxCasErrorInjection_Call struct {
	*mock.Call
}

// GetDevPreCheckMaxCasErrorInjection is a helper method to define mock.On call
//   - settings *metadata.ReplicationSettings
func (_e *replicationSettingsInjections_Expecter) GetDevPreCheckMaxCasErrorInjection(settings interface{}) *replicationSettingsInjections_GetDevPreCheckMaxCasErrorInjection_Call {
	return &replicationSettingsInjections_GetDevPreCheckMaxCasErrorInjection_Call{Call: _e.mock.On("GetDevPreCheckMaxCasErrorInjection", settings)}
}

func (_c *replicationSettingsInjections_GetDevPreCheckMaxCasErrorInjection_Call) Run(run func(settings *metadata.ReplicationSettings)) *replicationSettingsInjections_GetDevPreCheckMaxCasErrorInjection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*metadata.ReplicationSettings))
	})
	return _c
}

func (_c *replicationSettingsInjections_GetDevPreCheckMaxCasErrorInjection_Call) Return(_a0 bool) *replicationSettingsInjections_GetDevPreCheckMaxCasErrorInjection_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *replicationSettingsInjections_GetDevPreCheckMaxCasErrorInjection_Call) RunAndReturn(run func(*metadata.ReplicationSettings) bool) *replicationSettingsInjections_GetDevPreCheckMaxCasErrorInjection_Call {
	_c.Call.Return(run)
	return _c
}

// GetDevPreCheckVBPoison provides a mock function with given fields: settings
func (_m *replicationSettingsInjections) GetDevPreCheckVBPoison(settings *metadata.ReplicationSettings) int {
	ret := _m.Called(settings)

	if len(ret) == 0 {
		panic("no return value specified for GetDevPreCheckVBPoison")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func(*metadata.ReplicationSettings) int); ok {
		r0 = rf(settings)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// replicationSettingsInjections_GetDevPreCheckVBPoison_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDevPreCheckVBPoison'
type replicationSettingsInjections_GetDevPreCheckVBPoison_Call struct {
	*mock.Call
}

// GetDevPreCheckVBPoison is a helper method to define mock.On call
//   - settings *metadata.ReplicationSettings
func (_e *replicationSettingsInjections_Expecter) GetDevPreCheckVBPoison(settings interface{}) *replicationSettingsInjections_GetDevPreCheckVBPoison_Call {
	return &replicationSettingsInjections_GetDevPreCheckVBPoison_Call{Call: _e.mock.On("GetDevPreCheckVBPoison", settings)}
}

func (_c *replicationSettingsInjections_GetDevPreCheckVBPoison_Call) Run(run func(settings *metadata.ReplicationSettings)) *replicationSettingsInjections_GetDevPreCheckVBPoison_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*metadata.ReplicationSettings))
	})
	return _c
}

func (_c *replicationSettingsInjections_GetDevPreCheckVBPoison_Call) Return(_a0 int) *replicationSettingsInjections_GetDevPreCheckVBPoison_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *replicationSettingsInjections_GetDevPreCheckVBPoison_Call) RunAndReturn(run func(*metadata.ReplicationSettings) int) *replicationSettingsInjections_GetDevPreCheckVBPoison_Call {
	_c.Call.Return(run)
	return _c
}

// newReplicationSettingsInjections creates a new instance of replicationSettingsInjections. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newReplicationSettingsInjections(t interface {
	mock.TestingT
	Cleanup(func())
}) *replicationSettingsInjections {
	mock := &replicationSettingsInjections{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
