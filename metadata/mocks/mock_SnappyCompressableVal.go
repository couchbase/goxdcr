// Code generated by mockery. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// SnappyCompressableVal is an autogenerated mock type for the SnappyCompressableVal type
type SnappyCompressableVal struct {
	mock.Mock
}

type SnappyCompressableVal_Expecter struct {
	mock *mock.Mock
}

func (_m *SnappyCompressableVal) EXPECT() *SnappyCompressableVal_Expecter {
	return &SnappyCompressableVal_Expecter{mock: &_m.Mock}
}

// ToSnappyCompressed provides a mock function with given fields:
func (_m *SnappyCompressableVal) ToSnappyCompressed() ([]byte, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ToSnappyCompressed")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]byte, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SnappyCompressableVal_ToSnappyCompressed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ToSnappyCompressed'
type SnappyCompressableVal_ToSnappyCompressed_Call struct {
	*mock.Call
}

// ToSnappyCompressed is a helper method to define mock.On call
func (_e *SnappyCompressableVal_Expecter) ToSnappyCompressed() *SnappyCompressableVal_ToSnappyCompressed_Call {
	return &SnappyCompressableVal_ToSnappyCompressed_Call{Call: _e.mock.On("ToSnappyCompressed")}
}

func (_c *SnappyCompressableVal_ToSnappyCompressed_Call) Run(run func()) *SnappyCompressableVal_ToSnappyCompressed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SnappyCompressableVal_ToSnappyCompressed_Call) Return(_a0 []byte, _a1 error) *SnappyCompressableVal_ToSnappyCompressed_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SnappyCompressableVal_ToSnappyCompressed_Call) RunAndReturn(run func() ([]byte, error)) *SnappyCompressableVal_ToSnappyCompressed_Call {
	_c.Call.Return(run)
	return _c
}

// NewSnappyCompressableVal creates a new instance of SnappyCompressableVal. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSnappyCompressableVal(t interface {
	mock.TestingT
	Cleanup(func())
}) *SnappyCompressableVal {
	mock := &SnappyCompressableVal{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
