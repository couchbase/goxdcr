// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	base "github.com/couchbase/goxdcr/base"
	log "github.com/couchbase/goxdcr/log"

	mock "github.com/stretchr/testify/mock"
)

// GetUUIDFunc is an autogenerated mock type for the GetUUIDFunc type
type GetUUIDFunc struct {
	mock.Mock
}

type GetUUIDFunc_Expecter struct {
	mock *mock.Mock
}

func (_m *GetUUIDFunc) EXPECT() *GetUUIDFunc_Expecter {
	return &GetUUIDFunc_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: hostAddr, username, password, authMech, certificate, sanInCertificate, clientCertificate, clientKey, logger
func (_m *GetUUIDFunc) Execute(hostAddr string, username string, password string, authMech base.HttpAuthMech, certificate []byte, sanInCertificate bool, clientCertificate []byte, clientKey []byte, logger *log.CommonLogger) (string, error) {
	ret := _m.Called(hostAddr, username, password, authMech, certificate, sanInCertificate, clientCertificate, clientKey, logger)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string, base.HttpAuthMech, []byte, bool, []byte, []byte, *log.CommonLogger) (string, error)); ok {
		return rf(hostAddr, username, password, authMech, certificate, sanInCertificate, clientCertificate, clientKey, logger)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, base.HttpAuthMech, []byte, bool, []byte, []byte, *log.CommonLogger) string); ok {
		r0 = rf(hostAddr, username, password, authMech, certificate, sanInCertificate, clientCertificate, clientKey, logger)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string, string, base.HttpAuthMech, []byte, bool, []byte, []byte, *log.CommonLogger) error); ok {
		r1 = rf(hostAddr, username, password, authMech, certificate, sanInCertificate, clientCertificate, clientKey, logger)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUUIDFunc_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type GetUUIDFunc_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - hostAddr string
//   - username string
//   - password string
//   - authMech base.HttpAuthMech
//   - certificate []byte
//   - sanInCertificate bool
//   - clientCertificate []byte
//   - clientKey []byte
//   - logger *log.CommonLogger
func (_e *GetUUIDFunc_Expecter) Execute(hostAddr interface{}, username interface{}, password interface{}, authMech interface{}, certificate interface{}, sanInCertificate interface{}, clientCertificate interface{}, clientKey interface{}, logger interface{}) *GetUUIDFunc_Execute_Call {
	return &GetUUIDFunc_Execute_Call{Call: _e.mock.On("Execute", hostAddr, username, password, authMech, certificate, sanInCertificate, clientCertificate, clientKey, logger)}
}

func (_c *GetUUIDFunc_Execute_Call) Run(run func(hostAddr string, username string, password string, authMech base.HttpAuthMech, certificate []byte, sanInCertificate bool, clientCertificate []byte, clientKey []byte, logger *log.CommonLogger)) *GetUUIDFunc_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string), args[3].(base.HttpAuthMech), args[4].([]byte), args[5].(bool), args[6].([]byte), args[7].([]byte), args[8].(*log.CommonLogger))
	})
	return _c
}

func (_c *GetUUIDFunc_Execute_Call) Return(_a0 string, _a1 error) *GetUUIDFunc_Execute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GetUUIDFunc_Execute_Call) RunAndReturn(run func(string, string, string, base.HttpAuthMech, []byte, bool, []byte, []byte, *log.CommonLogger) (string, error)) *GetUUIDFunc_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewGetUUIDFunc creates a new instance of GetUUIDFunc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGetUUIDFunc(t interface {
	mock.TestingT
	Cleanup(func())
}) *GetUUIDFunc {
	mock := &GetUUIDFunc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
