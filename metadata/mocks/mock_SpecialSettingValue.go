// Code generated by mockery. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// SpecialSettingValue is an autogenerated mock type for the SpecialSettingValue type
type SpecialSettingValue struct {
	mock.Mock
}

type SpecialSettingValue_Expecter struct {
	mock *mock.Mock
}

func (_m *SpecialSettingValue) EXPECT() *SpecialSettingValue_Expecter {
	return &SpecialSettingValue_Expecter{mock: &_m.Mock}
}

// SameAs provides a mock function with given fields: other
func (_m *SpecialSettingValue) SameAs(other interface{}) bool {
	ret := _m.Called(other)

	if len(ret) == 0 {
		panic("no return value specified for SameAs")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(interface{}) bool); ok {
		r0 = rf(other)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// SpecialSettingValue_SameAs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SameAs'
type SpecialSettingValue_SameAs_Call struct {
	*mock.Call
}

// SameAs is a helper method to define mock.On call
//   - other interface{}
func (_e *SpecialSettingValue_Expecter) SameAs(other interface{}) *SpecialSettingValue_SameAs_Call {
	return &SpecialSettingValue_SameAs_Call{Call: _e.mock.On("SameAs", other)}
}

func (_c *SpecialSettingValue_SameAs_Call) Run(run func(other interface{})) *SpecialSettingValue_SameAs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *SpecialSettingValue_SameAs_Call) Return(_a0 bool) *SpecialSettingValue_SameAs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SpecialSettingValue_SameAs_Call) RunAndReturn(run func(interface{}) bool) *SpecialSettingValue_SameAs_Call {
	_c.Call.Return(run)
	return _c
}

// NewSpecialSettingValue creates a new instance of SpecialSettingValue. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSpecialSettingValue(t interface {
	mock.TestingT
	Cleanup(func())
}) *SpecialSettingValue {
	mock := &SpecialSettingValue{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
