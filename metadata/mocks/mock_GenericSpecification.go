// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	metadata "github.com/couchbase/goxdcr/metadata"
	mock "github.com/stretchr/testify/mock"
)

// GenericSpecification is an autogenerated mock type for the GenericSpecification type
type GenericSpecification struct {
	mock.Mock
}

type GenericSpecification_Expecter struct {
	mock *mock.Mock
}

func (_m *GenericSpecification) EXPECT() *GenericSpecification_Expecter {
	return &GenericSpecification_Expecter{mock: &_m.Mock}
}

// CloneGeneric provides a mock function with given fields:
func (_m *GenericSpecification) CloneGeneric() metadata.GenericSpecification {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CloneGeneric")
	}

	var r0 metadata.GenericSpecification
	if rf, ok := ret.Get(0).(func() metadata.GenericSpecification); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(metadata.GenericSpecification)
		}
	}

	return r0
}

// GenericSpecification_CloneGeneric_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CloneGeneric'
type GenericSpecification_CloneGeneric_Call struct {
	*mock.Call
}

// CloneGeneric is a helper method to define mock.On call
func (_e *GenericSpecification_Expecter) CloneGeneric() *GenericSpecification_CloneGeneric_Call {
	return &GenericSpecification_CloneGeneric_Call{Call: _e.mock.On("CloneGeneric")}
}

func (_c *GenericSpecification_CloneGeneric_Call) Run(run func()) *GenericSpecification_CloneGeneric_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *GenericSpecification_CloneGeneric_Call) Return(_a0 metadata.GenericSpecification) *GenericSpecification_CloneGeneric_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GenericSpecification_CloneGeneric_Call) RunAndReturn(run func() metadata.GenericSpecification) *GenericSpecification_CloneGeneric_Call {
	_c.Call.Return(run)
	return _c
}

// GetBackfillSpec provides a mock function with given fields:
func (_m *GenericSpecification) GetBackfillSpec() *metadata.BackfillReplicationSpec {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetBackfillSpec")
	}

	var r0 *metadata.BackfillReplicationSpec
	if rf, ok := ret.Get(0).(func() *metadata.BackfillReplicationSpec); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*metadata.BackfillReplicationSpec)
		}
	}

	return r0
}

// GenericSpecification_GetBackfillSpec_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBackfillSpec'
type GenericSpecification_GetBackfillSpec_Call struct {
	*mock.Call
}

// GetBackfillSpec is a helper method to define mock.On call
func (_e *GenericSpecification_Expecter) GetBackfillSpec() *GenericSpecification_GetBackfillSpec_Call {
	return &GenericSpecification_GetBackfillSpec_Call{Call: _e.mock.On("GetBackfillSpec")}
}

func (_c *GenericSpecification_GetBackfillSpec_Call) Run(run func()) *GenericSpecification_GetBackfillSpec_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *GenericSpecification_GetBackfillSpec_Call) Return(_a0 *metadata.BackfillReplicationSpec) *GenericSpecification_GetBackfillSpec_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GenericSpecification_GetBackfillSpec_Call) RunAndReturn(run func() *metadata.BackfillReplicationSpec) *GenericSpecification_GetBackfillSpec_Call {
	_c.Call.Return(run)
	return _c
}

// GetFullId provides a mock function with given fields:
func (_m *GenericSpecification) GetFullId() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetFullId")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GenericSpecification_GetFullId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFullId'
type GenericSpecification_GetFullId_Call struct {
	*mock.Call
}

// GetFullId is a helper method to define mock.On call
func (_e *GenericSpecification_Expecter) GetFullId() *GenericSpecification_GetFullId_Call {
	return &GenericSpecification_GetFullId_Call{Call: _e.mock.On("GetFullId")}
}

func (_c *GenericSpecification_GetFullId_Call) Run(run func()) *GenericSpecification_GetFullId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *GenericSpecification_GetFullId_Call) Return(_a0 string) *GenericSpecification_GetFullId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GenericSpecification_GetFullId_Call) RunAndReturn(run func() string) *GenericSpecification_GetFullId_Call {
	_c.Call.Return(run)
	return _c
}

// GetReplicationSpec provides a mock function with given fields:
func (_m *GenericSpecification) GetReplicationSpec() *metadata.ReplicationSpecification {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetReplicationSpec")
	}

	var r0 *metadata.ReplicationSpecification
	if rf, ok := ret.Get(0).(func() *metadata.ReplicationSpecification); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*metadata.ReplicationSpecification)
		}
	}

	return r0
}

// GenericSpecification_GetReplicationSpec_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetReplicationSpec'
type GenericSpecification_GetReplicationSpec_Call struct {
	*mock.Call
}

// GetReplicationSpec is a helper method to define mock.On call
func (_e *GenericSpecification_Expecter) GetReplicationSpec() *GenericSpecification_GetReplicationSpec_Call {
	return &GenericSpecification_GetReplicationSpec_Call{Call: _e.mock.On("GetReplicationSpec")}
}

func (_c *GenericSpecification_GetReplicationSpec_Call) Run(run func()) *GenericSpecification_GetReplicationSpec_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *GenericSpecification_GetReplicationSpec_Call) Return(_a0 *metadata.ReplicationSpecification) *GenericSpecification_GetReplicationSpec_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GenericSpecification_GetReplicationSpec_Call) RunAndReturn(run func() *metadata.ReplicationSpecification) *GenericSpecification_GetReplicationSpec_Call {
	_c.Call.Return(run)
	return _c
}

// RedactGeneric provides a mock function with given fields:
func (_m *GenericSpecification) RedactGeneric() metadata.GenericSpecification {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for RedactGeneric")
	}

	var r0 metadata.GenericSpecification
	if rf, ok := ret.Get(0).(func() metadata.GenericSpecification); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(metadata.GenericSpecification)
		}
	}

	return r0
}

// GenericSpecification_RedactGeneric_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RedactGeneric'
type GenericSpecification_RedactGeneric_Call struct {
	*mock.Call
}

// RedactGeneric is a helper method to define mock.On call
func (_e *GenericSpecification_Expecter) RedactGeneric() *GenericSpecification_RedactGeneric_Call {
	return &GenericSpecification_RedactGeneric_Call{Call: _e.mock.On("RedactGeneric")}
}

func (_c *GenericSpecification_RedactGeneric_Call) Run(run func()) *GenericSpecification_RedactGeneric_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *GenericSpecification_RedactGeneric_Call) Return(_a0 metadata.GenericSpecification) *GenericSpecification_RedactGeneric_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GenericSpecification_RedactGeneric_Call) RunAndReturn(run func() metadata.GenericSpecification) *GenericSpecification_RedactGeneric_Call {
	_c.Call.Return(run)
	return _c
}

// SameSpecGeneric provides a mock function with given fields: other
func (_m *GenericSpecification) SameSpecGeneric(other metadata.GenericSpecification) bool {
	ret := _m.Called(other)

	if len(ret) == 0 {
		panic("no return value specified for SameSpecGeneric")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(metadata.GenericSpecification) bool); ok {
		r0 = rf(other)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GenericSpecification_SameSpecGeneric_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SameSpecGeneric'
type GenericSpecification_SameSpecGeneric_Call struct {
	*mock.Call
}

// SameSpecGeneric is a helper method to define mock.On call
//   - other metadata.GenericSpecification
func (_e *GenericSpecification_Expecter) SameSpecGeneric(other interface{}) *GenericSpecification_SameSpecGeneric_Call {
	return &GenericSpecification_SameSpecGeneric_Call{Call: _e.mock.On("SameSpecGeneric", other)}
}

func (_c *GenericSpecification_SameSpecGeneric_Call) Run(run func(other metadata.GenericSpecification)) *GenericSpecification_SameSpecGeneric_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(metadata.GenericSpecification))
	})
	return _c
}

func (_c *GenericSpecification_SameSpecGeneric_Call) Return(_a0 bool) *GenericSpecification_SameSpecGeneric_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GenericSpecification_SameSpecGeneric_Call) RunAndReturn(run func(metadata.GenericSpecification) bool) *GenericSpecification_SameSpecGeneric_Call {
	_c.Call.Return(run)
	return _c
}

// Type provides a mock function with given fields:
func (_m *GenericSpecification) Type() metadata.ReplicationType {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Type")
	}

	var r0 metadata.ReplicationType
	if rf, ok := ret.Get(0).(func() metadata.ReplicationType); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(metadata.ReplicationType)
	}

	return r0
}

// GenericSpecification_Type_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Type'
type GenericSpecification_Type_Call struct {
	*mock.Call
}

// Type is a helper method to define mock.On call
func (_e *GenericSpecification_Expecter) Type() *GenericSpecification_Type_Call {
	return &GenericSpecification_Type_Call{Call: _e.mock.On("Type")}
}

func (_c *GenericSpecification_Type_Call) Run(run func()) *GenericSpecification_Type_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *GenericSpecification_Type_Call) Return(_a0 metadata.ReplicationType) *GenericSpecification_Type_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GenericSpecification_Type_Call) RunAndReturn(run func() metadata.ReplicationType) *GenericSpecification_Type_Call {
	_c.Call.Return(run)
	return _c
}

// NewGenericSpecification creates a new instance of GenericSpecification. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGenericSpecification(t interface {
	mock.TestingT
	Cleanup(func())
}) *GenericSpecification {
	mock := &GenericSpecification{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
