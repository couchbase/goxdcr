# Copyright 2019-Present Couchbase, Inc.
#
# Use of this software is governed by the Business Source License included in
# the file licenses/BSL-Couchbase.txt.  As of the Change Date specified in that
# file, in accordance with the Business Source License, use of this software
# will be governed by the Apache License, Version 2.0, included in the file
# licenses/APL2.txt.

# =============================
# topological map information
# =============================
# cluster -> Bucket(s)
# -----------------
CLUSTER_NAME_PORT_MAP=(["C1"]=9000 ["C2"]=9001)
CLUSTER_NAME_XDCR_PORT_MAP=(["C1"]=13000 ["C2"]=13001)

CLUSTER_NAME_BUCKET_MAP=(["C1"]="B1" ["C2"]="B2")

# Bucket properties
declare -A BucketProperty=(["ramQuotaMB"]=100)
declare -A Bucket1Properties=(["ramQuotaMB"]=100 ["CompressionMode"]="Active")
insertPropertyIntoBucketNamePropertyMap "B0" BucketProperty
insertPropertyIntoBucketNamePropertyMap "B1" Bucket1Properties
insertPropertyIntoBucketNamePropertyMap "B2" BucketProperty

# Replicate US filter to target B2.S3.col1
# Replicate NonUS to target B2.S3.col2
US_filter='(country == \"United States\" OR country = \"Canada\") AND type=\"brewery\"'
NonUS_filter='country != \"United States\" AND country != \"Canada\" AND type=\"brewery\"'

mappingRule="{\"$US_filter\":\"S3.col1\",\"$NonUS_filter\":\"S3.col2\"}"

declare -A MigrationReplProperties=(["replicationType"]="continuous" ["checkpointInterval"]=60 ["statsInterval"]=500
	["collectionsMigrationMode"]=true ["colMappingRules"]="$mappingRule")

# Bucket -> Scopes
# -----------------
declare -a scope1Arr=("S1" "S2")
declare -a scope1ArrFull=("S1" "S2" "S3")
BUCKET_NAME_SCOPE_MAP=(["B2"]=${scope1Arr[@]})

# Scopes -> Collections
# ----------------------
declare -a collection1Arr=("col1" "col2")
declare -a collection2Arr=("col1" "col2" "col3")
SCOPE_NAME_COLLECTION_MAP=(["S1"]=${collection1Arr[@]} ["S2"]=${collection2Arr[@]} ["S3"]=${collection2Arr[@]})

function runDataLoad {
	local beerSample
	beerSample=$(findFileTraverseUp "./install/samples" "beer-sample.zip")
	if [[ -z "${beerSample:-}" ]]; then
		echo "Error: cannot find beerSample"
		exit 1
	fi
	runCbimport "C1" "B1" "$beerSample"
}

declare -i ORIG_TARGET_MAN_PULL_INTERVAL

function cleanupTestCaseInternalSettings {
	resetCustomManifestRefreshInterval "C1"
}

function runTestCase {
	echo "============================================================================"
	echo "Running collections migration backfill test case"
	echo "============================================================================"
	testForClusterRun
	if (($? != 0)); then
		exit $?
	fi

	# First setup mis-matching mapping meaning all the data reside in C1
	setupTopologies
	if (($? != 0)); then
		exit $?
	fi
	# Before doing provisioning, get old internal settings
	setCustomManifestRefreshInterval "C1"

	# At this point, settings need to be restored IF the script was forced exited
	trap cleanupTestCaseInternalSettings EXIT

	# Get current instance
	local -i currentBrokenInstanceCnt
	local -i currentRepairedInstanceCnt
	local -i currentBackfillInstanceCnt
	local -i currentVBTasksDoneInstanceCnt
	local -i currentBackfillAppendInstanceCnt

	local currentClusterLog
	currentClusterLog=$(getClusterLogs "C1")
	currentBrokenInstanceCnt=$(echo "$currentClusterLog" | grep -c "$BROKEN_MSG")
	currentRepairedInstanceCnt=$(echo "$currentClusterLog" | grep -c "$REPAIR_MSG")

	local currentXdcrLog
	currentXdcrLog=$(getInternalNodeXdcrLog "C1")
	currentBackfillInstanceCnt=$(echo "$currentXdcrLog" | grep -c "$BACKFILL_MSG")
	currentBackfillAppendInstanceCnt=$(echo "$currentXdcrLog" | grep -c "$BACKFILL_APPEND_MSG")
	currentVBTasksDoneInstanceCnt=$(echo "$currentXdcrLog" | grep -c "$VBTASKS_DONE_MSG")

	# Wait for vbuckets and all the other things to propagate before XDCR provisioning
	sleep 5
	echo "Loading beer sample on source cluster..."
	runDataLoad

	createRemoteClusterReference "C1" "C2"
	createRemoteClusterReference "C2" "C1"
	sleep 1

	createBucketReplication "C1" "B1" "C2" "B2" MigrationReplProperties
	printGlobalScopeAndCollectionInfo

	echo "Waiting 15 seconds before checking item count first pass"
	sleep 15
	checkItemCnt "C2" "B2" 0

	# Then re-setup the implicit matching that matches
	BUCKET_NAME_SCOPE_MAP=(["B2"]=${scope1ArrFull[@]})
	setupTopologies
	echo "Sleeping 30 seconds for discovery and automatic backfill"
	sleep 30
	printGlobalScopeAndCollectionInfo

	# After sleeping, the backfill manager should have triggered the backfill
	# 1412 items total for the above filters
	checkItemCnt "C2" "B2" 1412
	validateInternalLogWithInstance "C1" "$BACKFILL_MSG" $(($currentBackfillInstanceCnt + 1))
	# No error converting DCP task
	validateInternalLogWithInstance "C1" "$DCP_CONVERT_ERR_MSG" 0

	grepForPanics
	validateXDCRCheckpoints "C1"
	validateXDCRCheckpoints "C2"

	echo "============================================================================"
	echo "PASSED"
	echo "============================================================================"
	cleanupBucketReplications
	cleanupBuckets
	cleanupRemoteClusterRefs
}
