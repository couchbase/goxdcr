# Copyright 2019-Present Couchbase, Inc.
#
# Use of this software is governed by the Business Source License included in
# the file licenses/BSL-Couchbase.txt.  As of the Change Date specified in that
# file, in accordance with the Business Source License, use of this software
# will be governed by the Apache License, Version 2.0, included in the file
# licenses/APL2.txt.

# =============================
# topological map information
# =============================
# cluster -> Bucket(s)
# -----------------
CLUSTER_NAME_PORT_MAP=(["C1"]=9000 ["C2"]=9001)
CLUSTER_NAME_XDCR_PORT_MAP=(["C1"]=13000 ["C2"]=13001)
# Set c1 to have 2 buckets and c2 to have 1 bucket
declare -a cluster1BucketsArr
cluster1BucketsArr=("B0" "B1")
CLUSTER_NAME_BUCKET_MAP=(["C1"]=${cluster1BucketsArr[@]} ["C2"]="B2")

# Bucket properties
declare -A BucketProperty=(["ramQuotaMB"]=100)
declare -A Bucket1Properties=(["ramQuotaMB"]=100 ["CompressionMode"]="Active")
insertPropertyIntoBucketNamePropertyMap "B0" BucketProperty
insertPropertyIntoBucketNamePropertyMap "B1" Bucket1Properties
insertPropertyIntoBucketNamePropertyMap "B2" BucketProperty

declare -A DefaultBucketReplProperties=(["replicationType"]="continuous" ["checkpointInterval"]=60 ["statsInterval"]=500)

# Bucket -> Scopes
# -----------------
declare -a scope1Arr=("S1" "S2")
BUCKET_NAME_SCOPE_MAP=(["B1"]=${scope1Arr[@]} ["B2"]="S1")

# Scopes -> Collections
# ----------------------
declare -a collection1Arr=("col1" "col2")
declare -a collection2Arr=("col1" "col2" "col3")
SCOPE_NAME_COLLECTION_MAP=(["S1"]=${collection1Arr[@]} ["S2"]=${collection2Arr[@]} ["S3"]=${collection2Arr[@]})

function runDataLoad {
	# Run CBWorkloadgen in parallel
	runCbWorkloadGenCollection "C1" "B1" "S1" "col1"
	waitForBgJobs
}

function pauseAndResumeMultiples {
	local total=$1
	local i
	local pauseResumeStatus

	for ((i = 0; $i < $total; i = $(($i + 1)))); do
		echo "Sleeping 30 seconds before running another pass"
		sleep 30
		echo "Running multiple pause and resumes $(($i + 1)) out of $total"
		oldDataReplicated=$(getDataReplicated "C1" "B1" "C2" "B2")
		oldDocsProcessed=$(getDocsProcessed "C1" "B1" "C2" "B2")

		# Verify prometheus stats for running is correct
		pauseResumeStatus=$(getPrometheusStats "C1" | grep status | grep Main | awk '{print $NF}')
		if ((!$pauseResumeStatus == 1)); then
			# try again
			sleep 30
			pauseResumeStatus=$(getPrometheusStats "C1" | grep status | grep Main | awk '{print $NF}')
			if ((!$pauseResumeStatus == 0)); then
				echo "Pipeline running should have status 1. Got $pauseResumeStatus"
				exit 1
			fi
		fi

		echo "Pausing replication - current data replicated: $oldDataReplicated docs_processed: $oldDocsProcessed"
		pauseReplication "C1" "B1" "C2" "B2"
		echo "Waiting 30 seconds for pipeline to really pause"
		sleep 30
		grepForPanics
		validateXDCRCheckpoints "C1"
		validateXDCRCheckpoints "C2"

		pauseResumeStatus=$(getPrometheusStats "C1" | grep status | grep Main | awk '{print $NF}')
		if ((!$pauseResumeStatus == 0)); then
			# try again
			sleep 30
			pauseResumeStatus=$(getPrometheusStats "C1" | grep status | grep Main | awk '{print $NF}')
			if ((!$pauseResumeStatus == 0)); then
				echo "Pipeline paused should have status 0. Got $pauseResumeStatus"
				exit 1
			fi
		fi

		resumeReplication "C1" "B1" "C2" "B2"
		echo "Waiting 10 seconds for resume to finish"
		sleep 10
		grepForPanics

		checkDocsProcessed "C1" "B1" "C2" "B2" "$oldDocsProcessed"
		checkDataReplicatedIsZero "C1" "B1" "C2" "B2" "$oldDataReplicated"

		# Kill source goxdcr
		killGoXdcr "C1"
		echo "Sleeping 15 seconds for goxdcr to reboot"
		sleep 15
		checkUnidirectionalChangesLeft
		grepForPanics

		# Run data load again
		oldDataReplicated=$(getDataReplicated "C1" "B1" "C2" "B2")
		runDataLoad "$i"
		# Changes left should go to 0
		checkUnidirectionalChangesLeft
		sleep 10
		if (($(getDocsProcessed "C1" "B1" "C2" "B2") == $oldDocsProcessed)); then
			echo "Data processed should not be the same after run"
			exit 1
		fi
		if (($(getDataReplicated "C1" "B1" "C2" "B2") == $oldDataReplicated)); then
			# Because broken mapping should have persisted
			echo "Data replicated should not be the same after run"
			exit 1
		fi
		grepForPanics
	done
}

function runTestCase {
	echo "============================================================================"
	echo "Running pause and resume test case"
	echo "============================================================================"
	setupTopologies
	if (($? != 0)); then
		exit $?
	fi
	# Wait for vbuckets and all the other things to propagate before XDCR provisioning
	sleep 5
	createRemoteClusterReference "C1" "C2"
	createRemoteClusterReference "C2" "C1"
	sleep 1
	createBucketReplication "C1" "B1" "C2" "B2" DefaultBucketReplProperties
	createBucketReplication "C2" "B2" "C1" "B1" DefaultBucketReplProperties
	printGlobalScopeAndCollectionInfo
	runDataLoad

	echo "Waiting 10 seconds before checking item count"
	sleep 10
	checkItemCnt "C1" "B1" $CBWORKLOAD_COLLECTION_NUM_ITEMS
	checkItemCnt "C2" "B2" $CBWORKLOAD_COLLECTION_NUM_ITEMS

	checkUnidirectionalChangesLeft

	pauseAndResumeMultiples 2

	echo "============================================================================"
	echo "PASSED"
	echo "============================================================================"

	cleanupBucketReplications
	cleanupBuckets
	cleanupRemoteClusterRefs
}
