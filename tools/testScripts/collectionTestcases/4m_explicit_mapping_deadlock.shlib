# Copyright 2021-Present Couchbase, Inc.
#
# Use of this software is governed by the Business Source License included in
# the file licenses/BSL-Couchbase.txt.  As of the Change Date specified in that
# file, in accordance with the Business Source License, use of this software
# will be governed by the Apache License, Version 2.0, included in the file
# licenses/APL2.txt.

# =============================
# topological map information
# =============================
# cluster -> Bucket(s)
# -----------------
CLUSTER_NAME_PORT_MAP=(["C1"]=9000 ["C2"]=9001)
CLUSTER_NAME_XDCR_PORT_MAP=(["C1"]=13000 ["C2"]=13001)
CLUSTER_NAME_BUCKET_MAP=(["C1"]="B1" ["C2"]="B2")

# Bucket properties
declare -A BucketProperty=(["ramQuotaMB"]=100)
declare -A Bucket1Properties=(["ramQuotaMB"]=100 ["CompressionMode"]="Active")
insertPropertyIntoBucketNamePropertyMap "B0" BucketProperty
insertPropertyIntoBucketNamePropertyMap "B1" Bucket1Properties
insertPropertyIntoBucketNamePropertyMap "B2" BucketProperty

#declare -A DefaultBucketReplProperties=(["replicationType"]="continuous" ["checkpointInterval"]=60 ["statsInterval"]=500)
#declare -A ExplicitReplProperties=(["replicationType"]="continuous" ["checkpointInterval"]=60 ["statsInterval"]=500 ["collectionsExplicitMapping"]="true" ["colMappingRules"]='{"S1.col1":"S2.col1"}' ["collectionsOSOMode"]="false")
#declare -A ExplicitReplSlowProperties=(["replicationType"]="continuous" ["checkpointInterval"]=60 ["statsInterval"]=500 ["collectionsExplicitMapping"]="true" ["colMappingRules"]='{"S1.col1":"S2.col1","S1.col2":"S2.col2","S1.col3":"S2.col3","S1.col4":"S2.col4"}' ["collectionsOSOMode"]="false" ["xdcrDevBackfillSendDelayMs"]=1000 ["xdcrDevBackfillMgrVbsTasksDoneNotifierDelay"]="true")
declare -A ExplicitReplSlowProperties=(["replicationType"]="continuous" ["checkpointInterval"]=60 ["statsInterval"]=500 ["collectionsExplicitMapping"]="true" ["colMappingRules"]='{"S1.col1":"S2.col1","S1.col2":"S2.col2","S1.col3":"S2.col3","S1.col4":"S2.col4"}' ["collectionsOSOMode"]="false" ["xdcrDevBackfillSendDelayMs"]=1000)

# Bucket -> Scopes
# -----------------
BUCKET_NAME_SCOPE_MAP=(["B1"]="S1" ["B2"]="S2")

# Scopes -> Collections
# ----------------------
declare -a collection1Arr=("col1" "col2" "col3" "col4")
declare -a collection2Arr=("col1" "col2")
SCOPE_NAME_COLLECTION_MAP=(["S1"]=${collection1Arr[@]} ["S2"]=${collection2Arr[@]})

function runDataLoad {
	# Run CBWorkloadgen in parallel
	runCbWorkloadGenCollection "C1" "B1" "S1" "col1" &
	runCbWorkloadGenCollection "C1" "B1" "S1" "col2" &
	runCbWorkloadGenCollection "C1" "B1" "S1" "col3" &
	runCbWorkloadGenCollection "C1" "B1" "S1" "col4" &
	waitForBgJobs
}

declare -i ORIG_TARGET_MAN_PULL_INTERVAL

function runDataLoadContinuous {
	while ((1)); do
		runCbWorkloadGenCollectionCont "C1" "B1" "S1" "col1" >/dev/null 2>&1
	done
}

function cleanupTestCaseInternalSettings {
	resetCustomManifestRefreshInterval "C1"
}

function runTestCase {
	echo "==============================================================================="
	echo "Running explicit mapping test case - add new mapping when pipeline is suspended"
	echo "==============================================================================="
	testForClusterRun
	if (($? != 0)); then
		exit $?
	fi

	# First setup mis-matching mapping meaning all the data reside in C1
	setupTopologies
	if (($? != 0)); then
		exit $?
	fi

	setCustomManifestRefreshInterval "C1"

	# At this point, settings need to be restored IF the script was forced exited
	trap cleanupTestCaseInternalSettings EXIT

	local -i checkCount1col
	checkCount1col=$(($CBWORKLOAD_COLLECTION_NUM_ITEMS * 1))
	local -i checkCount2col
	checkCount2col=$(($CBWORKLOAD_COLLECTION_NUM_ITEMS * 2))
	local -i checkCount3col
	checkCount3col=$(($CBWORKLOAD_COLLECTION_NUM_ITEMS * 3))
	local -i checkCount4col
	checkCount4col=$(($CBWORKLOAD_COLLECTION_NUM_ITEMS * 4))

	runDataLoad
	checkItemCnt "C1" "B1" $checkCount4col

	# Wait for vbuckets and all the other things to propagate before XDCR provisioning
	sleep 5
	createRemoteClusterReference "C1" "C2"
	sleep 1
	createBucketReplication "C1" "B1" "C2" "B2" ExplicitReplSlowProperties
	printGlobalScopeAndCollectionInfo

	echo "Waiting 15 seconds before checking item count first pass"
	sleep 15
	# Only col1 + col2 are replicated at this point
	checkItemCnt "C2" "B2" $checkCount2col

	# After replicating 10k items from a source collection to target collection
	# create one collection to force one backfill
	createCollection "C2" "B2" "S2" "col3"

	echo "Sleeping 30 seconds for discovery and automatic backfill"
	sleep 30

	# Set injection to ensure vbsTaskDone is slow
	setReplicationSettings "C1" "B1" "C2" "B2" "xdcrDevBackfillMgrVbsTasksDoneNotifierDelay=true"
	# Force backfill to be done
	setReplicationSettings "C1" "B1" "C2" "B2" "xdcrDevBackfillSendDelayMs=0"

	# At this time create s2.col4 which should trigger CollectionsRouter handleExplicitMappingUpdate
	createCollection "C2" "B2" "S2" "col4"

	echo "Sleeping 45 seconds before touching a doc to trigger routing explicit mapping update"
	sleep 45
	writeJSONDocument "C1" "B1" "regDocA${i}" '{"foo":"bar"}' >/dev/null 2>&1

	# Wait 60 seconds before checking for stuck go-routines
	sleep 60
	if (($(getGoroutinesStack "C1" | grep -c "handleExplicitMapChangeBackfillReq") > 0)); then
		echo "Found stuck go-routines in handleExplicitMapChangeBackfillReq"
		exit 1
	fi

	grepForPanics
	validateXDCRCheckpoints "C1"
	validateXDCRCheckpoints "C2"

	echo "============================================================================"
	echo "PASSED"
	echo "============================================================================"
	exportProvisionedConfig
	cleanupBucketReplications
	cleanupBuckets
	cleanupRemoteClusterRefs

	# remove trap as no longer needed
	trap - EXIT
}
