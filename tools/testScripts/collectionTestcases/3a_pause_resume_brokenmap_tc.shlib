# Copyright 2019-Present Couchbase, Inc.
#
# Use of this software is governed by the Business Source License included in
# the file licenses/BSL-Couchbase.txt.  As of the Change Date specified in that
# file, in accordance with the Business Source License, use of this software
# will be governed by the Apache License, Version 2.0, included in the file
# licenses/APL2.txt.

# =============================
# topological map information
# =============================
# cluster -> Bucket(s)
# -----------------
CLUSTER_NAME_PORT_MAP=(["C1"]=9000 ["C2"]=9001)
CLUSTER_NAME_XDCR_PORT_MAP=(["C1"]=13000 ["C2"]=13001)
# Set c1 to have 2 buckets and c2 to have 1 bucket
declare -a cluster1BucketsArr
cluster1BucketsArr=("B0" "B1")
CLUSTER_NAME_BUCKET_MAP=(["C1"]=${cluster1BucketsArr[@]} ["C2"]="B2")

# Bucket properties
declare -A BucketProperty=(["ramQuotaMB"]=100)
declare -A Bucket1Properties=(["ramQuotaMB"]=100 ["CompressionMode"]="Active")
insertPropertyIntoBucketNamePropertyMap "B0" BucketProperty
insertPropertyIntoBucketNamePropertyMap "B1" Bucket1Properties
insertPropertyIntoBucketNamePropertyMap "B2" BucketProperty

# We want the manual pipeline pause to be the actual op that creates the checkpoint
declare -A DefaultBucketReplProperties=(["replicationType"]="continuous" ["checkpointInterval"]=6000 ["statsInterval"]=500)

# Bucket -> Scopes
# -----------------
declare -a scope1Arr=("S1" "S2")
BUCKET_NAME_SCOPE_MAP=(["B1"]=${scope1Arr[@]} ["B2"]="S3")

# Scopes -> Collections
# ----------------------
declare -a collection1Arr=("col1" "col2")
declare -a collection2Arr=("col1" "col2" "col3")
SCOPE_NAME_COLLECTION_MAP=(["S1"]=${collection1Arr[@]} ["S2"]=${collection2Arr[@]} ["S3"]=${collection2Arr[@]})

function runDataLoad {
	# Run CBWorkloadgen in parallel
	runCbWorkloadGenCollection "C1" "B1" "S1" "col1"
	waitForBgJobs
}

function cleanupTestCaseInternalSettings {
	resetCustomManifestRefreshInterval "C1"
}

declare LOGMSG=$BROKEN_MSG

function runTestCase {
	echo "============================================================================"
	echo "Running pause and resume test case with broken mappings"
	echo "============================================================================"
	setupTopologies
	if (($? != 0)); then
		exit $?
	fi

	# Before doing provisioning, get old internal settings
	setCustomManifestRefreshInterval "C1"

	# At this point, settings need to be restored IF the script was forced exited
	trap cleanupTestCaseInternalSettings EXIT

	# Get current instance
	local -i currentInstanceCnt
	currentInstanceCnt=$(getClusterLogs "C1" | grep -c "$LOGMSG")

	createRemoteClusterReference "C1" "C2"
	createRemoteClusterReference "C2" "C1"
	sleep 1
	createBucketReplication "C1" "B1" "C2" "B2" DefaultBucketReplProperties
	createBucketReplication "C2" "B2" "C1" "B1" DefaultBucketReplProperties
	printGlobalScopeAndCollectionInfo
	runDataLoad

	echo "Waiting 5 seconds before checking item count"
	sleep 5
	checkItemCnt "C1" "B1" $CBWORKLOAD_COLLECTION_NUM_ITEMS
	checkItemCnt "C2" "B2" 0

	echo "Sleeping another 20 seconds for router to declare the mapping as broken..."
	sleep 20
	# At this time, retry should have failed and marked the mappings as broken
	checkUnidirectionalChangesLeft
	oldDataReplicated=$(getDataReplicated "C1" "B1" "C2" "B2")
	oldDocsProcessed=$(getDocsProcessed "C1" "B1" "C2" "B2")
	if (($oldDataReplicated > 0)); then
		echo "Error - Broken mapping should not have been replicated. DataReplicated: $oldDataReplicated"
		exit 1
	fi

	# Ensure broken mapping has been declared
	validateLogWithInstance "C1" "$LOGMSG" $(($currentInstanceCnt + 1))

	echo "Pausing replication - current data replicated: $oldDataReplicated docs_processed: $oldDocsProcessed"
	pauseReplication "C1" "B1" "C2" "B2"
	echo "Waiting 15 seconds for pipeline to really pause"
	sleep 15
	grepForPanics
	validateXDCRCheckpoints "C1"
	validateXDCRCheckpoints "C2"

	resumeReplication "C1" "B1" "C2" "B2"
	echo "Waiting 15 seconds for resume to finish"
	sleep 15
	grepForPanics

	checkDocsProcessed "C1" "B1" "C2" "B2" "$oldDocsProcessed"
	checkDataReplicatedIsZero "C1" "B1" "C2" "B2" "$oldDataReplicated"

	# Run data load again
	oldDataReplicated=$(getDataReplicated "C1" "B1" "C2" "B2")
	runDataLoad
	echo "Waiting 10 seconds before checking item count"
	sleep 10
	# The mapping should have remained broken and changes would have immediately not been replicated
	# Changes left should go to 0
	checkUnidirectionalChangesLeft
	if (($(getDocsProcessed "C1" "B1" "C2" "B2") == $oldDocsProcessed)); then
		echo "Data processed should not be the same after run"
		exit 1
	fi
	if (($(getDataReplicated "C1" "B1" "C2" "B2") != $oldDataReplicated)); then
		# Because broken mapping should have persisted
		echo "Data replicated should be the same after run"
		exit 1
	fi
	grepForPanics

	# There should be only one instance of broken mapping - as resume should have restored the mapping
	validateLogWithInstance "C1" "$LOGMSG" $(($currentInstanceCnt + 1))

	echo "============================================================================"
	echo "PASSED"
	echo "============================================================================"
	cleanupBucketReplications
	cleanupBuckets
	cleanupRemoteClusterRefs

	cleanupTestCaseInternalSettings
	# remove trap as no longer needed
	trap - EXIT
}
