# Copyright 2019-Present Couchbase, Inc.
#
# Use of this software is governed by the Business Source License included in
# the file licenses/BSL-Couchbase.txt.  As of the Change Date specified in that
# file, in accordance with the Business Source License, use of this software
# will be governed by the Apache License, Version 2.0, included in the file
# licenses/APL2.txt.

# =============================
# topological map information
# =============================
# cluster -> Bucket(s)
# -----------------
CLUSTER_NAME_PORT_MAP=(["C1"]=9000 ["C2"]=9001)
CLUSTER_NAME_XDCR_PORT_MAP=(["C1"]=13000 ["C2"]=13001)
# Set c1 to have 2 buckets and c2 to have 1 bucket
declare -a cluster1BucketsArr
cluster1BucketsArr=("B0" "B1")
CLUSTER_NAME_BUCKET_MAP=(["C1"]=${cluster1BucketsArr[@]} ["C2"]="B2")

# Bucket properties
declare -A BucketProperty=(["ramQuotaMB"]=100)
declare -A Bucket1Properties=(["ramQuotaMB"]=100 ["CompressionMode"]="Active")
insertPropertyIntoBucketNamePropertyMap "B0" BucketProperty
insertPropertyIntoBucketNamePropertyMap "B1" Bucket1Properties
insertPropertyIntoBucketNamePropertyMap "B2" BucketProperty

#pcre_filter='REGEXP_CONTAINS(click, "q(?!uit)")'
#declare -A DefaultBucketReplProperties=(["filterExpression"]="$pcre_filter" ["replicationType"]="continuous" ["checkpointInterval"]=60 ["statsInterval"]=500)
declare -A DefaultBucketReplProperties=(["replicationType"]="continuous" ["checkpointInterval"]=600 ["statsInterval"]=500)

# Bucket -> Scopes
# -----------------
declare -a scope1Arr=("S1" "S2")
BUCKET_NAME_SCOPE_MAP=(["B1"]=${scope1Arr[@]} ["B2"]=${scope1Arr[@]})

# Scopes -> Collections
# ----------------------
declare -a collection1Arr=("col1" "col2")
declare -a collection2Arr=("col1" "col2" "col3")
SCOPE_NAME_COLLECTION_MAP=(["S1"]=${collection1Arr[@]} ["S2"]=${collection2Arr[@]} ["S3"]=${collection2Arr[@]})

function runDataLoadContinuous {
	while ((1)); do
		runCbWorkloadGenCollectionCont "C1" "B1" "S1" "col1" >/dev/null 2>&1
	done
}

declare -i ORIG_TARGET_MAN_PULL_INTERVAL

declare -a BG_WORKLOAD_PID
function cleanupTestCaseInternalSettings {
	resetCustomManifestRefreshInterval "C1"
	if [[ ! -z "$BG_WORKLOAD_PID" ]]; then
		kill $BG_WORKLOAD_PID 2>/dev/null
	fi
	unset BG_WORKLOAD_PID
}

function checkChangesLeftBackup {
	local ongoingThreshold=60000
	changesLeft=$(getChangesLeft "C1" "B1" "C2" "B2")
	if (($changesLeft > $ongoingThreshold)); then
		echo "Changes left is $changesLeft above threshold $ongoingThreshold"
		dumpDebugInfoBeforeExit
		echo "Killing workload"
		kill $BG_WORKLOAD_PID
		echo "Sleeping 30 seconds before exiting"
		sleep 30
		exit 1
	fi
}

function deleteAndRecreateBackfillMultiples {
	local total=$1
	local i

	for ((i = 0; $i < $total; i = $(($i + 1)))); do
		echo "Sleeping 10 seconds before running another pass"
		sleep 10
		echo "Running multiple delete and recreate target collection $(($i + 1)) out of $total"

		# Get current instance
		local -i currentBrokenInstanceCnt
		local -i currentRepairedInstanceCnt
		local -i currentBackfillInstanceCnt
		local -i currentVBTasksDoneInstanceCnt

		local currentClusterLog
		currentClusterLog=$(getClusterLogs "C1")
		currentBrokenInstanceCnt=$(echo "$currentClusterLog" | grep -c "$BROKEN_MSG")
		currentRepairedInstanceCnt=$(echo "$currentClusterLog" | grep -c "$REPAIR_MSG")

		local currentXdcrLog
		currentXdcrLog=$(getInternalNodeXdcrLog "C1")
		currentBackfillInstanceCnt=$(echo "$currentXdcrLog" | grep -c "$BACKFILL_MSG")
		currentVBTasksDoneInstanceCnt=$(echo "$currentXdcrLog" | grep -c "$VBTASKS_DONE_MSG")

		echo "Waiting 5 seconds before checking item count first pass"
		sleep 5
		checkItemCnt "C1" "B1" $CBWORKLOAD_COLLECTION_NUM_ITEMS
		checkItemCnt "C2" "B2" $CBWORKLOAD_COLLECTION_NUM_ITEMS
		checkChangesLeftBackup

		echo "BEFORE DELETING COLLECTION: $(date)"
		printGlobalScopeAndCollectionInfo | grep "col1"
		echo "DELETING COLLECTION: $(date)"
		deleteCollection "C2" "B2" "S1" "col1"
		printGlobalScopeAndCollectionInfo | grep "col1"
		# Bucket 2 should have 0 items since col1 just got deleted
		checkItemCnt "C2" "B2" 0
		checkChangesLeftBackup

		echo "Waiting 15 seconds to check broken repair message"
		sleep 15
		validateLogWithInstance "C1" "$REPAIR_MSG" $(($currentRepairedInstanceCnt))

		echo "RECREATING COLLECTION $(date)"
		createCollection "C2" "B2" "S1" "col1"
		# Bucket 2 should have 0 items since col1 just got recreated
		checkItemCnt "C2" "B2" 0
		printGlobalScopeAndCollectionInfo | grep "col1"

		echo "Waiting for 60 seconds until discovery and automatic backfill"
		sleep 60
		# Due to collections router being able to catch xmem race conditions, there may be multiple backfill requests
		validateInternalLogWithInstance "C1" "$BACKFILL_MSG" $(($currentBackfillInstanceCnt + 1)) $(($currentBackfillInstanceCnt + 2))
		checkItemCnt "C2" "B2" $CBWORKLOAD_COLLECTION_NUM_ITEMS
		validateInternalLogWithInstance "C1" "$VBTASKS_DONE_MSG" $(($currentBackfillInstanceCnt + 1)) $(($currentVBTasksDoneInstanceCnt + 2))

		validateInternalLogWithInstance "C1" "$BAD_MAGIC_MSG" "0"

		echo "Giving XDCR 15 seconds for UI to show repair messages"
		sleep 15
		# Main pipeline should show repaired message
		validateLogWithInstance "C1" "$REPAIR_MSG" $(($currentRepairedInstanceCnt + 1)) $(($currentRepairedInstanceCnt + 2))
		grepForPanics
	done
}

function runTestCase {
	echo "============================================================================"
	echo "Running continuous and repeated backfill test"
	echo "============================================================================"
	testForClusterRun
	if (($? != 0)); then
		exit $?
	fi

	# First setup mis-matching mapping meaning all the data reside in C1
	setupTopologies
	if (($? != 0)); then
		exit $?
	fi
	# Before doing provisioning, get old internal settings
	setCustomManifestRefreshInterval "C1"

	# At this point, settings need to be restored IF the script was forced exited
	trap cleanupTestCaseInternalSettings EXIT

	# Wait for vbuckets and all the other things to propagate before XDCR provisioning
	sleep 5
	createRemoteClusterReference "C1" "C2"
	createRemoteClusterReference "C2" "C1"
	sleep 1
	createBucketReplication "C1" "B1" "C2" "B2" DefaultBucketReplProperties
	createBucketReplication "C2" "B2" "C1" "B1" DefaultBucketReplProperties
	printGlobalScopeAndCollectionInfo

	echo "Sleep 20 seconds before starting I/O for manifest to be pulled"
	sleep 20
	runDataLoadContinuous &
	BG_WORKLOAD_PID=$!
	echo "GOT RUNNING PID $BG_WORKLOAD_PID"

	deleteAndRecreateBackfillMultiples 3

	validateXDCRCheckpoints "C1"
	validateXDCRCheckpoints "C2"

	echo "============================================================================"
	echo "PASSED"
	echo "============================================================================"
	cleanupBucketReplications
	cleanupBuckets
	cleanupRemoteClusterRefs

	cleanupTestCaseInternalSettings
	# remove trap as no longer needed
	trap - EXIT
}
