# Copyright 2025-Present Couchbase, Inc.
#
# Use of this software is governed by the Business Source License included in
# the file licenses/BSL-Couchbase.txt.  As of the Change Date specified in that
# file, in accordance with the Business Source License, use of this software
# will be governed by the Apache License, Version 2.0, included in the file
# licenses/APL2.txt.

# =============================
# topological map information
# =============================
# cluster -> Bucket(s)
# -----------------
CLUSTER_NAME_PORT_MAP=(["C1"]=9000 ["C2"]=9001)
CLUSTER_NAME_XDCR_PORT_MAP=(["C1"]=13000 ["C2"]=13001)
# Set c1 to have 2 buckets and c2 to have 1 bucket
declare -a cluster1BucketsArr
cluster1BucketsArr=("B0" "B1")
CLUSTER_NAME_BUCKET_MAP=(["C1"]=${cluster1BucketsArr[@]} ["C2"]="B2")

# Bucket properties
declare -A BucketProperty=(["ramQuotaMB"]=100)
declare -A Bucket1Properties=(["ramQuotaMB"]=100 ["CompressionMode"]="Active")
insertPropertyIntoBucketNamePropertyMap "B0" BucketProperty
insertPropertyIntoBucketNamePropertyMap "B1" Bucket1Properties
insertPropertyIntoBucketNamePropertyMap "B2" BucketProperty

declare -A DefaultBucketReplProperties=(["replicationType"]="continuous" ["checkpointInterval"]=600 ["statsInterval"]=500)
declare -A BackfillHangLooseDelayProperties=(["replicationType"]="continuous" ["checkpointInterval"]=600 ["statsInterval"]=500 ["replicateCkptIntervalMin"]=1 ["xdcrDevBackfillSendDelayMs"]=10000 ["preReplicateVBMasterCheck"]="false")

# Bucket -> Scopes
# -----------------
declare -a scope1Arr=("S1" "S2")
BUCKET_NAME_SCOPE_MAP=(["B1"]=${scope1Arr[@]} ["B2"]="S3")

# Scopes -> Collections
# ----------------------
declare -a collection1Arr=("col1" "col2")
declare -a collection2Arr=("col1" "col2")
SCOPE_NAME_COLLECTION_MAP=(["S1"]=${collection1Arr[@]} ["S2"]=${collection2Arr[@]} ["S3"]=${collection2Arr[@]})

function runDataLoad {
	# Run CBWorkloadgen in parallel
	runCbWorkloadGenCollection "C1" "B1" "S1" "col1" &
	runCbWorkloadGenCollection "C1" "B1" "S1" "col2" &
	waitForBgJobs
}

declare -i ORIG_TARGET_MAN_PULL_INTERVAL

function cleanupTestCaseInternalSettings {
	resetCustomManifestRefreshInterval "C1"
}

ERR_WHEN_PERSISTING_ERR_MSG="experienced error when persisting (type 1) - Invalid input given"
TRY_TO_FIX_PIPELINE_MSG="Try to fix Pipeline"
UNRECOVERABLE_BACKFILLS="Starting to handle unrecoverable backfills for"

function runTestCase {
	echo "============================================================================"
	echo "Running live rediscover test case with basic XDCR kill"
	echo "============================================================================"
	testForClusterRun
	if (($? != 0)); then
		exit $?
	fi

	# First setup mis-matching mapping meaning all the data reside in C1
	setupTopologies
	if (($? != 0)); then
		exit $?
	fi
	# Before doing provisioning, get old internal settings
	setCustomManifestRefreshInterval "C1"

	# Set delaysecs for this test
	setInternalSettings "C1" "BackfillReplSvcSetBackfillRaiserDelaySec=20"

	# At this point, settings need to be restored IF the script was forced exited
	trap cleanupTestCaseInternalSettings EXIT

	# Get current instance
	local -i currentBrokenInstanceCnt
	local -i currentRepairedInstanceCnt
	local -i currentBackfillInstanceCnt
	local -i currentVBTasksDoneInstanceCnt
	local -i currentBackfillAppendInstanceCnt
	local -i currentBackfillOsoDocCnt

	local currentClusterLog
	currentClusterLog=$(getClusterLogs "C1")
	currentBrokenInstanceCnt=$(echo "$currentClusterLog" | grep -c "$BROKEN_MSG")
	currentRepairedInstanceCnt=$(echo "$currentClusterLog" | grep -c "$REPAIR_MSG")

	local currentXdcrLog
	currentXdcrLog=$(getInternalNodeXdcrLog "C1")
	currentBackfillInstanceCnt=$(echo "$currentXdcrLog" | grep -c "$BACKFILL_MSG")
	currentBackfillAppendInstanceCnt=$(echo "$currentXdcrLog" | grep -c "$BACKFILL_APPEND_MSG")
	currentVBTasksDoneInstanceCnt=$(echo "$currentXdcrLog" | grep -c "$VBTASKS_DONE_MSG")
	currentBackfillOsoDocCnt=$(echo "$currentXdcrLog" | grep -c "$OSO_BACKFILL_COUNT")
	grepForPanics

	echo "sleep 30s for process to restart"
	sleep 30
	createRemoteClusterReference "C1" "C2"
	createRemoteClusterReference "C2" "C1"
	sleep 1
	createBucketReplication "C1" "B1" "C2" "B2" BackfillHangLooseDelayProperties
	createBucketReplication "C2" "B2" "C1" "B1" DefaultBucketReplProperties
	printGlobalScopeAndCollectionInfo
	runDataLoad

	echo "Waiting 5 seconds before checking item count first pass"
	sleep 5
	checkItemCnt "C1" "B1" $(($CBWORKLOAD_COLLECTION_NUM_ITEMS * 2))
	checkItemCnt "C2" "B2" 0

	# Then re-setup the implicit matching that matches
	createScope "C2" "B2" "S1"
	createCollection "C2" "B2" "S1" "col1"
	printGlobalScopeAndCollectionInfo
	echo "Sleeping 30 seconds for discovery and automatic backfill"
	sleep 30

	# After sleeping, the backfill manager should have triggered the backfill
	validateLastBackfillContainsVBTask "C1" "C2" 0
	grepForPanics

	# at this time, kill goxdcr
	killGoXdcr "C1"

	# sleep 10 sec for XDCR to restart
	sleep 10

	echo "There should be one broken mapping with SHA 9d702dc4bcdd1886f84d4c37242f9a0e8ba241f4be09d36f63f16188eb5b9074"
	grepForLastMappingDocUpdateInMetaKvLogs "C1" '\\"Sha256Digest\\":\\"9d702dc4bcdd1886f84d4c37242f9a0e8ba241f4be09d36f63f16188eb5b9074\\"'

	# Workaround for MB-63879
	createCollection "C1" "B1" "S1" "colA"
	createCollection "C1" "B1" "S1" "colB"
	# sleep 15 sec for source manifest to refresh
	sleep 15

	# now create the second missing target collection
	createCollection "C2" "B2" "S1" "col2"
	echo "Sleeping for backfill to be raised"
	sleep 30

	echo "There should be two broken mappings with SHAs 9d702dc4bcdd1886f84d4c37242f9a0e8ba241f4be09d36f63f16188eb5b9074 and f6540dc1323757ae791247289d319f847ccf28bca7d2ef0387fe917991e95692"
	grepForLastMappingDocUpdateInMetaKvLogs "C1" '\\"Sha256Digest\\":\\"9d702dc4bcdd1886f84d4c37242f9a0e8ba241f4be09d36f63f16188eb5b9074\\"'
	grepForLastMappingDocUpdateInMetaKvLogs "C1" '\\"Sha256Digest\\":\\"f6540dc1323757ae791247289d319f847ccf28bca7d2ef0387fe917991e95692\\"'

	grepForPanics

	# at this time, kill goxdcr
	killGoXdcr "C1"

	echo "Sleeping for 10s for some initialisations to finish"
	sleep 10

	echo "There should still be two broken mappings with SHAs 9d702dc4bcdd1886f84d4c37242f9a0e8ba241f4be09d36f63f16188eb5b9074 and f6540dc1323757ae791247289d319f847ccf28bca7d2ef0387fe917991e95692"
	grepForLastMappingDocUpdateInMetaKvLogs "C1" '\\"Sha256Digest\\":\\"9d702dc4bcdd1886f84d4c37242f9a0e8ba241f4be09d36f63f16188eb5b9074\\"'
	grepForLastMappingDocUpdateInMetaKvLogs "C1" '\\"Sha256Digest\\":\\"f6540dc1323757ae791247289d319f847ccf28bca7d2ef0387fe917991e95692\\"'

	# Workaround for MB-63879
	createCollection "C1" "B1" "S1" "colC"
	createCollection "C1" "B1" "S1" "colD"
	# sleep 15 sec for source manifest to refresh
	sleep 15

	# speeden-up backfill before checking for changes_left and doc count
	setReplicationSettings "C1" "B1" "C2" "B2" "xdcrDevBackfillSendDelayMs=0"
	sleep 2

	echo "Waiting 30 seconds before checking item count first pass"
	sleep 30

	checkBidirectionalChangesLeft

	grepForPanics

	checkItemCnt "C1" "B1" $(($CBWORKLOAD_COLLECTION_NUM_ITEMS * 2))
	checkItemCnt "C2" "B2" $(($CBWORKLOAD_COLLECTION_NUM_ITEMS * 2))

	validateInternalLogWithInstance "C1" "$UNRECOVERABLE_BACKFILLS" 0
	validateInternalLogWithInstance "C1" "$ERR_WHEN_PERSISTING_ERR_MSG" 0
	validateInternalLogWithInstance "C1" "$TRY_TO_FIX_PIPELINE_MSG" 0

	echo "============================================================================"
	echo "PASSED"
	echo "============================================================================"

	cleanupBucketReplications
	cleanupBuckets
	cleanupRemoteClusterRefs

	cleanupTestCaseInternalSettings
	# remove trap as no longer needed
	trap - EXIT
}
