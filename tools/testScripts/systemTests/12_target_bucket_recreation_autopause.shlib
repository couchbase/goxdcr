# Copyright 2025-Present Couchbase, Inc.
#
# Use of this software is governed by the Business Source License included in
# the file licenses/BSL-Couchbase.txt.  As of the Change Date specified in that
# file, in accordance with the Business Source License, use of this software
# will be governed by the Apache License, Version 2.0, included in the file
# licenses/APL2.txt.

# =============================
# topological map information
# =============================
# cluster -> Bucket(s)
# -----------------
CLUSTER_NAME_PORT_MAP=(["C1"]=9000 ["C2"]=9001)
CLUSTER_NAME_XDCR_PORT_MAP=(["C1"]=13000 ["C2"]=13001)
# Set c1 to have 2 buckets and c2 to have 1 bucket
declare -a cluster1BucketsArr
cluster1BucketsArr=("B0" "B1")
CLUSTER_NAME_BUCKET_MAP=(["C1"]=${cluster1BucketsArr[@]} ["C2"]="B2")

# Bucket properties
declare -A BucketProperty=(["bucketType"]="ephemeral" ["ramQuotaMB"]=100)
declare -A Bucket1Properties=(["bucketType"]="ephemeral" ["ramQuotaMB"]=100 ["CompressionMode"]="Active")
insertPropertyIntoBucketNamePropertyMap "B0" BucketProperty
insertPropertyIntoBucketNamePropertyMap "B1" Bucket1Properties
insertPropertyIntoBucketNamePropertyMap "B2" BucketProperty

declare -A DefaultBucketReplProperties=(["replicationType"]="continuous" ["checkpointInterval"]=60 ["statsInterval"]=500)

# Bucket -> Scopes
# -----------------
declare -a scope1Arr=("S1" "S2")
BUCKET_NAME_SCOPE_MAP=(["B1"]=${scope1Arr[@]} ["B2"]="S1")

# Scopes -> Collections
# ----------------------
declare -a collection1Arr=("col1" "col2")
declare -a collection2Arr=("col1" "col2" "col3")
SCOPE_NAME_COLLECTION_MAP=(["S1"]=${collection1Arr[@]} ["S2"]=${collection2Arr[@]} ["S3"]=${collection2Arr[@]})

function runDataLoad {
	# Run CBWorkloadgen in parallel
	runCbWorkloadGenCollection "C1" "B1" "S1" "col1"
	waitForBgJobs
}

function runTestCase {
	echo "============================================================================"
	echo "Checking for replication auto-pause in response to Target bucket re-creation"
	echo "============================================================================"

	# These tests require a clean log
	for clusterName in $(echo ${!CLUSTER_NAME_PORT_MAP[@]}); do
		clearInternalNodeXdcrLog "$clusterName"
	done

	setupTopologies
	if (($? != 0)); then
		exit $?
	fi

	# Wait for vbuckets and all the other things to propagate before XDCR provisioning
	sleep 5
	createRemoteClusterReference "C1" "C2"
	sleep 1
	createBucketReplication "C1" "B1" "C2" "B2" DefaultBucketReplProperties
	printGlobalScopeAndCollectionInfo
	runDataLoad

	echo "Enable skipReplSpecAutoGc in replication setting..."
	setReplicationSettings "C1" "B1" "C2" "B2" 'skipReplSpecAutoGc=true'
	if (($? != 0)); then
		echo "Unable to set skipReplSpecAutoGc"
		return 1
	fi

	echo "Waiting 10 seconds before deleting Target bucket"
	sleep 10
	deleteBucket "C2" "B2"

	autopauseLog="The replication has been paused instead of being deleted because 'skipReplSpecAutoGc' is true"
	echo "Waiting 100 seconds before checking Source cluster logs..."
	sleep 100
	validateInternalLogWithInstance "C1" "$autopauseLog" 1

	echo "Resuming replication to check that it pauses again"
	resumeReplication "C1" "B1" "C2" "B2"
	echo "Waiting 100 seconds before checking Source cluster logs..."
	sleep 100
	validateInternalLogWithInstance "C1" "$autopauseLog" 2

	echo "Recreating target bucket"
	createBucket "C2" "B2"

	echo "Resuming replication to check that it pauses again"
	resumeReplication "C1" "B1" "C2" "B2"
	echo "Waiting 100 seconds before checking Source cluster logs..."
	sleep 100
	validateInternalLogWithInstance "C1" "$autopauseLog" 3

	echo "============================================================================"
	echo "PASSED"
	echo "============================================================================"

	cleanupBucketReplications
	cleanupBuckets
	cleanupRemoteClusterRefs
}
