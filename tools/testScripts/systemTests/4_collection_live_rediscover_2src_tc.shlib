# Copyright 2019-Present Couchbase, Inc.
#
# Use of this software is governed by the Business Source License included in
# the file licenses/BSL-Couchbase.txt.  As of the Change Date specified in that
# file, in accordance with the Business Source License, use of this software
# will be governed by the Apache License, Version 2.0, included in the file
# licenses/APL2.txt.

# =============================
# topological map information
# =============================
# cluster -> Bucket(s)
# -----------------
CLUSTER_NAME_PORT_MAP=(["C1"]=9000 ["C1P"]=9001 ["C2"]=9002 ["C2P"]=9003)
# For uni directional, just have one node rebalancing in
CLUSTER_DEPENDENCY_MAP=(["C1P"]="C1")
CLUSTER_NAME_XDCR_PORT_MAP=(["C1"]=13000 ["C1P"]=13001 ["C2"]=13002 ["C2P"]=9003)
# Set c1 to have 2 buckets and c2 to have 1 bucket
declare -a cluster1BucketsArr
cluster1BucketsArr=("B0" "B1")
CLUSTER_NAME_BUCKET_MAP=(["C1"]=${cluster1BucketsArr[@]} ["C2"]="B2")

# Bucket properties
declare -A BucketProperty=(["ramQuotaMB"]=100)
declare -A Bucket1Properties=(["ramQuotaMB"]=100 ["CompressionMode"]="Active")
insertPropertyIntoBucketNamePropertyMap "B0" BucketProperty
insertPropertyIntoBucketNamePropertyMap "B1" Bucket1Properties
insertPropertyIntoBucketNamePropertyMap "B2" BucketProperty

declare -A DefaultBucketReplProperties=(["replicationType"]="continuous" ["checkpointInterval"]=60 ["statsInterval"]=500)

# Bucket -> Scopes
# -----------------
declare -a scope1Arr=("S1" "S2")
BUCKET_NAME_SCOPE_MAP=(["B1"]=${scope1Arr[@]} ["B2"]="S3")

# Scopes -> Collections
# ----------------------
declare -a collection1Arr=("col1" "col2")
declare -a collection2Arr=("col1" "col2" "col3")
SCOPE_NAME_COLLECTION_MAP=(["S1"]=${collection1Arr[@]} ["S2"]=${collection2Arr[@]} ["S3"]=${collection2Arr[@]})

function runDataLoad {
	# Run CBWorkloadgen in parallel
	runCbWorkloadGenCollection "C1" "B1" "S1" "col1" &
	runCbWorkloadGenCollection "C1" "B1" "S1" "col2" &
	waitForBgJobs
}

declare -i ORIG_TARGET_MAN_PULL_INTERVAL

function dismissLevel0 {
	local eventId
	getBrokenMapEntryId "C1"
	eventId=$?
	if (($eventId == $GET_BROKEN_MAP_NOT_FOUND)); then
		exit 1
	fi
	setReplicationSettings "C1" "B1" "C2" "B2" "dismissEvent=$eventId"
}

function dismissLevel1 {
	local eventId
	getBrokenMapEntryId "C1" "S1"
	eventId=$?
	if (($eventId == $GET_BROKEN_MAP_NOT_FOUND)); then
		exit 1
	fi
	setReplicationSettings "C1" "B1" "C2" "B2" "dismissEvent=$eventId"
}

function dismissLevel2 {
	local eventId
	getBrokenMapEntryId "C1" "S1" "col1"
	eventId=$?
	if (($eventId == $GET_BROKEN_MAP_NOT_FOUND)); then
		exit 1
	fi
	setReplicationSettings "C1" "B1" "C2" "B2" "dismissEvent=$eventId"
	getBrokenMapEntryId "C1" "S1" "col2"
	eventId=$?
	if (($eventId == $GET_BROKEN_MAP_NOT_FOUND)); then
		exit 1
	fi
	setReplicationSettings "C1" "B1" "C2" "B2" "dismissEvent=$eventId"
}

function dismissLevel3 {
	local eventId
	getBrokenMapEntryId "C1" "S1" "col1" "S1" "col1"
	eventId=$?
	if (($eventId == $GET_BROKEN_MAP_NOT_FOUND)); then
		exit 1
	fi
	setReplicationSettings "C1" "B1" "C2" "B2" "dismissEvent=$eventId"
	getBrokenMapEntryId "C1" "S1" "col2" "S1" "col2"
	eventId=$?
	if (($eventId == $GET_BROKEN_MAP_NOT_FOUND)); then
		exit 1
	fi
	setReplicationSettings "C1" "B1" "C2" "B2" "dismissEvent=$eventId"
}

function pickARandomLevelToDismissBrokenMap {
	randomCase=$(echo $(($RANDOM % 4)))
	echo "Randomly picking to dismiss broken map with level $randomCase..."
	case $randomCase in
	0)
		dismissLevel0
		;;
	1)
		dismissLevel1
		;;
	2)
		dismissLevel2
		;;
	3)
		dismissLevel3
		;;
	esac
}

function cleanupTestCaseInternalSettings {
	resetCustomManifestRefreshInterval "C1"
}

function runTestCase {
	echo "============================================================================"
	echo "Running live rediscover test case"
	echo "============================================================================"
	testForClusterRun
	if (($? != 0)); then
		exit $?
	fi

	# First setup mis-matching mapping meaning all the data reside in C1
	setupTopologies
	if (($? != 0)); then
		exit $?
	fi
	# Before doing provisioning, get old internal settings
	setCustomManifestRefreshInterval "C1"

	local checkInterval=10
	local maxChangeCnt=3
	local maxStableCnt=3
	local coolDownPeriod=1
	setInternalSettings "C1" "TopologyChangeCheckInterval=$checkInterval" "MaxTopologyChangeCountBeforeRestart=$maxChangeCnt" "MaxTopologyStableCountBeforeRestart=$maxStableCnt" "TopologySvcCooldownPeriodSec=$coolDownPeriod"
	sleep 5
	checkInternalSetting "C1" "TopologyChangeCheckInterval" "$checkInterval"
	checkInternalSetting "C1" "MaxTopologyChangeCountBeforeRestart" "$maxChangeCnt"
	checkInternalSetting "C1" "MaxTopologyStableCountBeforeRestart" "$maxStableCnt"
	checkInternalSetting "C1" "TopologySvcCooldownPeriodSec" "$coolDownPeriod"

	# At this point, settings need to be restored IF the script was forced exited
	trap cleanupTestCaseInternalSettings EXIT

	# Get current instance
	local -i currentBrokenInstanceCnt
	local -i currentRepairedInstanceCnt
	local -i currentBackfillInstanceCnt
	local -i currentVBTasksDoneInstanceCnt
	local -i currentBackfillAppendInstanceCnt
	local -i currentBackfillOsoDocCnt

	local currentClusterLog
	currentClusterLog=$(getClusterLogs "C1")
	currentBrokenInstanceCnt=$(echo "$currentClusterLog" | grep -c "$BROKEN_MSG")
	currentRepairedInstanceCnt=$(echo "$currentClusterLog" | grep -c "$REPAIR_MSG")

	local currentXdcrLog
	currentXdcrLog=$(getInternalNodeXdcrLog "C1")
	currentBackfillInstanceCnt=$(echo "$currentXdcrLog" | grep -c "$BACKFILL_MSG")
	currentBackfillAppendInstanceCnt=$(echo "$currentXdcrLog" | grep -c "$BACKFILL_APPEND_MSG")
	currentVBTasksDoneInstanceCnt=$(echo "$currentXdcrLog" | grep -c "$VBTASKS_DONE_MSG")
	currentBackfillOsoDocCnt=$(echo "$currentXdcrLog" | grep -c "$OSO_BACKFILL_COUNT")

	# Wait for vbuckets and all the other things to propagate before XDCR provisioning
	sleep 5
	createRemoteClusterReference "C1" "C2"
	createRemoteClusterReference "C2" "C1"
	sleep 1
	createBucketReplication "C1" "B1" "C2" "B2" DefaultBucketReplProperties
	createBucketReplication "C2" "B2" "C1" "B1" DefaultBucketReplProperties
	printGlobalScopeAndCollectionInfo

	addNodesIn
	sleep 5
	startRebalancing "C1"
	echo "Rebalancing node in is completed"

	runDataLoad
	echo "Waiting 5 seconds before checking item count first pass"
	sleep 5
	checkItemCnt "C1" "B1" $(($CBWORKLOAD_COLLECTION_NUM_ITEMS * 2))
	checkItemCnt "C2" "B2" 0

	# Then re-setup the implicit matching that matches
	createScope "C2" "B2" "S1"
	createCollection "C2" "B2" "S1" "col1"
	createCollection "C2" "B2" "S1" "col2"

	echo "Sleeping 60 seconds for discovery and automatic backfill"
	sleep 60

	printGlobalScopeAndCollectionInfo

	# After sleeping, the backfill manager should have triggered the backfill
	checkItemCnt "C1" "B1" $(($CBWORKLOAD_COLLECTION_NUM_ITEMS * 2))
	checkItemCnt "C2" "B2" $(($CBWORKLOAD_COLLECTION_NUM_ITEMS * 2))

	grepForPanics
	validateXDCRCheckpoints "C1"
	validateXDCRCheckpoints "C2"

	echo "============================================================================"
	echo "PASSED"
	echo "============================================================================"

	cleanupBucketReplications
	cleanupBuckets
	cleanupRemoteClusterRefs

	cleanupTestCaseInternalSettings
	# remove trap as no longer needed
	trap - EXIT
}
