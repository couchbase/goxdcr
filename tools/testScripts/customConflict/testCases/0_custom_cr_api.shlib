# Copyright 2019-Present Couchbase, Inc.
#
# Use of this software is governed by the Business Source License included in
# the file licenses/BSL-Couchbase.txt.  As of the Change Date specified in that
# file, in accordance with the Business Source License, use of this software
# will be governed by the Apache License, Version 2.0, included in the file
# licenses/APL2.txt.

function ccrReplicationSettings {
	local pruningWindow
	local setting="hlvPruningWindowSec"
	local value=10
	echo "Get replication setting for $setting"
	setReplicationSettings "C1" "CCR1" "C2" "CCR2" "$setting=$value"
	pruningWindow=$(getReplicationSettings "C1" "CCR1" "C2" "CCR2" | jq .$setting)
	if [[ $pruningWindow != $value ]]; then
		echo "Setting $setting is $pruningWindow. Expected value is $value."
		exit 1
	else
		echo "Pruning window is $pruningWindow"
	fi
	# 100000000 exceeds max value allowed so it will fail
	setReplicationSettings "C1" "CCR1" "C2" "CCR2" "$setting=100000000"
	pruningWindow=$(getReplicationSettings "C1" "CCR1" "C2" "CCR2" | jq .$setting)
	if [[ $pruningWindow != $value ]]; then
		echo "Setting $setting is $pruningWindow. Expected value is $value."
		exit 1
	else
		echo "Pruning window is still $pruningWindow as expected"
	fi
}

function eventingFunctionUIHandlerTest {
	echo "====== Test eventing function UIHandler ======"

	funcName="simpleMerge"
	echo
	echo "Create library xdcr function $funcName at XDCR admin port"
	curl -s -request POST \
		http://localhost:13000/evaluator/v1/libraries/$funcName \
		-u $DEFAULT_ADMIN:$DEFAULT_PW \
		-H 'content-type: application/json' \
		-d @customConflict/simpleMerge.js
	if (($? != 0)); then
		echo "Failed to create function $funcName"
		exit 1
	fi
	echo
	echo "Get library xdcr function $funcName at XDCR admin port"
	curl -s -request GET http://127.0.0.1:13000/evaluator/v1/libraries/$funcName \
		-u $DEFAULT_ADMIN:$DEFAULT_PW
	if (($? != 0)); then
		echo "Failed to GET function"
		exit 1
	fi
	echo
	echo "=== Get all libraries xdcr function $funcName at XDCR admin port ==="
	curl -s -request GET http://127.0.0.1:13000/evaluator/v1/libraries/ \
		-u $DEFAULT_ADMIN:$DEFAULT_PW
	if (($? != 0)); then
		echo "Failed to GET function"
		exit 1
	fi
	echo
	echo "=== Delete library $funcName at XDCR admin port ==="
	curl -s -request DELETE http://localhost:13000/evaluator/v1/libraries/$funcName \
		-u $DEFAULT_ADMIN:$DEFAULT_PW
	if (($? != 0)); then
		echo "Failed to DELETE function $funcName"
		exit 1
	fi
}

function configureResolver {
	echo "====== Configure Resolver ======"
	DefaultEvaluatorWorkers=4
	SetEvaluatorWorkers=3
	setting=$(getSpecificInternalSettings "C1" "JsNumWorkers")
	if (($setting != $DefaultEvaluatorWorkers)); then
		echo "JsNumWorkers is $setting, expected $DefaultEvaluatorWorkers"
		exit 1
	else
		echo "JsNumWorkers is $setting"
	fi
	setInternalSettings "C1" "JsNumWorkers"=$SetEvaluatorWorkers
	echo "Setting JsNumWorkers to $SetEvaluatorWorkers. Sleep 10 seconds for XDCR to reboot"
	sleep 10
	setting=$(getSpecificInternalSettings "C1" "JsNumWorkers")
	if (($setting != $SetEvaluatorWorkers)); then
		echo "JsNumWorkers is $setting, expected $SetEvaluatorWorkers"
		exit 1
	else
		echo "JsNumWorkers is set to $setting"
	fi
	# Set back to default
	setInternalSettings "C1" "JsNumWorkers"=$DefaultEvaluatorWorkers
	echo "Setting JsNumWorkers to $DefaultEvaluatorWorkers. Sleep 10 seconds for XDCR to reboot"
	sleep 10
	setting=$(getSpecificInternalSettings "C1" "JsNumWorkers")
	if (($setting != $DefaultEvaluatorWorkers)); then
		echo "JsNumWorkers is $setting, expected $DefaultEvaluatorWorkers"
		exit 1
	else
		echo "JsNumWorkers is set to $setting"
	fi

	DefaultWorkerQuota=1572864 #1.5*1024*1024
	SetWorkerQuota=1536        #1.5*1024
	setting=$(getSpecificInternalSettings "C1" "JsWorkerMemQuotaBytes")
	if (($setting != $DefaultWorkerQuota)); then
		echo "JsWorkerMemQuotaBytes is $setting, expected $DefaultWorkerQuota"
		exit 1
	else
		echo "JsWorkerMemQuotaBytes is $setting"
	fi
	setInternalSettings "C1" "JsWorkerMemQuotaBytes"=$SetWorkerQuota
	echo "Setting JsWorkerMemQuotaBytes to $SetWorkerQuota. Sleep 10 seconds for XDCR to reboot"
	sleep 10
	setting=$(getSpecificInternalSettings "C1" "JsWorkerMemQuotaBytes")
	if (($setting != $SetWorkerQuota)); then
		echo "JsWorkerMemQuotaBytes is $setting, expected $SetWorkerQuota"
		exit 1
	else
		echo "JsWorkerMemQuotaBytes is set to $setting"
	fi
	# Set back to default
	setInternalSettings "C1" "JsWorkerMemQuotaBytes"=$DefaultWorkerQuota
	echo "Setting JsWorkerMemQuotaBytes to $DefaultWorkerQuota. Sleep 10 seconds for XDCR to reboot"
	sleep 10
	setting=$(getSpecificInternalSettings "C1" "JsWorkerMemQuotaBytes")
	if (($setting != $DefaultWorkerQuota)); then
		echo "JsWorkerMemQuotaBytes is $setting, expected $DefaultWorkerQuota"
		exit 1
	else
		echo "JsWorkerMemQuotaBytes is set to $setting"
	fi
	echo "====== Configure Resolver PASSED ======"
}

function remoteClusterUserPermission {
	echo "====== remoteClusterUserPermission ======"
	result=0
	echo "Create target user with only replication_target role"
	curl -X PUT -u $DEFAULT_ADMIN:$DEFAULT_PW http://localhost:9001/settings/rbac/users/local/tmpuser -d password=wewewe -d roles=replication_target[*]
	echo "change remote cluster ref to use tmpuser"
	curl -X POST -u $DEFAULT_ADMIN:$DEFAULT_PW http://localhost:9000/pools/default/remoteClusters/C2 -d name=C2 -d hostname=127.0.0.1:9001 -d username=tmpuser -d password=wewewe
	echo "Add document at C1"
	runCbWorkloadGenBucket "C1" "CCR1" 10 "eaccess_test"

	restID=$(getBucketReplicationRestID "C1" "CCR1" "C2" "CCR2")
	echo "Wait 10 seconds for replication to stop because of EACCESS"
	sleep 10
	echo "Get replication status"
	curl -X GET -u $DEFAULT_ADMIN:$DEFAULT_PW http://localhost:9000/settings/replications/$restID | jq | grep '"pauseRequested": true'
	if (($? != 0)); then
		echo "Replication should be paused because of EACCESS error, but it is not."
		result=1
	fi
	echo "Add data reader to tmpuser"
	curl -X PUT -u $DEFAULT_ADMIN:$DEFAULT_PW http://localhost:9001/settings/rbac/users/local/tmpuser -d password=wewewe -d 'roles=data_reader[*],replication_target[*]'
	echo "Resume replication"
	curl -X POST -u $DEFAULT_ADMIN:$DEFAULT_PW http://localhost:9000/settings/replications/$restID -d pauseRequested=false
	# echo "Wait for changes_left to go down to 0"
	# This fails here: checkChangesLeftInternal "C1" "CCR1" "C2" "CCR2"
	echo "Wait 10 seconds and get replication status"
	sleep 10
	curl -X GET -u $DEFAULT_ADMIN:$DEFAULT_PW http://localhost:9000/settings/replications/$restID | jq | grep '"pauseRequested": false'
	if (($? != 0)); then
		echo "Replication should be running, but it is not."
		result=1
	fi
	echo "Change remote cluster ref to admin user"
	curl -X POST -u $DEFAULT_ADMIN:$DEFAULT_PW http://localhost:9000/pools/default/remoteClusters/C2 -d name=C2 -d hostname=127.0.0.1:9001 -d username=$DEFAULT_ADMIN -d password=$DEFAULT_PW
	# Delete tmpuser
	curl -X DELETE -u $DEFAULT_ADMIN:$DEFAULT_PW http://localhost:9001/settings/rbac/users/local/tmpuser
	if (($result != 0)); then
		exit 1
	fi
	echo "====== remoteClusterUserPermission PASSED ======"
}

function mergeFunctionTimeoutTest {
	echo "====== Test JS Function timeout setting ======"

	for cluster1 in "${!CLUSTER_NAME_PORT_MAP[@]}"; do
		bucket1=${CLUSTER_NAME_BUCKET_MAP[$cluster1]}
		for cluster2 in "${!CLUSTER_NAME_PORT_MAP[@]}"; do
			bucket2=${CLUSTER_NAME_BUCKET_MAP[$cluster2]}
			if [[ "$cluster1" != "$cluster2" ]]; then
				setReplicationSettings $cluster1 $bucket1 $cluster2 $bucket2 "jsFunctionTimeoutMs=1000"
			fi
		done
	done

	funcName="loopForever"
	echo "Change all replication to use $funcName"
	changeMergeFunctionsForAllReplications $funcName
	if (($? != 0)); then
		echo "failed to change merge functions to $funcName"
		exit $?
	fi
	expected='"default": "loopForever"'
	getMergeFuncMap=$(getReplicationSettings "C1" "CCR1" "C2" "CCR2" | jq .mergeFunctionMapping)
	if [[ $getMergeFuncMap != *'"default": "loopForever"'* ]]; then
		echo "Merge Function map is $getMergeFuncMap, expected $expected."
		exit 1
	fi

	for cluster1 in ${!CLUSTER_NAME_PORT_MAP[@]}; do
		bucket1=${CLUSTER_NAME_BUCKET_MAP[$cluster1]}
		# These are the data that will generate conflicts
		echo runCbWorkloadGenBucket $cluster1 $bucket1 10 "common"
		runCbWorkloadGenBucket $cluster1 $bucket1 10 "common" &
	done
	echo "sleep 75s"
	sleep 75
	# The merge times out and will be sent to conflict bucket. Changes left should go to 0
	for cluster1 in ${!CLUSTER_NAME_BUCKET_MAP[@]}; do
		bucket1=${CLUSTER_NAME_BUCKET_MAP[$cluster1]}
		for cluster2 in ${!CLUSTER_NAME_BUCKET_MAP[@]}; do
			if [[ $cluster1 != $cluster2 ]]; then
				bucket2=${CLUSTER_NAME_BUCKET_MAP[$cluster2]}
				echo "checkChangesLeftInternal $cluster1 $bucket1 $cluster2 $bucket2"
				checkChangesLeftInternal "$cluster1" "$bucket1" "$cluster2" "$bucket2"
			fi
		done
	done

	# Set the merge function/jsFunctionTimeoutMs back
	echo "Change all replication to use $funcName"
	for cluster1 in "${!CLUSTER_NAME_PORT_MAP[@]}"; do
		bucket1=${CLUSTER_NAME_BUCKET_MAP[$cluster1]}
		for cluster2 in "${!CLUSTER_NAME_PORT_MAP[@]}"; do
			bucket2=${CLUSTER_NAME_BUCKET_MAP[$cluster2]}
			if [[ "$cluster1" != "$cluster2" ]]; then
				setReplicationSettings $cluster1 $bucket1 $cluster2 $bucket2 "jsFunctionTimeoutMs=20000"
			fi
		done
	done
	changeMergeFunctionsForAllReplications "simpleMerge"
	if (($? != 0)); then
		echo "failed to change merge functions to simpleMerge"
		exit $?
	fi
}
function runTestCase {
	echo "=================================="
	echo "Running REST API tests"
	echo "=================================="

	mergeFunctionTimeoutTest
	ccrReplicationSettings
	eventingFunctionUIHandlerTest
	configureResolver
	remoteClusterUserPermission

	echo "=================================="
	echo "Finished REST API tests"
	echo "=================================="
}
