# Copyright 2019-Present Couchbase, Inc.
#
# Use of this software is governed by the Business Source License included in
# the file licenses/BSL-Couchbase.txt.  As of the Change Date specified in that
# file, in accordance with the Business Source License, use of this software
# will be governed by the Apache License, Version 2.0, included in the file
# licenses/APL2.txt.

function ccrReplicationSettings {
	local pruningWindow
	local setting="hlvPruningWindowSec"
	local value=10
	echo "Get replication setting for $setting"
	setReplicationSettings "C1" "CCR1" "C2" "CCR2" "$setting=$value"
	pruningWindow=$(getReplicationSettings "C1" "CCR1" "C2" "CCR2" | jq .$setting)
	if [[ $pruningWindow != $value ]]; then
		echo "Setting $setting is $pruningWindow. Expected value is $value."
		exit 1
	else
		echo "Pruning window is $pruningWindow"
	fi
	# 100000000 exceeds max value allowed so it will fail
	setReplicationSettings "C1" "CCR1" "C2" "CCR2" "$setting=100000000"
	pruningWindow=$(getReplicationSettings "C1" "CCR1" "C2" "CCR2" | jq .$setting)
	if [[ $pruningWindow != $value ]]; then
		echo "Setting $setting is $pruningWindow. Expected value is $value."
		exit 1
	else
		echo "Pruning window is still $pruningWindow as expected"
	fi
}

function eventingFunctionUIHandlerTest {
	echo "====== Test eventing function UIHandler ======"

	funcName="simpleMerge"
	echo
	echo "=== Create library xdcr function $funcName at XDCR admin port ==="
	curl -s -request POST \
		http://localhost:13000/evaluator/v1/libraries/$funcName \
		-u $DEFAULT_ADMIN:$DEFAULT_PW \
		-H 'content-type: application/json' \
		-d @customConflict/simpleMerge.js
	if (($? != 0)); then
		echo "Failed to create function $funcName"
		exit 1
	fi
    echo
	echo "=== Get library xdcr function $funcName at XDCR admin port ==="
	curl -s -request GET http://127.0.0.1:13000/evaluator/v1/libraries/$funcName \
		-u $DEFAULT_ADMIN:$DEFAULT_PW
	if (($? != 0)); then
		echo "Failed to GET function"
		exit 1
	fi
    echo
    echo "=== Get all libraries xdcr function $funcName at XDCR admin port ==="
    curl -s -request GET http://127.0.0.1:13000/evaluator/v1/libraries/ \
        -u $DEFAULT_ADMIN:$DEFAULT_PW
    if (($? != 0)); then
        echo "Failed to GET function"
        exit 1
    fi
    echo
	echo "=== Delete library $funcName at XDCR admin port ==="
	curl -s -request DELETE http://localhost:13000/evaluator/v1/libraries/$funcName \
		-u $DEFAULT_ADMIN:$DEFAULT_PW
	if (($? != 0)); then
		echo "Failed to DELETE function $funcName"
		exit 1
	fi
}

function configureResolver {
	echo "====== Configure Resolver ======"
	EvaluatorThreads=4
	setInternalSettings "C1" "JSEngineThreads"=$EvaluatorThreads
	echo "Setting JSEngineThreads. Sleep 10 seconds for XDCR to reboot"
	sleep 10
	setting=$(getSpecificInternalSettings "C1" "JSEngineThreads")
	if (($setting != $EvaluatorThreads)); then
		echo "JSEngineThreads is $setting, expected $EvaluatorThreads"
	else
		echo "JSEngineThreads is set to $setting"
	fi
	echo "====== Configure Resolver Finished ======"
}

function remoteClusterUserPermission {
	echo "========================================="
	echo "====== remoteClusterUserPermission ======"
	echo "========================================="
	result=0
	echo "Create target user with only replication_target role"
	curl -X PUT -u $DEFAULT_ADMIN:$DEFAULT_PW http://localhost:9001/settings/rbac/users/local/tmpuser -d password=wewewe -d roles=replication_target[*]
	echo "change remote cluster ref to use tmpuser"
	curl -X POST -u $DEFAULT_ADMIN:$DEFAULT_PW http://localhost:9000/pools/default/remoteClusters/C2 -d name=C2 -d hostname=127.0.0.1:9001 -d username=tmpuser -d password=wewewe
	echo "Add document at C1"
	runCbWorkloadGenBucket "C1" "CCR1" 10 "eaccess_test"

	restID=$(getBucketReplicationRestID "C1" "CCR1" "C2" "CCR2")
	echo "Wait 10 seconds for replication to stop because of EACCESS"
	sleep 10
	echo "Get replication status"
	curl -X GET -u $DEFAULT_ADMIN:$DEFAULT_PW http://localhost:9000/settings/replications/$restID | jq | grep '"pauseRequested": true'
	if (($? != 0)); then
		echo "Replication should be paused because of EACCESS error, but it is not."
		result=1
	fi
	echo "Add data reader to tmpuser"
	curl -X PUT -u $DEFAULT_ADMIN:$DEFAULT_PW http://localhost:9001/settings/rbac/users/local/tmpuser -d password=wewewe -d 'roles=data_reader[*],replication_target[*]'
	echo "Resume replication"
	curl -X POST -u $DEFAULT_ADMIN:$DEFAULT_PW http://localhost:9000/settings/replications/$restID -d pauseRequested=false
	# echo "Wait for changes_left to go down to 0"
	# This fails here: checkChangesLeftInternal "C1" "CCR1" "C2" "CCR2"
	echo "Wait 10 seconds and get replication status"
	sleep 10
	curl -X GET -u $DEFAULT_ADMIN:$DEFAULT_PW http://localhost:9000/settings/replications/$restID | jq | grep '"pauseRequested": false'
	if (($? != 0)); then
		echo "Replication should be running, but it is not."
		result=1
	fi
	echo "Change remote cluster ref to admin user"
	curl -X POST -u $DEFAULT_ADMIN:$DEFAULT_PW http://localhost:9000/pools/default/remoteClusters/C2 -d name=C2 -d hostname=127.0.0.1:9001 -d username=$DEFAULT_ADMIN -d password=$DEFAULT_PW
	# Delete tmpuser
	curl -X DELETE -u $DEFAULT_ADMIN:$DEFAULT_PW http://localhost:9001/settings/rbac/users/local/tmpuser
	if (($result != 0)); then
		echo
		echo "================================================"
		echo "====== remoteClusterUserPermission FAILED ======"
		echo "================================================"
		return $result
	fi
	echo
	echo "================================================"
	echo "====== remoteClusterUserPermission PASSED ======"
	echo "================================================"
}

function runTestCase {
	echo "=================================="
	echo "Running REST API tests"
	echo "=================================="

	ccrReplicationSettings
	eventingFunctionUIHandlerTest
	configureResolver
	remoteClusterUserPermission

	echo "=================================="
	echo "Finished REST API tests"
	echo "=================================="
}
