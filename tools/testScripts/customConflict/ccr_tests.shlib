#!/usr/bin/env bash
set -u

# Copyright 2020-Present Couchbase, Inc.
#
# Use of this software is governed by the Business Source License included in
# the file licenses/BSL-Couchbase.txt.  As of the Change Date specified in that
# file, in accordance with the Business Source License, use of this software
# will be governed by the Apache License, Version 2.0, included in the file
# licenses/APL2.txt.

function createMergeFunction {
	local funcName=$1
	local port=$2
	curl -i -POST \
		http://localhost:$port/evaluator/v1/libraries/$funcName \
		-u $DEFAULT_ADMIN:$DEFAULT_PW \
		-H 'content-type: application/json' \
		-d @customConflict/$funcName.js

	if (($? != 0)); then
		echo "Failed to create function $funcName"
		exit 1
	fi
}

function setUpCcrReplication {
	setupTopologies -d
	if (($? != 0)); then
		echo "setupTopologies failed"
		exit 1
	fi

	sleep 5
	mergeFunc="simpleMerge"
	declare -A CCRReplProperties=(["replicationType"]="continuous" ["checkpointInterval"]=60 ["statsInterval"]=500 ["compressionType"]="Auto" ["mergeFunctionMapping"]='{"default":"simpleMerge"}')

	for cluster1 in "${!CLUSTER_NAME_PORT_MAP[@]}"; do
		bucket1=${CLUSTER_NAME_BUCKET_MAP[$cluster1]}
		for cluster2 in "${!CLUSTER_NAME_PORT_MAP[@]}"; do
			bucket2=${CLUSTER_NAME_BUCKET_MAP[$cluster2]}
			if [[ "$cluster1" != "$cluster2" ]]; then
				createRemoteClusterReference $cluster1 $cluster2
			fi
		done
	done

	for port in "${CLUSTER_NAME_XDCR_PORT_MAP[@]}"; do
		echo "createMergeFunction $mergeFunc $port"
		createMergeFunction $mergeFunc $port
		if (($? != 0)); then
			echo "createMergeFunction $mergeFunc $port failed"
			exit 1
		fi
	done

	for cluster1 in "${!CLUSTER_NAME_PORT_MAP[@]}"; do
		bucket1=${CLUSTER_NAME_BUCKET_MAP[$cluster1]}
		for cluster2 in "${!CLUSTER_NAME_PORT_MAP[@]}"; do
			bucket2=${CLUSTER_NAME_BUCKET_MAP[$cluster2]}
			if [[ "$cluster1" != "$cluster2" ]]; then
				createBucketReplication $cluster1 $bucket1 $cluster2 $bucket2 CCRReplProperties
				if (($? != 0)); then
					echo "Failed: createBucketReplication $cluster1 $bucket1 $cluster2 $bucket2 CCRReplProperties"
					exit 1
				fi
			fi
		done
	done
}

function cleanupCcrReplication {
	cleanupBucketReplications
	cleanupBuckets
	cleanupRemoteClusterRefs
}
