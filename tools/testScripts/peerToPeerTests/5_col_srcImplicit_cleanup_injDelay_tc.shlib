# Copyright 2019-Present Couchbase, Inc.
#
# Use of this software is governed by the Business Source License included in
# the file licenses/BSL-Couchbase.txt.  As of the Change Date specified in that
# file, in accordance with the Business Source License, use of this software
# will be governed by the Apache License, Version 2.0, included in the file
# licenses/APL2.txt.

# =============================
# topological map information
# =============================
# cluster -> Bucket(s)
# -----------------
CLUSTER_NAME_PORT_MAP=(["C1"]=9000 ["C1P"]=9001 ["C2"]=9002)
CLUSTER_DEPENDENCY_MAP=(["C1P"]="C1")
CLUSTER_NAME_XDCR_PORT_MAP=(["C1"]=13000 ["C1P"]=1300 ["C2"]=13002)
# Set c1 to have 2 buckets and c2 to have 1 bucket
declare -a cluster1BucketsArr
cluster1BucketsArr=("B0" "B1")
CLUSTER_NAME_BUCKET_MAP=(["C1"]=${cluster1BucketsArr[@]} ["C2"]="B2")

# Bucket properties
declare -A BucketProperty=(["ramQuotaMB"]=1024 ["numVBuckets"]=1024)
declare -A Bucket1Properties=(["ramQuotaMB"]=1024 ["CompressionMode"]="Active" ["numVBuckets"]=1024)
insertPropertyIntoBucketNamePropertyMap "B0" BucketProperty
insertPropertyIntoBucketNamePropertyMap "B1" Bucket1Properties
insertPropertyIntoBucketNamePropertyMap "B2" BucketProperty

#pcre_filter='REGEXP_CONTAINS(click, "q(?!uit)")'
declare -A SlowBackfillBucketReplProperties=(["replicationType"]="continuous" ["checkpointInterval"]=60 ["statsInterval"]=500 ["xdcrDevBackfillSendDelayMs"]=1000 ["replicateCkptIntervalMin"]=20)

# Bucket -> Scopes
# -----------------
declare -a scope1Arr=("S1" "S2")
BUCKET_NAME_SCOPE_MAP=(["B1"]=${scope1Arr[@]} ["B2"]="S3")

# Scopes -> Collections
# ----------------------
declare -a collection1Arr=("col1" "col2")
declare -a collection2Arr=("col1" "col2" "col3")
SCOPE_NAME_COLLECTION_MAP=(["S1"]=${collection1Arr[@]} ["S2"]=${collection2Arr[@]} ["S3"]=${collection2Arr[@]})

function runDataLoad {
	# Run CBWorkloadgen in parallel
	runCbWorkloadGenCollection "C1" "B1" "S1" "col1" &
	runCbWorkloadGenCollection "C1" "B1" "S1" "col2" &
	waitForBgJobs
}

declare -i ORIG_TARGET_MAN_PULL_INTERVAL

function cleanupTestCaseInternalSettings {
	resetCustomManifestRefreshInterval "C1"
}

function runTestCase {
	echo "============================================================================"
	echo "Running multi-node implicit mapping source col delete with failover during backfill test case"
	echo "============================================================================"
	testForClusterRun
	if (($? != 0)); then
		exit $?
	fi

	local checkInterval=10
	local maxChangeCnt=3
	local maxStableCnt=3
	local coolDownPeriod=1

	setupCluster
	echo "Sleeping 10 secs before rebalancing node in"
	sleep 10

	# Previous test may have messed with the CAs
	setupCertsForTesting
	cleanupClientCertMaps

	addNodesIn
	startRebalancing "C1"
	echo "Rebalancing node in is completed"

	# First setup mis-matching mapping meaning all the data reside in C1
	setupTopologies
	if (($? != 0)); then
		exit $?
	fi
	# Before doing provisioning, get old internal settings
	setCustomManifestRefreshInterval "C1"
	sleep 5
	setInternalSettings "C1" "TopologyChangeCheckInterval=$checkInterval" "MaxTopologyChangeCountBeforeRestart=$maxChangeCnt" "MaxTopologyStableCountBeforeRestart=$maxStableCnt" "TopologySvcCooldownPeriodSec=$coolDownPeriod"
	sleep 5
	checkInternalSetting "C1" "TopologyChangeCheckInterval" "$checkInterval"
	checkInternalSetting "C1" "MaxTopologyChangeCountBeforeRestart" "$maxChangeCnt"
	checkInternalSetting "C1" "MaxTopologyStableCountBeforeRestart" "$maxStableCnt"
	checkInternalSetting "C1" "TopologySvcCooldownPeriodSec" "$coolDownPeriod"

	# At this point, settings need to be restored IF the script was forced exited
	trap cleanupTestCaseInternalSettings EXIT

	# Get current instance
	local -i currentBrokenInstanceCnt
	local -i currentRepairedInstanceCnt
	local -i currentBackfillInstanceCnt
	local -i currentVBTasksDoneInstanceCnt
	local -i currentBackfillAppendInstanceCnt
	local -i currentBackfillOsoDocCnt

	local currentClusterLog
	currentClusterLog=$(getClusterLogs "C1")
	currentBrokenInstanceCnt=$(echo "$currentClusterLog" | grep -c "$BROKEN_MSG")
	currentRepairedInstanceCnt=$(echo "$currentClusterLog" | grep -c "$REPAIR_MSG")

	local currentXdcrLog
	currentXdcrLog=$(getInternalNodeXdcrLog "C1")
	currentBackfillInstanceCnt=$(echo "$currentXdcrLog" | grep -c "$BACKFILL_MSG")
	currentBackfillAppendInstanceCnt=$(echo "$currentXdcrLog" | grep -c "$BACKFILL_APPEND_MSG")
	currentVBTasksDoneInstanceCnt=$(echo "$currentXdcrLog" | grep -c "$VBTASKS_DONE_MSG")
	currentBackfillOsoDocCnt=$(echo "$currentXdcrLog" | grep -c "$OSO_BACKFILL_COUNT")

	# Wait for vbuckets and all the other things to propagate before XDCR provisioning
	sleep 5
	createRemoteClusterReference "C1" "C2"
	createRemoteClusterReference "C2" "C1"
	sleep 1
	createBucketReplication "C1" "B1" "C2" "B2" SlowBackfillBucketReplProperties
	createBucketReplication "C2" "B2" "C1" "B1" SlowBackfillBucketReplProperties
	printGlobalScopeAndCollectionInfo
	runDataLoad

	echo "Waiting 5 seconds before checking item count first pass"
	sleep 5
	checkItemCnt "C1" "B1" $(($CBWORKLOAD_COLLECTION_NUM_ITEMS * 2))
	checkItemCnt "C2" "B2" 0

	# Then re-setup the implicit matching that matches
	BUCKET_NAME_SCOPE_MAP=(["B1"]=${scope1Arr[@]} ["B2"]="S1")
	setupTopologies
	echo "Waiting for backfill to start..."
	sleep 30

	# By this point backfill should exist
	checkNoErrorInErrorList "C1"

	local delaySec=600
	echo "Force a node C1P to be respond to manifest changes after $delaySec seconds"
	local c1pPort=${CLUSTER_NAME_PORT_MAP["C1P"]}
	# Set the push interval to 1 min as well as now is the time to receive the push, not before
	setReplicationSettings "C1" "B1" "C2" "B2" "xdcrDevNsServerPort=$c1pPort" "xdcrDevColManifestSvcDelaySec=$delaySec" "replicateCkptIntervalMin=1"

	# ensure manifest has been pulled
	local manifestMsg="Updated source manifest from old version"
	c1Log=$(getInternalNodeXdcrLog "C1")
	local c1MsgCntOrig=$(echo "$c1Log" | grep -c "$manifestMsg")

	# Delete the source collection to force backfill to be cleaned up
	deleteCollection "C1" "B1" "S1" "col1"
	deleteCollection "C1" "B1" "S1" "col2"

	echo "After deleting collection waiting for C1 to pull a manifest"
	local c1MsgCnt=$c1MsgCntOrig
	while (($c1MsgCnt <= $c1MsgCntOrig)); do
		c1Log=$(getInternalNodeXdcrLog "C1")
		c1MsgCnt=$(echo "$c1Log" | grep -c "$manifestMsg")
		sleep 20
	done

	echo "Finished deleting source collections and now waiting for C1 to receive a push from C1P..."
	local c1CntOrig=0
	local c1Cnt
	local c1Log
	c1Log=$(getInternalNodeXdcrLog "C1")
	c1CntOrig=$(echo "$c1Log" | grep -c "$P2P_BACKFILL_PUSH_RECEIVED_MSG")
	c1Cnt=$c1CntOrig
	while (($c1Cnt <= $c1CntOrig)); do
		c1Log=$(getInternalNodeXdcrLog "C1")
		c1Cnt=$(echo "$c1Log" | grep -c "$P2P_BACKFILL_PUSH_RECEIVED_MSG")
		sleep 20
	done
	echo "C1 has received a push from C1P that should have an out-of-date backfill information"

	echo "Failing C1P out of the cluster and so that C1 should have to begin out-of-date backfill tasks"
	failoverNode "C1P" "C1"
	echo "Sleeping 120 seconds before checking for errors"
	sleep 120
	checkNoErrorInErrorList "C1"
	validateInternalLogWithInstance "C1" "$UNABLE_TO_GET_HIGH_SEQNO_MSG" 0
	echo "============================================================================"
	echo "PASSED"
	echo "============================================================================"

	cleanupBucketReplications
	cleanupBuckets
	cleanupRemoteClusterRefs

	cleanupTestCaseInternalSettings
	# remove trap as no longer needed
	trap - EXIT
}
