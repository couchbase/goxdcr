# Copyright 2019-Present Couchbase, Inc.
#
# Use of this software is governed by the Business Source License included in
# the file licenses/BSL-Couchbase.txt.  As of the Change Date specified in that
# file, in accordance with the Business Source License, use of this software
# will be governed by the Apache License, Version 2.0, included in the file
# licenses/APL2.txt.

# =============================
# topological map information
# =============================
# cluster -> Bucket(s)
# -----------------
CLUSTER_NAME_PORT_MAP=(["C1"]=9000 ["C1P"]=9001 ["C2"]=9002 ["C2P"]=9003)
CLUSTER_NAME_SECURE_PORT_MAP=(["C1"]=19000 ["C2"]=19002)
# For uni directional, just have one node rebalancing in
CLUSTER_DEPENDENCY_MAP=(["C1P"]="C1")
CLUSTER_NAME_XDCR_PORT_MAP=(["C1"]=13000 ["C1P"]=13001 ["C2"]=13002 ["C2P"]=13003)
# Set c1 to have 2 buckets and c2 to have 1 bucket
CLUSTER_NAME_BUCKET_MAP=(["C1"]="B0" ["C2"]="B1")
unset CLUSTER_SETUP_DONE_MAP
declare -gA CLUSTER_SETUP_DONE_MAP

# Bucket properties
declare -A BucketProperty=(["ramQuotaMB"]=100)
declare -A Bucket1Properties=(["ramQuotaMB"]=100 ["CompressionMode"]="Active")
insertPropertyIntoBucketNamePropertyMap "B0" BucketProperty
insertPropertyIntoBucketNamePropertyMap "B1" Bucket1Properties

declare -A BackfillHangLooseProperties=(["replicationType"]="continuous" ["checkpointInterval"]=120 ["statsInterval"]=500 ["replicateCkptIntervalMin"]=2 ["xdcrDevBackfillSendDelayMs"]=500 ["preReplicateVBMasterCheck"]="true")

# Bucket -> Scopes
# -----------------
declare -a scope1Arr=("S1" "S2")
BUCKET_NAME_SCOPE_MAP=(["B0"]=${scope1Arr[@]} ["B1"]="S2")

# Scopes -> Collections
# ----------------------
declare -a collection1Arr=("col1" "col2")
declare -a collection2Arr=("col1" "col2" "col3")
SCOPE_NAME_COLLECTION_MAP=(["S1"]=${collection1Arr[@]} ["S2"]=${collection2Arr[@]} ["S3"]=${collection2Arr[@]})

function runDataLoad {
	echo "RUNNING dataload..."
	runCbWorkloadGenCollection "C1" "B0" "S1" "col1" &
	runCbWorkloadGenCollection "C1" "B0" "S2" "col1" &
	waitForBgJobs
	echo "RUNNING dataload DONE"
}

TOPOLOGY_RESTART_MSG="Restarting pipeline due to source topology change"

function runOneReplicationCycle {
	local timeIntervalSecs=5
	local checkInterval=10
	local maxChangeCnt=3
	local maxStableCnt=3
	local coolDownPeriod=1
	local checkInt
	setupTopologies
	# Shorten the amount of time pipeline restarts
	setInternalSettings "C1" "TopologyChangeCheckInterval=$checkInterval" "MaxTopologyChangeCountBeforeRestart=$maxChangeCnt" "MaxTopologyStableCountBeforeRestart=$maxStableCnt" "TopologySvcCooldownPeriodSec=$coolDownPeriod"
	sleep 5
	checkInternalSetting "C1" "TopologyChangeCheckInterval" "$checkInterval"
	checkInternalSetting "C1" "MaxTopologyChangeCountBeforeRestart" "$maxChangeCnt"
	checkInternalSetting "C1" "MaxTopologyStableCountBeforeRestart" "$maxStableCnt"
	checkInternalSetting "C1" "TopologySvcCooldownPeriodSec" "$coolDownPeriod"
	if (($? != 0)); then
		exit $?
	fi

	setCustomManifestRefreshInterval "C1"

	# Wait for vbuckets and all the other things to propagate before XDCR provisioning
	sleep 5
	createSecureRemoteClusterReference "C1" "C2" "${CLUSTER_ROOT_CERTIFICATE_MAP["C2"]}"
	sleep 1
	createBucketReplication "C1" "B0" "C2" "B1" BackfillHangLooseProperties
	printGlobalScopeAndCollectionInfo
	runDataLoad

	echo "Waiting 30 seconds before creating missing collection"
	sleep 30

	createScope "C2" "B1" "S1"
	createCollection "C2" "B1" "S1" "col1"

	checkItemCnt "C1" "B0" $(($CBWORKLOAD_COLLECTION_NUM_ITEMS * 2))

	grepForPanics
}

C1LOOKINGC1PMSG="Discovered peers: map\\[127.0.0.1:9001"
CKPT_FOUND_DOCS="retrieving CheckpointsDocs request found"
CKPT_RETRIEVED="Received peerToPeer checkpoint data from node"

function runOneRebalanceCycle {
	local cycleCnt=$1
	local totalCycleCnt=$2
	local timeIntervalSecs=30

	setupCluster
	echo "Sleeping 10 secs before rebalancing node in"
	sleep 10

	# Previous test may have messed with the CAs
	setupCertsForTesting
	cleanupClientCertMaps

	echo "============================================================================"
	echo "Rebalance Cycle $(($cycleCnt + 1))/$(($totalCycleCnt)) STARTING"
	echo "============================================================================"
	addNodesIn
	startRebalancing "C1"
	echo "Rebalancing node in is completed"

	echo "============================================================================"
	echo "Rebalance Cycle $(($cycleCnt + 1))/$(($totalCycleCnt)) DONE"
	echo "============================================================================"
}

function runTestCase {
	echo "============================================================================"
	echo "Running P2P with brokenmap and failing a node out securely"
	echo "============================================================================"

	# At this point, settings need to be restored IF the script was forced exited
	trap killAllBgJobs EXIT

	runOneRebalanceCycle 1 1
	runOneReplicationCycle

	setNodeToNodeEncryption "C1" "enable"
	setEncryptionLevel "C1" "strict"

	local currentXdcrLog
	local -i currentHandlingInstanceCnt
	local -i currentHandlingInstanceDoneCnt

	currentXdcrLog=$(getInternalNodeXdcrLog "C1")
	currentHandlingInstanceCnt=$(echo "$currentXdcrLog" | grep -c "$RECEIVE_P2P_REQ_MSG")
	currentHandlingInstanceDoneCnt=$(echo "$currentXdcrLog" | grep -c "$RECEIVE_P2P_REQ_DONE_MSG")

	echo "Done - Sleeping 7 minutes to ensure multiple requests have been handled"
	sleep 420

	validateInternalLogWithInstance "C1" "$RECEIVE_P2P_REQ_MSG" $(($currentHandlingInstanceCnt + 2)) $(($currentHandlingInstanceCnt + 7))
	validateInternalLogWithInstance "C1" "$RECEIVE_P2P_REQ_DONE_MSG" $(($currentHandlingInstanceDoneCnt + 1)) $(($currentHandlingInstanceDoneCnt + 6))

	local logsC1
	local resumeFrom0CntOrig
	local resumeFrom0CntNew
	logsC1=$(getInternalNodeXdcrLog "C1")
	resumeFrom0CntOrig=$(echo "$logsC1" | grep -c "$TS_PREFIX=0")
	echo "Turning off encryption..."
	setEncryptionLevel "C1" "control"
	sleep 5
	setNodeToNodeEncryption "C1" "disable"
	sleep 15
	echo "Failing node out and seeing if one node owns all the checkpoints"
	failoverNode "C1P" "C1"
	echo "Sleeping 30 seconds before checking logs for checkpoint resuming messages"
	sleep 30
	logsC1=$(getInternalNodeXdcrLog "C1")
	resumeFrom0CntNew=$(echo "$logsC1" | grep -c "$TS_PREFIX=0")

	# The backfill replication checkpoints were injected to be slow running
	# this means that out of node 1's 512 VBs, not all 512 will have had traffic/checkpoint
	# So as long as the count difference is not 512, it should mean that some ckpts were transferred
	if (($resumeFrom0CntOrig - $resumeFrom0CntNew >= 512)); then
		echo "Before failover, there are $resumeFrom0CntOrig lines of resuming from 0. After failover, there are $resumeFrom0CntNew"
		exit 1
	fi
	grepForPanics

	for clusterName in $(echo ${!CLUSTER_NAME_PORT_MAP[@]}); do
		validateInternalLogWithInstance "$clusterName" "$P2P_DESERIALIZATION_ERR_MSG" 0
		validateInternalLogWithInstance "$clusterName" "$P2P_UNABLE_TO_RESPOND_MSG" 0
	done

	echo "============================================================================"
	echo "PASSED"
	echo "============================================================================"
	cleanupBucketReplications
	cleanupBuckets
	cleanupRemoteClusterRefs

	# no need to failover since it is already failed over
}
