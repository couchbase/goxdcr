# Copyright 2019-Present Couchbase, Inc.
#
# Use of this software is governed by the Business Source License included in
# the file licenses/BSL-Couchbase.txt.  As of the Change Date specified in that
# file, in accordance with the Business Source License, use of this software
# will be governed by the Apache License, Version 2.0, included in the file
# licenses/APL2.txt.

# =============================
# topological map information
# =============================
# cluster -> Bucket(s)
# -----------------
CLUSTER_NAME_PORT_MAP=(["C1"]=9000 ["C1P"]=9001 ["C2"]=9002 ["C2P"]=9003)
# For uni directional, just have one node rebalancing in
CLUSTER_DEPENDENCY_MAP=(["C1P"]="C1")
CLUSTER_NAME_XDCR_PORT_MAP=(["C1"]=13000 ["C1P"]=13001 ["C2"]=13002 ["C2P"]=13003)
# Set c1 to have 2 buckets and c2 to have 1 bucket
CLUSTER_NAME_BUCKET_MAP=(["C1"]="B0" ["C2"]="B1")
CLUSTER_SETUP_DONE_MAP=()
declare -gA CLUSTER_SETUP_DONE_MAP

# Bucket properties
declare -A BucketProperty=(["ramQuotaMB"]=100)
declare -A Bucket1Properties=(["ramQuotaMB"]=1024 ["CompressionMode"]="Active" ["numVBuckets"]=1024)
insertPropertyIntoBucketNamePropertyMap "B0" BucketProperty
insertPropertyIntoBucketNamePropertyMap "B1" Bucket1Properties

declare -A BackfillHangLooseProperties=(["replicationType"]="continuous" ["checkpointInterval"]=120 ["statsInterval"]=500 ["replicateCkptIntervalMin"]=1 ["xdcrDevBackfillSendDelayMs"]=500 ["preReplicateVBMasterCheck"]="false")

# Bucket -> Scopes
# -----------------
declare -a scope1Arr=("S1" "S2")
BUCKET_NAME_SCOPE_MAP=(["B0"]=${scope1Arr[@]} ["B1"]="S2")

# Scopes -> Collections
# ----------------------
declare -a collection1Arr=("col1" "col2")
declare -a collection2Arr=("col1" "col2" "col3")
SCOPE_NAME_COLLECTION_MAP=(["S1"]=${collection1Arr[@]} ["S2"]=${collection2Arr[@]} ["S3"]=${collection2Arr[@]})

function runDataLoad {
	echo "RUNNING dataload..."
	runCbWorkloadGenCollection "C1" "B0" "S1" "col1" &
	runCbWorkloadGenCollection "C1" "B0" "S2" "col1" &
	waitForBgJobs
	echo "RUNNING dataload DONE"
}

TOPOLOGY_RESTART_MSG="Restarting pipeline due to source topology change"

function runOneReplicationCycle {
	local timeIntervalSecs=5
	local checkInterval=10
	local maxChangeCnt=3
	local maxStableCnt=3
	local coolDownPeriod=1
	local checkInt
	setupTopologies
	# Shorten the amount of time pipeline restarts
	setInternalSettings "C1" "TopologyChangeCheckInterval=$checkInterval" "MaxTopologyChangeCountBeforeRestart=$maxChangeCnt" "MaxTopologyStableCountBeforeRestart=$maxStableCnt" "TopologySvcCooldownPeriodSec=$coolDownPeriod"
	sleep 5
	checkInternalSetting "C1" "TopologyChangeCheckInterval" "$checkInterval"
	checkInternalSetting "C1" "MaxTopologyChangeCountBeforeRestart" "$maxChangeCnt"
	checkInternalSetting "C1" "MaxTopologyStableCountBeforeRestart" "$maxStableCnt"
	checkInternalSetting "C1" "TopologySvcCooldownPeriodSec" "$coolDownPeriod"
	if (($? != 0)); then
		exit $?
	fi

	setCustomManifestRefreshInterval "C1"

	# Previous test may have messed with the CAs
	setupCertsForTesting
	cleanupClientCertMaps

	# Wait for vbuckets and all the other things to propagate before XDCR provisioning
	sleep 5
	createRemoteClusterReference "C1" "C2"
	sleep 1
	createBucketReplication "C1" "B0" "C2" "B1" BackfillHangLooseProperties
	printGlobalScopeAndCollectionInfo
	runDataLoad

	echo "Waiting 30 seconds before creating missing collection"
	sleep 30

	createScope "C2" "B1" "S1"
	createCollection "C2" "B1" "S1" "col1"

	checkItemCnt "C1" "B0" $(($CBWORKLOAD_COLLECTION_NUM_ITEMS * 2))

	grepForPanics
}

C1LOOKINGC1PMSG="Discovered peers: map\\[127.0.0.1:9001"
CKPT_FOUND_DOCS="retrieving CheckpointsDocs request found"
CKPT_RETRIEVED="Received peerToPeer checkpoint data from node"

function runOneRebalanceCycle {
	setupCluster
	echo "Sleeping 10 secs before rebalancing node in"
	sleep 10

	setInternalSettings "C1" "VariableVBSupport=true"
	setInternalSettings "C2" "VariableVBSupport=true"

	# Previous test may have messed with the CAs
	setupCertsForTesting
	cleanupClientCertMaps

	addNodesIn
	startRebalancing "C1"
	echo "Rebalancing node in is completed"
}

function runTestCase {
	echo "============================================================================"
	echo "Running P2P with brokenmap and failing a node out (128VB edition)"
	echo "============================================================================"

	# At this point, settings need to be restored IF the script was forced exited
	trap killAllBgJobs EXIT

	clearInternalNodeXdcrLog "C1"
	clearInternalNodeXdcrLog "C1P"

	runOneRebalanceCycle
	runOneReplicationCycle

	local currentXdcrLog
	local -i currentHandlingInstanceCnt
	local -i currentHandlingInstanceDoneCnt
	local -i currentBackfillStartCntC1
	local -i currentBackfillStartCntC1P

	currentXdcrLog=$(getInternalNodeXdcrLog "C1")
	currentHandlingInstanceCnt=$(echo "$currentXdcrLog" | grep -c "$RECEIVE_P2P_REQ_MSG")
	currentHandlingInstanceDoneCnt=$(echo "$currentXdcrLog" | grep -c "$RECEIVE_P2P_REQ_DONE_MSG")
	currentBackfillStartCntC1=$(echo "$currentXdcrLog" | grep -c "$BACKFILL_START_MSG")
	currentBackfillStartCntC1P=$(getInternalNodeXdcrLog "C1P" | grep -c "$BACKFILL_START_MSG")

	# In a long running test, metakv could get slow and so p2p may take some time to actually run since it requires stop the world
	echo "Done - Sleeping 10 minutes to ensure multiple requests have been handled"

	# Sleeping 10 minutes mean we should have at least a few instances
	sleep 600

	validateInternalLogWithInstance "C1" "$RECEIVE_P2P_REQ_MSG" $(($currentHandlingInstanceCnt + 3)) $(($currentHandlingInstanceCnt + 15))
	validateInternalLogWithInstance "C1" "$RECEIVE_P2P_REQ_DONE_MSG" $(($currentHandlingInstanceDoneCnt + 3)) $(($currentHandlingInstanceDoneCnt + 15))

	# Ensure that VB tasks are at least being finished
	validateVBTasksProgress "C1" "C2" "B0" "B1"
	validateVBTasksProgress "C1P" "C2" "B0" "B1"

	currentXdcrLog=$(getInternalNodeXdcrLog "C1")
	currentHandlingInstanceCnt=$(echo "$currentXdcrLog" | grep -c "$RECEIVE_P2P_REQ_MSG")
	currentHandlingInstanceDoneCnt=$(echo "$currentXdcrLog" | grep -c "$RECEIVE_P2P_REQ_DONE_MSG")

	# Pause replication and resume to see how many ckpts backfill has
	pauseReplication "C1" "B0" "C2" "B1"
	sleep 15
	resumeReplication "C1" "B0" "C2" "B1"
	sleep 15
	local node1Non0VBResumeCnt
	node1Non0VBResumeCnt=$(getNumOfBackfillCkptTookPlaceVB "C1" "C2" "B0" "B1")
	echo "For node C1, it had $node1Non0VBResumeCnt VBs that resumed from 0 prior to failover"

	local logsC1
	local resumeFrom0CntOrig
	local resumeFrom0CntNew
	logsC1=$(getInternalNodeXdcrLog "C1")
	resumeFrom0CntOrig=$(echo "$logsC1" | grep -c "$TS_PREFIX=0")
	echo "Failing node out and seeing if one node owns all the checkpoints"
	failoverNode "C1P" "C1"
	echo "Sleeping 30 seconds before checking logs for checkpoint resuming messages"
	sleep 30
	logsC1=$(getInternalNodeXdcrLog "C1")
	resumeFrom0CntNew=$(echo "$logsC1" | grep -c "$TS_PREFIX=0")

	# The backfill replication checkpoints were injected to be slow running
	# this means that out of node 1's 50 VBs, not all 50 will have had traffic/checkpoint
	# So as long as the count difference is not 50, it should mean that some ckpts were transferred
	if (($resumeFrom0CntOrig - $resumeFrom0CntNew >= 50)); then
		echo "Before failover, there are $resumeFrom0CntOrig lines of resuming from 0. After failover, there are $resumeFrom0CntNew"
		exit 1
	fi

	# This test starts out with 2 nodes each taking care of 512 VBs
	# One node now owns all the ckpts
	# So for backfill ckpt push to have worked, it means it must have resumed
	# with non-0 seqno for at least one more VBs than it originally resumed
	# Note: For 128 VB's, it's potentially too stringent a check fewer vbuckets to hash to and a low number of mutations
	# validateBackfillCkptTookPlaceForVBs "C1" "C2" "B0" "B1" "$(($node1Non0VBResumeCnt + 1))"

	# Make sure backfill pipeline only starts once for node C1P and a few times only for node C1 and not more than that
	validateInternalLogWithInstance "C1" "$BACKFILL_START_MSG" $(($currentBackfillStartCntC1 + 3)) $(($currentBackfillStartCntC1 + 5))
	validateInternalLogWithInstance "C1P" "$BACKFILL_START_MSG" $(($currentBackfillStartCntC1P + 1)) $(($currentBackfillStartCntC1P + 3))

	grepForPanics

	for clusterName in $(echo ${!CLUSTER_NAME_PORT_MAP[@]}); do
		validateInternalLogWithInstance "$clusterName" "$P2P_DESERIALIZATION_ERR_MSG" 0
		validateInternalLogWithInstance "$clusterName" "$P2P_UNABLE_TO_RESPOND_MSG" 0
		validateInternalLogWithInstance "$clusterName" "$CKPT_MAPPING_NOT_FOUND_MSG" 0
	done

	echo "============================================================================"
	echo "PASSED"
	echo "============================================================================"
	cleanupBucketReplications
	cleanupBuckets
	cleanupRemoteClusterRefs

	# magma test cleanup
	cleanupBucketNamePropertyMap
	sleep 20
}
