# Copyright 2019-Present Couchbase, Inc.
#
# Use of this software is governed by the Business Source License included in
# the file licenses/BSL-Couchbase.txt.  As of the Change Date specified in that
# file, in accordance with the Business Source License, use of this software
# will be governed by the Apache License, Version 2.0, included in the file
# licenses/APL2.txt.

# CONSTANTS
BROKEN_MSG="Found following destination collection(s) missing (and will not get replicated to)"
REPAIR_MSG="Following collection mappings are now repaired and replicating"
BACKFILL_MSG="These collections need to backfill"
BACKFILL_APPEND_MSG="These collections need to append backfill"
VBTASKS_DONE_MSG="has finished processing one task for all requested VBs"
TIMEDOUT_TYPE1_MSG="Executing Action timed out"
TIMEDOUT_TYPE2_MSG="Executing Action2 timed out"
OSO_MODE_MSG="with OSO mode requested"
OSO_BACKFILL_COUNT="oso_received=10000"
DCP_CONVERT_ERR_MSG="Error converting VBTask to DCP Nozzle Task"
BROKENEVENT_TYPE=3
BACKFILL_PIPELINE_TORNDOWN_MSG="Background check task finished"

# These should be imported after clusterRunProvision script

function checkItemCnt {
	local cluster=$1
	local bucket=$2
	local expectedCnt=$3
	local i

	local previousItemCnt=0
	local maxCnt=8
	for ((i = 0; $i < $maxCnt; i = $(($i + 1)))); do
		echo "Checking item count $(($i + 1)) / $maxCnt"
		itemCount=$(getBucketItemCount "$cluster" "$bucket")
		if (($itemCount == $expectedCnt)); then
			echo "Item count for cluster $cluster bucket $bucket: $itemCount"
			return 0
		else
			if (($itemCount != $previousItemCnt)); then
				previousItemCnt=$itemCount
				i=$(($i - 1))
				echo "ERROR: Cluster $cluster bucket $bucket only has $itemCount items. Items are increasing..."
			else
				echo "ERROR: Cluster $cluster bucket $bucket only has $itemCount items"
			fi
		fi
		echo "Sleeping 10 seconds and retrying..."
		sleep 10
	done
	exit 1
}

# Assumes running test script from this directory
function getNsServerDir {
	# i.e. Running from "/Users/neil.huang/source/couchbase/goproj/src/github.com/couchbase/goxdcr/tools/testScripts"
	local srcTreeName=$(pwd | cut -d/ -f6-)
	# /Users/neil.huang/source/couchbase/
	local couchbaseDir=$(pwd | sed "s|$srcTreeName||g")
	echo "${couchbaseDir}ns_server"
	return 0
}

function grepForPanics {
	local ns_serverDir=$(getNsServerDir)
	local logsDir="${ns_serverDir}/logs"
	for dir in $(ls $logsDir); do
		count=$(grep -c panic ${logsDir}/${dir}/goxdcr.log)
		if (($count > 0)); then
			echo "WARNING Found panics in ${logsDir}/${dir}"
			exit 1
		fi
	done
	return 0
}

function grepForInvalidCommand {
	local ns_serverDir=$(getNsServerDir)
	local logsDir="${ns_serverDir}/logs"

	for dir in $(ls $logsDir); do
		counts=$(grep -crhn "Invalid format specified" ${logsDir}/${dir})
		for count in $(echo "$counts"); do
			if (($count > 0)); then
				echo "WARNING Found invalid format in ${logsDir}/${dir}"
				exit 1
			fi
		done
	done
	return 0
}

function getDataReplicated {
	local srcCluster=$1
	local srcBucket=$2
	local targetCluster=$3
	local targetBucket=$4

	echo $(getStats "$srcCluster" "$srcBucket" "$targetCluster" "$targetBucket" "data_replicated")
}

function getChangesLeft {
	local srcCluster=$1
	local srcBucket=$2
	local targetCluster=$3
	local targetBucket=$4

	echo $(getStats "$srcCluster" "$srcBucket" "$targetCluster" "$targetBucket" "changes_left")
	if (($? != 0)); then
		echo "Failed to get stats"
		return 1
	fi
}

function getDocsProcessed {
	local srcCluster=$1
	local srcBucket=$2
	local targetCluster=$3
	local targetBucket=$4

	echo $(getStats "$srcCluster" "$srcBucket" "$targetCluster" "$targetBucket" "docs_processed")
}

function waitForChangesLeft0 {
	local srcCluster=$1
	local srcBucket=$2
	local targetCluster=$3
	local targetBucket=$4
	local i

	for ((i = 0; $i < 3; i = $(($i + 1)))); do
		changesLeft=$(getChangesLeft "$srcCluster" "$srcBucket" "$targetCluster" "$targetBucket")
		if (($? != 0)); then
			echo "Failed to get changes_left"
			exit 1
		fi
		if (($changesLeft > 0)); then
			echo "Changes left $changesLeft is not 0 yet..."
		else
			break
		fi
		echo "Sleeping 10 seconds and retrying..."
		sleep 10
	done
}

function checkChangesLeftInternal {
	local srcCluster=$1
	local srcBucket=$2
	local targetCluster=$3
	local targetBucket=$4
	local i

	local lastChangesLeft=0

	for ((i = 0; $i < 3; i = $(($i + 1)))); do
		changesLeft=$(getChangesLeft "$srcCluster" "$srcBucket" "$targetCluster" "$targetBucket")
		if [[ -z "${changesLeft:-}" ]] || [[ "$changesLeft" == "null" ]]; then
			changesLeft=999999
		fi
		if (($changesLeft == 0)); then
			echo "Node $srcCluster changes_left is 0"
			return 0
		else
			if (($changesLeft == $lastChangesLeft)); then
				echo "Node $srcCluster Changes left is not 0. It is $changesLeft"
			else
				lastChangesLeft=$changesLeft
				i=$(($i - 1))
				echo "Node $srcCluster Changes left is not 0. It is $changesLeft... it is decreasing"
			fi
			sleep 10
		fi
	done
	exit 1
}

function checkUnidirectionalChangesLeft {
	checkChangesLeftInternal "C1" "B1" "C2" "B2"
}

function checkBidirectionalChangesLeft {
	checkChangesLeftInternal "C1" "B1" "C2" "B2"
	checkChangesLeftInternal "C2" "B2" "C1" "B1"
}

function checkDataReplicatedIsZero {
	local srcCluster=$1
	local srcBucket=$2
	local targetCluster=$3
	local targetBucket=$4
	local oldDataReplicated=$5
	local i

	for ((i = 0; $i < 3; i = $(($i + 1)))); do
		dataReplicated=$(getDataReplicated "$srcCluster" "$srcBucket" "$targetCluster" "$targetBucket")
		if (($dataReplicated > 0)); then
			echo "Data replicated $dataReplicated is not 0 yet..."
			if (($dataReplicated != $oldDataReplicated)); then
				echo "Error: Data replicated is different from previous replicated $oldDataReplicated"
				break
			fi
		else
			return 0
		fi
		echo "Sleeping 10 seconds and retrying..."
		sleep 10
	done
	exit 1
}

function checkDocsProcessed {
	local srcCluster=$1
	local srcBucket=$2
	local targetCluster=$3
	local targetBucket=$4
	local docsProcessedCheck=$5
	local i

	for ((i = 0; $i < 5; i = $(($i + 1)))); do
		docsProcessed=$(getDocsProcessed "$srcCluster" "$srcBucket" "$targetCluster" "$targetBucket")
		if (($docsProcessed != $docsProcessedCheck)); then
			echo "DocsProcessed: $docsProcessed. Waiting for it to be $docsProcessedCheck..."
		else
			return 0
		fi
		echo "Sleeping 10 seconds and retrying..."
		sleep 10
	done
	exit 1
}

function getSpecificInternalSettings {
	local clusterName=$1
	local key=$2

	echo $(listInternalSettings "$clusterName" | jq ".$key")
}

function killGoXdcr {
	local clusterName=$1
	local sourcePort=${CLUSTER_NAME_PORT_MAP[$clusterName]:-}

	if [[ -z "$sourcePort" ]]; then
		echo "Unable to kill goxdcr as source port is not found"
	fi

	echo "Killing GoXDCR for $clusterName with port $sourcePort..."
	ps -ef | grep goxdcr | grep $sourcePort | awk '{print $2}' | xargs kill
}

# Input:
# 1 - cluster name
# 2 - String to look for
# 3 - Number of occurrences
# 4 - Max number of occurrences
function validateLogWithInstance {
	local clusterName=$1
	local grepStr="$2"
	local instanceCnt=$3
	local maxInstanceCnt=${4:-}

	logs=$(getClusterLogs "$clusterName")
	if ! (($? == 0)); then
		echo "Unable to get log for validation"
		return 1
	fi

	count=$(echo "$logs" | grep -c "$grepStr")
	if (($count != $instanceCnt)); then
		if [[ ! -z "$maxInstanceCnt" ]] && (($count > $maxInstanceCnt)); then
			echo "Error - requested count for $grepStr is $instanceCnt or < $maxInstanceCnt, but found $count"
			exit 1
		elif [[ ! -z "$maxInstanceCnt" ]]; then
			echo "Warning - requested count for $grepStr is $instanceCnt or < $maxInstanceCnt, found $count"
		else
			echo "Error - requested count for $grepStr is $instanceCnt, but found $count"
			exit 1
		fi
	else
		echo "Found exactly $instanceCnt of \"$grepStr\""
	fi
}

declare -i ORIG_TARGET_MAN_PULL_INTERVAL

function setCustomManifestRefreshInterval {
	local cluster="$1"

	for ((i = 0; i < 2; i = $(($i + 1)))); do
		ORIG_TARGET_MAN_PULL_INTERVAL=$(getSpecificInternalSettings "$cluster" "ManifestRefreshTgtInterval")
		tempTargetManifestPullInterval="5"

		echo "Temporarily updating targetManifestPull from $ORIG_TARGET_MAN_PULL_INTERVAL to $tempTargetManifestPullInterval"
		setInternalSettings "$cluster" "ManifestRefreshTgtInterval=$tempTargetManifestPullInterval"

		echo "Sleeping 10 seconds for XDCR to reboot before checking..."
		sleep 10
		chkTargetManifestPullInterval=$(getSpecificInternalSettings "$cluster" "ManifestRefreshTgtInterval")
		if (($chkTargetManifestPullInterval == $tempTargetManifestPullInterval)); then
			return 0
		else
			echo "Error - unable to update pull interval - stuck at $chkTargetManifestPullInterval. Trying again..."
		fi
	done
	exit 1
}

function resetCustomManifestRefreshInterval {
	local cluster="$1"
	echo "Cleaning up internal settings"
	setInternalSettings "C1" "ManifestRefreshTgtInterval=$ORIG_TARGET_MAN_PULL_INTERVAL"
}

function getInternalNsServerLogDir {
	local clusterName=$1
	local port=${CLUSTER_NAME_PORT_MAP[$clusterName]:-}
	if [[ -z "$port" ]]; then
		echo "Invalid clustername $clusterName"
		return 1
	fi

	local lastDigit=$(echo "${port: -1}")
	local logNodeDir="n_${lastDigit}"

	# Currently this test library exists under goproj/src/github.com/couchbase/goxdcr/tools/testScripts/
	local nsServerLogDir="../../../../../../../ns_server/logs/"

	echo "${nsServerLogDir}/${logNodeDir}/"
}

function getInternalNodeMemcachedLog {
	local clusterName=$1
	local port=${CLUSTER_NAME_PORT_MAP[$clusterName]:-}
	if [[ -z "$port" ]]; then
		echo "Invalid clustername $clusterName"
		return 1
	fi

	local logfileDir=$(getInternalNsServerLogDir "$clusterName")

	local memcachedLog
	for memcachedLog in $(ls $logfileDir | grep memcached); do
		cat ${logfileDir}/${memcachedLog}
	done
}

function getInternalNodeXdcrLog {
	local clusterName=$1
	local port=${CLUSTER_NAME_PORT_MAP[$clusterName]:-}
	if [[ -z "$port" ]]; then
		echo "Invalid clustername $clusterName"
		return 1
	fi

	local logfileDir=$(getInternalNsServerLogDir "$clusterName")

	local goxdcrLogFile=${logfileDir}/goxdcr.log
	if ! [[ -f "$goxdcrLogFile" ]]; then
		echo "Unable to find file $goxdcrLogFile"
		return 1
	fi

	cat $goxdcrLogFile
}

# 1 - cluster name
# 2 - String to look for
# 3 - Number of occurrences
# 4 - Max number of occurrences
function validateInternalLogWithInstance {
	local clusterName=$1
	local grepStr="$2"
	local instanceCnt=$3
	local maxInstanceCnt=${4:-}

	logs=$(getInternalNodeXdcrLog "$clusterName")
	if ! (($? == 0)); then
		echo "Unable to get log for validation"
		exit 1
	fi

	count=$(echo "$logs" | grep -c "$grepStr")
	if (($count != $instanceCnt)); then
		if [[ ! -z "$maxInstanceCnt" ]] && (($count > $maxInstanceCnt)); then
			echo "Error - requested count for $grepStr is $instanceCnt or <= $maxInstanceCnt, but found $count"
			exit 1
		elif [[ ! -z "$maxInstanceCnt" ]]; then
			echo "Warning - requested count for $grepStr is $instanceCnt or <= $maxInstanceCnt, found $count"
		else
			echo "Error - requested count for $grepStr is $instanceCnt, but found $count"
			exit 1
		fi
	else
		echo "Found exactly $instanceCnt of \"$grepStr\""
	fi
}

function validateXDCRCheckpoints {
	local cluster=$1

	checkpointOutput=$(getXDCRCheckpoints $cluster)
	if ! (($? == 0)); then
		echo "Unable to get checkpoint"
		exit 1
	fi

	# validate
	echo "$checkpointOutput" | jq type >/dev/null
	if ! (($? == 0)); then
		echo "$checkpointOutput" >/tmp/checkpoint.error
		echo "Erroneous checkpoint output to /tmp/checkpoint.error"
		exit 1
	fi
}

function killAllBgJobs {
	jobs -l | awk '{print $2}' | xargs kill
}

function runXdcrDiffer {
	local srcCluster=$1
	local srcPort=${CLUSTER_NAME_PORT_MAP[$srcCluster]:-}
	local srcBucket=$2
	local tgtCluster=$3
	local tgtBucket=$4

	pushd $(pwd)

	cd $xdcrDifferDir
	$differSh -u $DEFAULT_ADMIN -p $DEFAULT_PW -h "localhost:$srcPort" -r $tgtCluster -s $srcBucket -t $tgtBucket -c
	retVal=$?

	popd
	return $retVal
}

function differGetTotalNumber {
	local input="$1"
	local collectionIDs
	local collectionID
	local sum=0

	collectionIDs=$(echo "$input" | jq 'keys' | jq .[])
	for collectionID in $(echo "$collectionIDs"); do
		local keys
		local numDocsForThisCollection
		keys=$(echo "$input" | jq ".$collectionID")
		numDocsForThisCollection=$(echo "$keys" | jq length)
		sum=$(($sum + $numDocsForThisCollection))
	done

	echo "$sum"
}

function validateDifferResults {
	local expectedMismatchCnt=$1
	local expectedMissingSrcCnt=$2
	local expectedMissingTgtCnt=$3
	local numOfMismatch
	local numOfMissingSrc
	local numOfMissingTgt
	local resultOutput
	local retVal=0
	local mismatchOutput
	local missingFromSourceOutput
	local missingFromTargetOutput

	if [[ ! -f "$mutationDiffResults" ]]; then
		echo "Error: Unable to find mutation results file: $mutationDiffResults"
		return 1
	fi

	resultOutput=$(cat $mutationDiffResults)
	mismatchOutput=$(echo "$resultOutput" | jq '.Mismatch')
	missingFromSourceOutput=$(echo "$resultOutput" | jq '.MissingFromSource')
	missingFromTargetOutput=$(echo "$resultOutput" | jq '.MissingFromTarget')

	numOfMismatch=$(differGetTotalNumber "$mismatchOutput")
	numOfMissingSrc=$(differGetTotalNumber "$missingFromSourceOutput")
	numOfMissingTgt=$(differGetTotalNumber "$missingFromTargetOutput")

	if (($numOfMismatch != $expectedMismatchCnt)); then
		echo "Expected $expectedMismatchCnt mismatch(es), but found $numOfMismatch"
		retVal=1
	fi

	if (($numOfMissingSrc != $expectedMissingSrcCnt)); then
		echo "Expected $expectedMissingSrcCnt missing from source, but found $numOfMissingSrc"
		retVal=1
	fi

	if (($numOfMissingTgt != $expectedMissingTgtCnt)); then
		echo "Expected $expectedMissingTgtCnt missing from target, but found $numOfMissingTgt"
		retVal=1
	fi

	if (($retVal == 1)); then
		echo "$resultOutput" | jq
		echo ""
	fi

	return $retVal
}

function checkInternalSetting {
	local clusterName=$1
	local settingKey=$2
	local expectedVal=$3
	local checkInt

	checkInt=$(getInternalSetting "$clusterName" "$settingKey")
	if (($checkInt != $expectedVal)); then
		echo "$settingKey is not set to $expectedVal. It is $checkInt"
		exit 1
	fi
}

# TODO - right now assumes only one outgoing pipeline per cluster
function validateBrokenMapExists {
	local errList
	local cluster=$1

	errList=$(getErrorListForMainPipeline $cluster)
	if ((!$? == 0)); then
		echo "Issue getting error list"
		exit 1
	fi

	if (($(echo "$errList" | jq 'length') == 0)); then
		echo "See no error list"
		exit 1
	fi
}

function validateBrokenMapDoesNotExist {
	local errList
	local cluster=$1

	errList=$(getErrorListForMainPipeline $cluster)
	if ((!$? == 0)); then
		echo "Issue getting error list"
		exit 1
	fi

	if (($(echo "$errList" | jq 'length') > 0)); then
		echo "Error list exists when it should not"
		exit 1
	fi
}

# Ensures that a specified linkage is broken
function validateBrokenMapEntry {
	local cluster=$1
	local sourceScopeName=$2
	local sourceCollectionName=$3
	local targetScopeName=$4
	local targetCollectionName=$5

	getBrokenMapEntryId "$cluster" "$sourceScopeName" "$sourceCollectionName" "$targetScopeName" "$targetCollectionName"
	local entryId=$?
	if (($entryId == $GET_BROKEN_MAP_NOT_FOUND)); then
		exit 1
	fi
	echo "Got entry ID: $entryId"
}

function validateBrokenMapEntryDNE {
	local cluster=$1
	local sourceScopeName=$2
	local sourceCollectionName=$3
	local targetScopeName=$4
	local targetCollectionName=$5

	getBrokenMapEntryId "$cluster" "$sourceScopeName" "$sourceCollectionName" "$targetScopeName" "$targetCollectionName"
	if ((!$? == $GET_BROKEN_MAP_NOT_FOUND)); then
		echo "Found entry when not supposed to"
		exit 1
	fi
}

# returns the count of remote cluster ref from source to target
function getRemoteCluster {
	local source=$1
	local target=$2
	local host=${CLUSTER_NAME_HOST_MAP[$source]:-}
	local port=${CLUSTER_NAME_PORT_MAP[$source]:-}
	result=$(curl -GET -u $DEFAULT_ADMIN:$DEFAULT_PW http://$host:$port/pools/default/remoteClusters | jq | grep name | grep -c $target)
	echo $result
}

# returns the output from /pools/default/remoteClusters
function getRemoteClusters {
	local source=$1
	local host=${CLUSTER_NAME_HOST_MAP[$source]:-}
	local port=${CLUSTER_NAME_PORT_MAP[$source]:-}
	result=$(curl -GET -u $DEFAULT_ADMIN:$DEFAULT_PW http://$host:$port/pools/default/remoteClusters)
	echo $result
}

function checkReplicationInfos {
	local srcClusterName=$1

	local sourcePort=${CLUSTER_NAME_XDCR_PORT_MAP[$srcClusterName]:-}
	local sourceHost=${CLUSTER_NAME_HOST_MAP[$srcClusterName]:-"127.0.0.1"}

	echo "curl -X GET -u $DEFAULT_ADMIN:$DEFAULT_PW http://${sourceHost}:${sourcePort}/pools/default/replicationInfos"
	curl -X GET -u $DEFAULT_ADMIN:$DEFAULT_PW http://${sourceHost}:${sourcePort}/pools/default/replicationInfos
}

function changeRemoteClusterReferenceToSecure {
	local source=$1
	local target=$2
	local targetHost=${3:-"127.0.0.1"}
	if [[ -z "${source:-}" ]] || [[ -z "${target:-}" ]]; then
		echo "Invalid input"
		return 1
	fi
	local sourcePort=${CLUSTER_NAME_PORT_MAP[$source]:-}
	local targetPort=${4:-${CLUSTER_NAME_PORT_MAP[$target]}}
	local targetSecurePort=${CLUSTER_NAME_SECURE_PORT_MAP[$target]:-$targetPort}
	local remoteClusterCert=${5:-}

	# Get the target cluster's root certificate if not provided
	if [[ -z "${remoteClusterCert:-}" ]]; then
		remoteClusterCert=$($CURL -X GET -u $DEFAULT_ADMIN:$DEFAULT_PW http://$targetHost:$targetPort/pools/default/certificate)
	fi

	echo "Change remote cluster reference from $source to $target ($targetHost:$targetPort) to SECURE"
	echo "$CURL -X POST -u $DEFAULT_ADMIN:$DEFAULT_PW http://127.0.0.1:$sourcePort/pools/default/remoteClusters/$target -d name=$target -d hostname=$targetHost:$targetSecurePort -d username=$DEFAULT_ADMIN -d password=$DEFAULT_PW -d encryptionType=full -d demandEncryption=1 --data-urlencode \"certificate=${remoteClusterCert}\""
	$CURL -X POST -u $DEFAULT_ADMIN:$DEFAULT_PW http://127.0.0.1:$sourcePort/pools/default/remoteClusters/$target -d name=$target -d hostname=$targetHost:$targetSecurePort -d username=$DEFAULT_ADMIN -d password=$DEFAULT_PW \
		-d encryptionType=full -d demandEncryption=1 --data-urlencode "certificate=${remoteClusterCert}"
}
