# Copyright 2022-Present Couchbase, Inc.
#
# Use of this software is governed by the Business Source License included in
# the file licenses/BSL-Couchbase.txt.  As of the Change Date specified in that
# file, in accordance with the Business Source License, use of this software
# will be governed by the Apache License, Version 2.0, included in the file
# licenses/APL2.txt.

# =============================
# topological map information
# =============================
# cluster -> Bucket(s)
# -----------------
CLUSTER_NAME_PORT_MAP=(["C1"]=15000 ["C1P"]=15001 ["C2"]=15002 ["C2P"]=15003)
CLUSTER_NAME_SSLPORT_MAP=(["C1"]=15020 ["C1P"]=15021 ["C2"]=15022 ["C2P"]=15023)
CLUSTER_NAME_XDCR_PORT_MAP=(["C1"]=15996 ["C1P"]=15997 ["C2"]=15998 ["C2P"]=15999)
CLUSTER_DEPENDENCY_MAP=(["C1P"]="C1" ["C2P"]="C2")
VAGRANT_KV_EXTERNAL_MAP=(["C1"]=15100 ["C1P"]=15101 ["C2"]=15102 ["C2P"]=15103)
VAGRANT_KVSSL_EXTERNAL_MAP=(["C1"]=15200 ["C1P"]=15201 ["C2"]=15202 ["C2P"]=15203)
VAGRANT_CAPI_EXTERNAL_MAP=(["C1"]=15010 ["C1P"]=15011 ["C2"]=15012 ["C2P"]=15013)
VAGRANT_VM_IP_MAP=(["C1"]="192.168.56.2" ["C1P"]="192.168.56.3" ["C2"]="192.168.56.4" ["C2P"]="192.168.56.5")
VAGRANT_VM_IDX_MAP=(["0"]="C1" ["1"]="C1P" ["2"]="C2" ["3"]="C2P")
# Set c1 to have 2 buckets and c2 to have 1 bucket
declare -a cluster1BucketsArr
cluster1BucketsArr=("B1")
cluster2BucketsArr=("B2")
CLUSTER_NAME_BUCKET_MAP=(["C1"]=${cluster1BucketsArr[@]} ["C2"]=${cluster2BucketsArr[@]})
unset CLUSTER_SETUP_DONE_MAP
declare -gA CLUSTER_SETUP_DONE_MAP
declare -A DefaultBucketReplProperties=(["replicationType"]="continuous" ["checkpointInterval"]=60 ["statsInterval"]=500)

# Test cases assume vagrant up has already been called

# XDCR DIFFER TEST PREREQUISITES
# A linux xdcrDiffer binary must have already been compiled
# The path to the binary must be provided in the variable xdcrDifferDir
# Run the test script like so: ./runVagrantTests.sh -r 4 -x "/home/vagrant/xdcrDiffer"

# Since Morpheus, xdcrDiffer will now become part of the build
# Thus, the "-x" variable should continue to be used until morpheus is the "oldest" build to be supported
# At which point, this test script should only be using the "built" binary that comes with the image to run tests
# At that time, we need to hard-code it such that when in vagrant mode, only the built binary is used

function runDataLoad {
	runCbWorkloadGenBucket "C1" "B1" &
}

declare srcVersionLoaded
declare tgtVersionLoaded

function loadVersion {
	local srcVersionToTest=$1
	local tgtVersionToTest=$2

	# source
	if [[ -z "${srcVersionLoaded:-}" ]] || [[ "$srcVersionLoaded" != "$srcVersionToTest" ]]; then
		for ((i = 0; $i < 2; i++)); do
			checkAndWaitForUnattendedUpgrade $i
			vagrantRemoveCbServer $i
			vagrantInstallCBServer $i "$srcVersionToTest"
		done
		srcVersionLoaded="$srcVersionToTest"
	fi

	# target
	if [[ -z "${tgtVersionLoaded:-}" ]] || [[ "$tgtVersionLoaded" != "$tgtVersionToTest" ]]; then
		for ((i = 2; $i < ${#VSSH[@]}; i++)); do
			checkAndWaitForUnattendedUpgrade $i
			vagrantRemoveCbServer $i
			vagrantInstallCBServer $i "$tgtVersionToTest"
		done
		tgtVersionLoaded="$tgtVersionToTest"
	fi
}

function runNonSecureDifferTest {
	echo "============================================================================"
	echo "Running Non- secure"
	echo "============================================================================"
	sleep 5
	createRemoteClusterReference "C1" "C2"
	createRemoteClusterReference "C2" "C1"
	sleep 1

	createBucketReplication "C1" "B1" "C2" "B2" DefaultBucketReplProperties
	#createBucketReplication "C2" "B2" "C1" "B1" DefaultBucketReplProperties

	runDataLoad
	sleep 10

	checkUnidirectionalChangesLeft

	vagrantRunXdcrDiffer "${xdcrDifferDir}" "C1" "B1" "C2" "B2"
	vagrantValidateDifferResults "${xdcrDifferDir}" "C1" 0 0 0

	if (($? == 1)); then
		echo "Test case failed"
		exit 1
	fi

	echo "============================================================================"
	echo "PASSED"
	echo "============================================================================"
}

function runSecureCertDifferTest {
	echo "============================================================================"
	echo "Running Full secure with client cert replication with xdcrDiffer"
	echo "============================================================================"

	sleep 5
	setupCertsForTesting
	vagrantLoadCerts
	for clusterName in $(echo ${!CLUSTER_NAME_PORT_MAP[@]}); do
		setEnableClientCert "$clusterName"
	done

	sleep 5
	createSecureRemoteClusterReference "C1" "C2" "${CLUSTER_ROOT_CERTIFICATE_MAP["C2"]}"
	createSecureRemoteClusterReference "C2" "C1" "${CLUSTER_ROOT_CERTIFICATE_MAP["C1"]}"
	sleep 1

	createBucketReplication "C1" "B1" "C2" "B2" DefaultBucketReplProperties

	runDataLoad
	sleep 10

	checkUnidirectionalChangesLeft

	vagrantRunXdcrDiffer "${xdcrDifferDir}" "C1" "B1" "C2" "B2"
	vagrantValidateDifferResults "${xdcrDifferDir}" "C1" 0 0 0

	if (($? == 1)); then
		echo "Test case failed"
		exit 1
	fi

	# We need to disable cert otherwise we will hit MB-47905
	for clusterName in $(echo ${!CLUSTER_NAME_PORT_MAP[@]}); do
		setDisableClientCert "$clusterName"
	done

	echo "============================================================================"
	echo "PASSED"
	echo "============================================================================"
}

function runSecureDifferTest {
	echo "============================================================================"
	echo "Running Full secure replication with xdcrDiffer"
	echo "============================================================================"

	sleep 5
	createSecureRemoteClusterReference "C1" "C2"
	createSecureRemoteClusterReference "C2" "C1"
	sleep 1

	createBucketReplication "C1" "B1" "C2" "B2" DefaultBucketReplProperties

	runDataLoad
	sleep 10

	checkUnidirectionalChangesLeft

	vagrantRunXdcrDiffer "${xdcrDifferDir}" "C1" "B1" "C2" "B2"
	vagrantValidateDifferResults "${xdcrDifferDir}" "C1" 0 0 0

	if (($? == 1)); then
		echo "Test case failed"
		exit 1
	fi

	echo "============================================================================"
	echo "PASSED"
	echo "============================================================================"
}

function runDifferTestRebalanceIn {
	addNodesIn
	sleep 5
	startRebalancing "C1"
	startRebalancing "C2"
}

function runTestCase {
	echo "============================================================================"
	echo "Running multiple versions compatibility matrix differ test with secure or nonsecure replication"
	echo "============================================================================"

	local srcVersionToTest
	local tgtVersionToTest

	for srcVersionToTest in neo trinity morpheus; do
		for tgtVersionToTest in neo trinity morpheus; do
			unset CLUSTER_SETUP_DONE_MAP
			declare -gA CLUSTER_SETUP_DONE_MAP

			echo "============================================================================"
			echo "Running test with source $srcVersionToTest and target $tgtVersionToTest"
			echo "============================================================================"
			loadVersion "$srcVersionToTest" "$tgtVersionToTest"

			# Bucket properties
			cleanupBucketNamePropertyMap
			unset Bucket1Property
			unset Bucket2Property

			# If target is morpheus and source is not, create 1024 vb's
			if [[ "$srcVersionToTest" != "morpheus" ]] && [[ "$tgtVersionToTest" == "morpheus" ]]; then
				declare -A Bucket2Property=(["ramQuotaMB"]=1024 ["CompressionMode"]="Active" ["numVBuckets"]=1024)
			else
				declare -A Bucket2Property=(["ramQuotaMB"]=100)
			fi

			# If source is morpheus and target is not, create 1024 vb's
			if [[ "$srcVersionToTest" == "morpheus" ]] && [[ "$tgtVersionToTest" != "morpheus" ]]; then
				declare -A Bucket1Property=(["ramQuotaMB"]=1024 ["CompressionMode"]="Active" ["numVBuckets"]=1024)
			else
				declare -A Bucket1Property=(["ramQuotaMB"]=100)
			fi

			insertPropertyIntoBucketNamePropertyMap "B1" Bucket1Property
			insertPropertyIntoBucketNamePropertyMap "B2" Bucket2Property

			setupTopologies
			runDifferTestRebalanceIn

			runNonSecureDifferTest
			cleanupBucketReplications
			cleanupRemoteClusterRefs

			runSecureDifferTest
			cleanupBucketReplications
			cleanupRemoteClusterRefs

			# Run cert test as the last
			runSecureCertDifferTest
			cleanupBucketReplications
			cleanupRemoteClusterRefs
			cleanupBuckets
			cleanupClientCertMaps
		done
	done

	unset srcVersionLoaded
	unset tgtVersionLoaded
}
