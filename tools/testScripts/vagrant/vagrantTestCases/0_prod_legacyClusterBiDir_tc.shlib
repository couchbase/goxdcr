# Copyright 2022-Present Couchbase, Inc.
#
# Use of this software is governed by the Business Source License included in
# the file licenses/BSL-Couchbase.txt.  As of the Change Date specified in that
# file, in accordance with the Business Source License, use of this software
# will be governed by the Apache License, Version 2.0, included in the file
# licenses/APL2.txt.

# =============================
# topological map information
# =============================
# cluster -> Bucket(s)
# -----------------
CLUSTER_NAME_PORT_MAP=(["C1"]=15000 ["C1P"]=15001 ["C2"]=15002 ["C2P"]=15003)
CLUSTER_NAME_SSLPORT_MAP=(["C1"]=15020 ["C1P"]=15021 ["C2"]=15022 ["C2P"]=15023)
CLUSTER_NAME_XDCR_PORT_MAP=(["C1"]=15996 ["C1P"]=15997 ["C2"]=15998 ["C2P"]=15999)
CLUSTER_DEPENDENCY_MAP=(["C1P"]="C1" ["C2P"]="C2")
VAGRANT_KV_EXTERNAL_MAP=(["C1"]=15100 ["C1P"]=15101 ["C2"]=15102 ["C2P"]=15103)
VAGRANT_KVSSL_EXTERNAL_MAP=(["C1"]=15200 ["C1P"]=15201 ["C2"]=15202 ["C2P"]=15203)
VAGRANT_CAPI_EXTERNAL_MAP=(["C1"]=15010 ["C1P"]=15011 ["C2"]=15012 ["C2P"]=15013)
VAGRANT_VM_IP_MAP=(["C1"]="192.168.56.2" ["C1P"]="192.168.56.3" ["C2"]="192.168.56.4" ["C2P"]="192.168.56.5")
VAGRANT_VM_IDX_MAP=(["0"]="C1" ["1"]="C1P" ["2"]="C2" ["3"]="C2P")
# Set c1 to have 2 buckets and c2 to have 1 bucket
declare -a cluster1BucketsArr
cluster1BucketsArr=("B0" "B1" "B2" "B3" "B4")
CLUSTER_NAME_BUCKET_MAP=(["C1"]=${cluster1BucketsArr[@]} ["C2"]=${cluster1BucketsArr[@]})
unset CLUSTER_SETUP_DONE_MAP
declare -gA CLUSTER_SETUP_DONE_MAP

# Bucket properties
declare -A BucketProperty=(["ramQuotaMB"]=100)
declare -A Bucket1Properties=(["ramQuotaMB"]=100 ["CompressionMode"]="Active")
insertPropertyIntoBucketNamePropertyMap "B0" BucketProperty
insertPropertyIntoBucketNamePropertyMap "B1" Bucket1Properties
insertPropertyIntoBucketNamePropertyMap "B2" BucketProperty
insertPropertyIntoBucketNamePropertyMap "B3" BucketProperty
insertPropertyIntoBucketNamePropertyMap "B4" BucketProperty

declare -A DefaultBucketReplProperties=(["replicationType"]="continuous" ["checkpointInterval"]=60 ["statsInterval"]=500)

#BUCKET_NAME_SCOPE_MAP=(["B2"]="test")
#SCOPE_NAME_COLLECTION_MAP=(["test"]="test")

# Test cases assume vagrant up has already been called

function runDataLoadBothSidesAndCheck {
	runCbWorkloadGenBucket "C1" "B1"
	runCbWorkloadGenBucket "C2" "B2"
	sleep 20
	checkBidirectionalChangesLeft
}

function pauseAndResumeBothSidesAndCheck {
	pauseReplication "C1" "B1" "C2" "B2"
	pauseReplication "C2" "B2" "C1" "B1"
	sleep 30
	resumeReplication "C1" "B1" "C2" "B2"
	resumeReplication "C2" "B2" "C1" "B1"
	runCbWorkloadGenBucket "C1" "B1"
	runCbWorkloadGenBucket "C2" "B2"
	sleep 30
	checkBidirectionalChangesLeft
}

function deleteRecreateReplicationsAndCheck {
	deleteBucketReplication "C1" "B1" "C2" "B2"
	deleteBucketReplication "C2" "B2" "C1" "B1"
	sleep 5
	createBucketReplication "C1" "B1" "C2" "B2" DefaultBucketReplProperties
	createBucketReplication "C2" "B2" "C1" "B1" DefaultBucketReplProperties
	sleep 5
	runCbWorkloadGenBucket "C1" "B1"
	runCbWorkloadGenBucket "C2" "B2"
	sleep 30
	checkBidirectionalChangesLeft
}

function runLegacyCurrentBidir {
	local c1Ver="$1"
	local c2Ver="$2"

	echo "============================================================================"
	echo "Running legacy and current bidir between $c1Ver and $c2Ver"
	echo "============================================================================"

	vagrantRemoveCbServerAll

	vagrantInstallCBServer 0 "$c1Ver"
	vagrantInstallCBServer 1 "$c1Ver"
	vagrantInstallCBServer 2 "$c2Ver"
	vagrantInstallCBServer 3 "$c2Ver"

	setupTopologies

	# Shorten the amount of time pipeline restarts
	local checkInterval=10
	local maxChangeCnt=3
	local maxStableCnt=3
	local coolDownPeriod=1
	setInternalSettings "C1" "TopologyChangeCheckInterval=$checkInterval" "MaxTopologyChangeCountBeforeRestart=$maxChangeCnt" "MaxTopologyStableCountBeforeRestart=$maxStableCnt" "TopologySvcCooldownPeriodSec=$coolDownPeriod"

	sleep 5
	createRemoteClusterReference "C1" "C2"
	createRemoteClusterReference "C2" "C1"
	sleep 1

	addNodesIn
	sleep 5
	echo "Rebalancing nodes to become a 2-node source cluster"
	startRebalancing "C1"
	echo "Rebalancing nodes to become a 2-node target cluster"
	startRebalancing "C2"

	createBucketReplication "C1" "B1" "C2" "B2" DefaultBucketReplProperties
	createBucketReplication "C2" "B2" "C1" "B1" DefaultBucketReplProperties

	runDataLoadBothSidesAndCheck
	pauseAndResumeBothSidesAndCheck
	deleteRecreateReplicationsAndCheck

	cleanupBucketReplications
	cleanupRemoteClusterRefs
	cleanupBuckets
}

function runTestCase {
	runLegacyCurrentBidir "neo" "trinity" &&
		runLegacyCurrentBidir "trinity" "cypher" &&
		runLegacyCurrentBidir "cypher" "morpheus" &&
		runLegacyCurrentBidir "trinity" "morpheus"
}
