# Copyright 2022-Present Couchbase, Inc.
#
# Use of this software is governed by the Business Source License included in
# the file licenses/BSL-Couchbase.txt.  As of the Change Date specified in that
# file, in accordance with the Business Source License, use of this software
# will be governed by the Apache License, Version 2.0, included in the file
# licenses/APL2.txt.

# =============================
# topological map information
# =============================
# cluster -> Bucket(s)
# -----------------
CLUSTER_NAME_PORT_MAP=(["C1"]=15000 ["C1P"]=15001 ["C2"]=15002 ["C2P"]=15003)
CLUSTER_NAME_SSLPORT_MAP=(["C1"]=15020 ["C1P"]=15021 ["C2"]=15022 ["C2P"]=15023)
CLUSTER_NAME_XDCR_PORT_MAP=(["C1"]=15996 ["C1P"]=15997 ["C2"]=15998 ["C2P"]=15999)
CLUSTER_DEPENDENCY_MAP=(["C1P"]="C1" ["C2P"]="C2")
VAGRANT_KV_EXTERNAL_MAP=(["C1"]=15100 ["C1P"]=15101 ["C2"]=15102 ["C2P"]=15103)
VAGRANT_KVSSL_EXTERNAL_MAP=(["C1"]=15200 ["C1P"]=15201 ["C2"]=15202 ["C2P"]=15203)
VAGRANT_CAPI_EXTERNAL_MAP=(["C1"]=15010 ["C1P"]=15011 ["C2"]=15012 ["C2P"]=15013)
VAGRANT_VM_IP_MAP=(["C1"]="192.168.56.2" ["C1P"]="192.168.56.3" ["C2"]="192.168.56.4" ["C2P"]="192.168.56.5")
VAGRANT_VM_IDX_MAP=(["0"]="C1" ["1"]="C1P" ["2"]="C2" ["3"]="C2P")
# Set c1 to have 2 buckets and c2 to have 1 bucket
declare -a cluster1BucketsArr
cluster1BucketsArr=("B0" "B1" "B2" "B3" "B4")
CLUSTER_NAME_BUCKET_MAP=(["C1"]=${cluster1BucketsArr[@]} ["C2"]=${cluster1BucketsArr[@]})
unset CLUSTER_SETUP_DONE_MAP
declare -gA CLUSTER_SETUP_DONE_MAP

# Bucket properties
declare -A LWWBucketProperty=(["ramQuotaMB"]=100 ["conflictResolutionType"]="lww" ["storageBackend"]="couchstore")
insertPropertyIntoBucketNamePropertyMap "B0" LWWBucketProperty
insertPropertyIntoBucketNamePropertyMap "B1" LWWBucketProperty
insertPropertyIntoBucketNamePropertyMap "B2" LWWBucketProperty
insertPropertyIntoBucketNamePropertyMap "B3" LWWBucketProperty
insertPropertyIntoBucketNamePropertyMap "B4" LWWBucketProperty

declare -A MobileBucketReplProperties=(["replicationType"]="continuous" ["checkpointInterval"]=60 ["statsInterval"]=500 ["mobile"]="Active")

#BUCKET_NAME_SCOPE_MAP=(["B2"]="test")
#SCOPE_NAME_COLLECTION_MAP=(["test"]="test")

# Test cases assume vagrant up has already been called

function runDataLoad {
	runCbWorkloadGenBucket "C1" "B1" &
	runCbWorkloadGenCollection "C1" "B1" "S1" "col1" "col_" &

	runCbWorkloadGenBucket "C2" "B2" &
	runCbWorkloadGenCollection "C2" "B2" "S1" "col1" "col_" &
	waitForBgJobs
}

function setupSGW {
	local clusterName=$1
	vagrantRemoveSGW "$clusterName"
	vagrantInstallSGW "$clusterName" "4.0.0"
	vagrantStopSGW "$clusterName"
	vagrantSetConfigSGW "$clusterName"
	vagrantStartSGW "$clusterName"
}

function verifyPromStats {
	# verify no data-corruption
	# This is tricky because we have all sorts of binary docs in a real SGW case

	# Will do some replication gymnastics
	createRemoteClusterReference "C1" "C1"
	createRemoteClusterReference "C2" "C2"

	# First replicate from "target" buckets to temporary buckets
	# These replications will have binary filtered, and the end result will be purely loaded data
	createBucketReplication "C1" "B1" "C1" "B3" MobileBucketReplProperties
	createBucketReplication "C2" "B2" "C2" "B3" MobileBucketReplProperties

	checkChangesLeftInternalSGW "C1" "B1" "C1" "B3"
	checkChangesLeftInternalSGW "C2" "B2" "C2" "B3"

	# Then, re-replicate to another end result target
	createBucketReplication "C1" "B3" "C1" "B4" MobileBucketReplProperties
	createBucketReplication "C2" "B3" "C2" "B4" MobileBucketReplProperties

	validateBinaryFilteredIs0 "C1" "B3" "B4"
	validateBinaryFilteredIs0 "C2" "B3" "B4"

	# verify no datapool get failures
	validateDatapoolFailIs0 "C1" "B3" "B4"
	validateDatapoolFailIs0 "C2" "B3" "B4"
}

function runTestCase {
	local maxRuns=30
	echo "============================================================================"
	echo "Running active active sgw replication"
	echo "============================================================================"

	vagrantRemoveCbServerAll
	vagrantRemoveSGWAll
	vagrantInstallCBServerAll "morpheus"

	setupTopologies
	setCrossClusterVersioningForBucket "C1" "B1"
	setCrossClusterVersioningForBucket "C2" "B2"
	setCrossClusterVersioningForBucket "C1" "B3"
	setCrossClusterVersioningForBucket "C2" "B3"
	setCrossClusterVersioningForBucket "C1" "B4"
	setCrossClusterVersioningForBucket "C2" "B4"

	# Shorten the amount of time pipeline restarts
	local checkInterval=10
	local maxChangeCnt=3
	local maxStableCnt=3
	local coolDownPeriod=1
	setInternalSettings "C1" "TopologyChangeCheckInterval=$checkInterval" "MaxTopologyChangeCountBeforeRestart=$maxChangeCnt" "MaxTopologyStableCountBeforeRestart=$maxStableCnt" "TopologySvcCooldownPeriodSec=$coolDownPeriod"

	sleep 5
	addNodesIn
	sleep 5
	echo "Rebalancing nodes to become a 2-node source cluster"
	startRebalancing "C1"
	echo "Rebalancing nodes to become a 2-node target cluster"
	startRebalancing "C2"

	setupSGW "C1"
	setupSGW "C2"
	vagrantSGWAddDbConfig "C1" "B1" "b1db"
	vagrantSGWAddDbConfig "C2" "B2" "b2db"
	echo "Waiting 30 sec for SGW to finish init"
	sleep 20

	createRemoteClusterReference "C1" "C2"
	createRemoteClusterReference "C2" "C1"
	sleep 1
	createBucketReplication "C1" "B1" "C2" "B2" MobileBucketReplProperties
	createBucketReplication "C2" "B2" "C1" "B1" MobileBucketReplProperties

	runDataLoad

	sleep 30
	checkBidirectionalChangesLeftSGW
	vagrantGrepForPanicAll
	verifyPromStats

	echo "============================================================================"
	echo "PASSED"
	echo "============================================================================"
	cleanupBucketReplications
	cleanupRemoteClusterRefs
	cleanupBuckets
}
