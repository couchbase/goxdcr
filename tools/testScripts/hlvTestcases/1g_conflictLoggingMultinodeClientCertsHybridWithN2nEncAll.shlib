# Copyright 2024-Present Couchbase, Inc.
#
# Use of this software is governed by the Business Source License included in
# the file licenses/BSL-Couchbase.txt.  As of the Change Date specified in that
# file, in accordance with the Business Source License, use of this software
# will be governed by the Apache License, Version 2.0, included in the file
# licenses/APL2.txt.

# =============================
# topological map information
# =============================
# cluster -> Bucket(s)
# -----------------
CLUSTER_NAME_PORT_MAP=(["C1"]=9000 ["C1P"]=9001 ["C2"]=9002 ["C2P"]=9003)
CLUSTER_NAME_SECURE_PORT_MAP=(["C1"]=19000 ["C1P"]=19001 ["C2"]=19002 ["C2P"]=19003)
# For uni directional, just have one node rebalancing in
CLUSTER_DEPENDENCY_MAP=(["C1P"]="C1")
CLUSTER_NAME_XDCR_PORT_MAP=(["C1"]=13000 ["C1P"]=13001 ["C2"]=13002 ["C2P"]=13003)
cluster1BucketsArr=("B0" "B2")
cluster2BucketsArr=("B1" "B2")
CLUSTER_NAME_BUCKET_MAP=(["C1"]=${cluster1BucketsArr[@]} ["C2"]=${cluster2BucketsArr[@]})
CLUSTER_SETUP_DONE_MAP=()
declare -gA CLUSTER_SETUP_DONE_MAP
NumConflictDocsC1=0
NumConflictDocsC2=0

# Bucket properties
declare -A BucketProperty=(["ramQuotaMB"]=1024 ["numVBuckets"]=1024)
declare -A Bucket1Properties=(["ramQuotaMB"]=1024 ["CompressionMode"]="Active" ["numVBuckets"]=1024)
insertPropertyIntoBucketNamePropertyMap "B0" BucketProperty
insertPropertyIntoBucketNamePropertyMap "B1" Bucket1Properties
insertPropertyIntoBucketNamePropertyMap "B2" BucketProperty

conflictLoggingMap="{\"bucket\":\"B2\", \"collection\": \"_default._default\"}"
declare -A BucketReplProperties=(["replicationType"]="continuous" ["checkpointInterval"]=60 ["statsInterval"]=500 ["preReplicateVBMasterCheck"]="true" ["conflictLogging"]=$conflictLoggingMap ["filterBinary"]="true")

function runDataLoad {
	echo "RUNNING dataload..."
	prefix=$1
	numItems=10000
	CBWORKLOAD_COLLECTION_NUM_ITEMS=$numItems

	# the way this test creates conflicts is by having docs of the same keys on both buckets.
	# this is hackish and doesn't represent a true conflict.
	echo runCbWorkloadGenBucket _default._default "C1" "B0" $numItems $prefix
	echo runCbWorkloadGenBucket _default._default "C2" "B1" $numItems $prefix

	runCbWorkloadGenBucket "C1" "B0" $numItems $prefix &
	runCbWorkloadGenBucket "C2" "B1" $numItems $prefix &

	waitForBgJobs

	echo "RUNNING dataload DONE"
}

function lookForAbnormalities {
	grepForAbnormalities

	# verify no data-corruption
	validateBinaryFilteredIs0 "C1" "B0" "B1"
	validateBinaryFilteredIs0 "C2" "B1" "B0"

	# verify no datapool get failures
	validateDatapoolFailIs0 "C1" "B0" "B1"
	validateDatapoolFailIs0 "C2" "B1" "B0"

	validatePrometheusStatsCLogOtherErrors0 "C1" "B0" "B1"
	validatePrometheusStatsCLogOtherErrors0 "C2" "B1" "B0"
}

TOPOLOGY_RESTART_MSG="Restarting pipeline due to source topology change"
CERT_REQUIRED="tls: certificate required"

function runOneReplicationCycleAndPause {
	local timeIntervalSecs=5
	local checkInterval=10
	local maxChangeCnt=3
	local maxStableCnt=3
	local coolDownPeriod=1
	local checkInt
	testForClusterRun
	if (($? != 0)); then
		exit $?
	fi
	setupCluster
	if (($? != 0)); then
		exit $?
	fi
	setupTopologies
	if (($? != 0)); then
		exit $?
	fi
	# Shorten the amount of time pipeline restarts
	setInternalSettings "C1" "TopologyChangeCheckInterval=$checkInterval" "MaxTopologyChangeCountBeforeRestart=$maxChangeCnt" "MaxTopologyStableCountBeforeRestart=$maxStableCnt" "TopologySvcCooldownPeriodSec=$coolDownPeriod"
	sleep 5
	checkInternalSetting "C1" "TopologyChangeCheckInterval" "$checkInterval"
	checkInternalSetting "C1" "MaxTopologyChangeCountBeforeRestart" "$maxChangeCnt"
	checkInternalSetting "C1" "MaxTopologyStableCountBeforeRestart" "$maxStableCnt"
	checkInternalSetting "C1" "TopologySvcCooldownPeriodSec" "$coolDownPeriod"
	if (($? != 0)); then
		exit $?
	fi
	# Shorten the amount of time pipeline restarts
	setInternalSettings "C2" "TopologyChangeCheckInterval=$checkInterval" "MaxTopologyChangeCountBeforeRestart=$maxChangeCnt" "MaxTopologyStableCountBeforeRestart=$maxStableCnt" "TopologySvcCooldownPeriodSec=$coolDownPeriod"
	sleep 5
	checkInternalSetting "C2" "TopologyChangeCheckInterval" "$checkInterval"
	checkInternalSetting "C2" "MaxTopologyChangeCountBeforeRestart" "$maxChangeCnt"
	checkInternalSetting "C2" "MaxTopologyStableCountBeforeRestart" "$maxStableCnt"
	checkInternalSetting "C2" "TopologySvcCooldownPeriodSec" "$coolDownPeriod"
	if (($? != 0)); then
		exit $?
	fi
	# Wait for vbuckets and all the other things to propagate before XDCR provisioning
	sleep 5

	sleep 5
	setupCertsForTesting
	for clusterName in $(echo ${!CLUSTER_NAME_PORT_MAP[@]}); do
		setHybridClientCert "$clusterName"
	done

	createSecureRemoteClusterReference "C1" "C2" "${CLUSTER_ROOT_CERTIFICATE_MAP["C2"]}"
	createSecureRemoteClusterReference "C2" "C1" "${CLUSTER_ROOT_CERTIFICATE_MAP["C1"]}"
	sleep 1
	echo "Setting enableCrossClusterVersioning to true"
	setCrossClusterVersioningForBucket "C1" "B0"
	setCrossClusterVersioningForBucket "C2" "B1"

	runDataLoad "conflictX"
	echo "Waiting 5 seconds before checking item count"
	sleep 5
	checkItemCnt "C1" "B0" $CBWORKLOAD_COLLECTION_NUM_ITEMS
	checkItemCnt "C2" "B1" $CBWORKLOAD_COLLECTION_NUM_ITEMS

	sleep 1
	createBucketReplication "C1" "B0" "C2" "B1" BucketReplProperties
	createBucketReplication "C2" "B1" "C1" "B0" BucketReplProperties
	printGlobalScopeAndCollectionInfo

	echo "sleeping 20s for replication to finish"
	sleep 20

	checkChangesLeftInternal "C1" "B0" "C2" "B1"
	validateXDCRCheckpoints "C1"
	lookForAbnormalities
	checkChangesLeftInternal "C2" "B1" "C1" "B0"
	validateXDCRCheckpoints "C2"
	lookForAbnormalities

	numConflictDocsC1=$(getBucketItemCount "C1" "B2")
	numConflictDocsC2=$(getBucketItemCount "C2" "B2")
	echo "numConflictDocsC1=$numConflictDocsC1; numConflictDocsC2=$numConflictDocsC1"
	if (($numConflictDocsC1 <= $NumConflictDocsC1)) || (($numConflictDocsC2 <= $NumConflictDocsC2)); then
		echo "conflicts were not written"
		exit 1
	fi
	NumConflictDocsC1=$numConflictDocsC1
	NumConflictDocsC2=$numConflictDocsC2

	checkItemCnt "C1" "B0" $CBWORKLOAD_COLLECTION_NUM_ITEMS
	checkItemCnt "C2" "B1" $CBWORKLOAD_COLLECTION_NUM_ITEMS

	pauseReplication "C1" "B0" "C2" "B1"
	echo "Waiting 10 seconds for pipeline to really pause"
	sleep 10
	lookForAbnormalities
	pauseReplication "C2" "B1" "C1" "B0"
	echo "Waiting 10 seconds for pipeline to really pause"
	sleep 10
	lookForAbnormalities

	runDataLoad "conflictY"
	echo "Waiting 5 seconds before checking item count"
	sleep 5
	checkItemCnt "C1" "B0" $((2 * $CBWORKLOAD_COLLECTION_NUM_ITEMS))
	checkItemCnt "C2" "B1" $((2 * $CBWORKLOAD_COLLECTION_NUM_ITEMS))
}

C1LOOKINGC1PMSG="Discovered peers: map\\[127.0.0.1:9001"
C1LOOKINGC1PSECUREMSG="Discovered peers: map\\[127.0.0.1:19001"
CKPT_FOUND_DOCS="retrieving CheckpointsDocs request found"
CKPT_RETRIEVED="Received peerToPeer checkpoint data from node"

function runOneRebalanceCycle {
	local cycleCnt=$1
	local totalCycleCnt=$2
	local timeIntervalSecs=30

	# temporary disable for adding node
	for clusterName in $(echo ${!CLUSTER_NAME_PORT_MAP[@]}); do
		setDisableClientCert "$clusterName"
	done

	echo "Sleeping 10 secs before rebalancing node in"
	sleep 10

	echo "============================================================================"
	echo "Rebalance Cycle $(($cycleCnt + 1))/$(($totalCycleCnt)) STARTING"
	echo "============================================================================"
	addNodesIn
	startRebalancing "C1"
	echo "Rebalancing node in is completed"

	# turn it back on
	for clusterName in $(echo ${!CLUSTER_NAME_PORT_MAP[@]}); do
		setHybridClientCert "$clusterName"
	done

	setNodeToNodeEncryption "C1" "enable"
	setEncryptionLevel "C1" "all"

	echo "Sleeping before checking logs"
	sleep 15
	currentXdcrLogC1=$(getInternalNodeXdcrLog "C1")
	local currentPeerMsgsC1
	currentPeerMsgsC1=$(echo "$currentXdcrLogC1" | grep -c "$C1LOOKINGC1PMSG")
	currentPeerMsgsC1Secure=$(echo "$currentXdcrLogC1" | grep -c "$C1LOOKINGC1PSECUREMSG")

	echo "Restarting XDCR processes to trigger p2p discovery"
	killGoXdcr "C1"
	killGoXdcr "C1P"

	echo "Sleeping before checking logs"
	sleep 15

	validateInternalLogWithInstance "C1" "$C1LOOKINGC1PMSG" $(($currentPeerMsgsC1))
	validateInternalLogWithInstance "C1" "$C1LOOKINGC1PSECUREMSG" $(($currentPeerMsgsC1Secure + 1))

	echo "============================================================================"
	echo "Rebalance Cycle $(($cycleCnt + 1))/$(($totalCycleCnt)) DONE"
	echo "============================================================================"
}

function runReplicationResume {
	local logs
	logs=$(getInternalNodeXdcrLog "C1")
	local curCkptsFoundDocsCnt=$(echo "$logs" | grep -c "$CKPT_FOUND_DOCS")
	local curCkptRetrievedCnt=$(echo "$logs" | grep -c "$CKPT_RETRIEVED")

	resumeReplication "C1" "B0" "C2" "B1"
	resumeReplication "C2" "B1" "C1" "B0"
	echo "Waiting 20 seconds for resume to finish"
	sleep 20

	# Make sure we check to see that the message is displayed, but make sure that the count is not 0
	logs=$(getInternalNodeXdcrLog "C1")
	validateInternalLogWithInstance "C1" "$CKPT_FOUND_DOCS" $(($curCkptsFoundDocsCnt + 2)) $(($curCkptsFoundDocsCnt + 3))
	foundDocCount=$(echo "$logs" | grep "$CKPT_FOUND_DOCS" | grep -cv " 0 ")
	if (($foundDocCount == 0)); then
		echo "C1 unable to retrieve checkpoint docs... were they deleted?"
		exit 1
	fi

	validateInternalLogWithInstance "C1P" "$CKPT_RETRIEVED" $(($curCkptRetrievedCnt + 1)) $(($curCkptRetrievedCnt + 4))

	checkChangesLeftInternal "C1" "B0" "C2" "B1"
	validateXDCRCheckpoints "C1"
	lookForAbnormalities
	checkChangesLeftInternal "C2" "B1" "C1" "B0"
	validateXDCRCheckpoints "C2"
	lookForAbnormalities

	numConflictDocsC1=$(getBucketItemCount "C1" "B2")
	numConflictDocsC2=$(getBucketItemCount "C2" "B2")
	echo "numConflictDocsC1=$numConflictDocsC1; numConflictDocsC2=$numConflictDocsC1"
	if (($numConflictDocsC1 <= $NumConflictDocsC1)) || (($numConflictDocsC2 <= $NumConflictDocsC2)); then
		echo "conflicts were not written"
		exit 1
	fi
	NumConflictDocsC1=$numConflictDocsC1
	NumConflictDocsC2=$numConflictDocsC2

	checkItemCnt "C1" "B0" $((2 * $CBWORKLOAD_COLLECTION_NUM_ITEMS))
	checkItemCnt "C2" "B1" $((2 * $CBWORKLOAD_COLLECTION_NUM_ITEMS))

	lookForAbnormalities
}

function runTestCase {
	echo "========================================================================================================="
	echo "Conflict logging with multinode setup and security with client certs hybrid & N2N encryption set to 'all'"
	echo "========================================================================================================="

	# At this point, settings need to be restored IF the script was forced exited
	trap killAllBgJobs EXIT

	# Clear the logs at the beginning.
	# This is necessary because we later use 'grep' to search for specific log lines and count their occurrences.
	for clusterName in $(echo ${!CLUSTER_NAME_PORT_MAP[@]}); do
		clearInternalNodeXdcrLog "$clusterName"
	done

	runOneReplicationCycleAndPause
	runOneRebalanceCycle 1 1
	runReplicationResume

	# do the same thing again but now with clientCert disabled to make sure XDCR can create replication with updated
	# security setting
	# as long as replications can be created, p2p should be working
	cleanupBucketReplications
	cleanupRemoteClusterRefs
	cleanupBuckets
	# clean up requires turning off security
	echo "Turning off encryption..."
	setEncryptionLevel "C1" "control"
	sleep 5
	setNodeToNodeEncryption "C1" "disable"
	sleep 15

	# The expectation is that when client cert is disabled, the p2p will get a callback from the security
	# service and start sending and receiving requests using username/password instead
	for clusterName in $(echo ${!CLUSTER_NAME_PORT_MAP[@]}); do
		setDisableClientCert "$clusterName"
	done

	NumConflictDocsC1=0
	NumConflictDocsC2=0
	cleanupClientCertMaps # this is needed so createSecureRemoteClusterReference will not use client cert but will use pw
	runOneReplicationCycleAndPause
	runReplicationResume

	# do the same thing now but with regenerated client key where the keys have passphrase protection
	# as long as replications can be created, p2p should be working
	cleanupBucketReplications
	cleanupRemoteClusterRefs
	cleanupBuckets
	NumConflictDocsC1=0
	NumConflictDocsC2=0
	# clean up requires turning off security
	echo "Turning off encryption..."
	setEncryptionLevel "C1" "control"
	sleep 5
	setNodeToNodeEncryption "C1" "disable"
	sleep 15

	setupCertsForTesting -p "passphrase"
	for clusterName in $(echo ${!CLUSTER_NAME_PORT_MAP[@]}); do
		setHybridClientCert "$clusterName"
	done
	runOneReplicationCycleAndPause
	runReplicationResume

	for clusterName in $(echo ${!CLUSTER_NAME_PORT_MAP[@]}); do
		validateInternalLogWithInstance "$clusterName" "$CERT_REQUIRED" 0
	done

	lookForAbnormalities

	# clean up requires turning off security
	echo "Turning off encryption..."
	setEncryptionLevel "C1" "control"
	sleep 5
	setNodeToNodeEncryption "C1" "disable"
	sleep 15

	echo "============================================================================"
	echo "PASSED"
	echo "============================================================================"
	cleanupBucketReplications
	cleanupBuckets
	cleanupRemoteClusterRefs

	echo "Cleaning up topology..."
	restoreClusterBack "C1"
	regenerateCertificate "C1"
	cleanupClientCertMaps
	echo "Disabling client certs"
	for clusterName in $(echo ${!CLUSTER_NAME_PORT_MAP[@]}); do
		setDisableClientCert "$clusterName"
	done
}
