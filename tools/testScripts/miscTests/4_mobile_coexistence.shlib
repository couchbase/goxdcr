# Copyright 2023-Present Couchbase, Inc.
#
# Use of this software is governed by the Business Source License included in
# the file licenses/BSL-Couchbase.txt.  As of the Change Date specified in that
# file, in accordance with the Business Source License, use of this software
# will be governed by the Apache License, Version 2.0, included in the file
# licenses/APL2.txt.

CLUSTER_NAME_PORT_MAP=(["C1"]=9000 ["C2"]=9001)
CLUSTER_NAME_XDCR_PORT_MAP=(["C1"]=13000 ["C2"]=13001)
CLUSTER_NAME_BUCKET_MAP=(["C1"]="B1" ["C2"]="B2")

# Bucket properties
declare -A BucketProperty=(["ramQuotaMB"]=100)
declare -A Bucket1Properties=(["ramQuotaMB"]=100 ["CompressionMode"]="Active")
insertPropertyIntoBucketNamePropertyMap "B0" BucketProperty
insertPropertyIntoBucketNamePropertyMap "B1" Bucket1Properties
insertPropertyIntoBucketNamePropertyMap "B2" BucketProperty

declare -A BucketReplPropertiesWithMobile=(["replicationType"]="continuous" ["checkpointInterval"]=60 ["statsInterval"]=500 ["mobile"]="Active" ["filterBinary"]=true)

function testHlvShortCircuiting {
	# kill mobile import sim first, so that docs_written stat is accurate
	# when short circuiting is turned off.
	killMobileImportSim "C1" "B1"
	killMobileImportSim "C2" "B2"
	sleep 5

	# default is short-circuiting
	c1DocsWritten1=$(getPrometheusStat "C1" "B1" "B2" "xdcr_docs_written_total")
	c2DocsWritten1=$(getPrometheusStat "C2" "B2" "B1" "xdcr_docs_written_total")

	writeJSONDocument "C1" "B1" "shortCircuitDoc1" '{"foo":"bar"}'

	echo "Waiting for changes_left to go to 0 for 5s"
	sleep 5

	waitForChangesLeft0 "C1" "B1" "C2" "B2"
	waitForChangesLeft0 "C2" "B2" "C1" "B1"

	c1DocsWritten2=$(getPrometheusStat "C1" "B1" "B2" "xdcr_docs_written_total")
	c2DocsWritten2=$(getPrometheusStat "C2" "B2" "B1" "xdcr_docs_written_total")
	if [ $((c1DocsWritten2 - c1DocsWritten1)) -ne 1 ] || [ $((c2DocsWritten2 - c2DocsWritten1)) -ne 0 ]; then
		echo "FAILED: docs_written difference expected is one in C1 and 0 in C2 due to short-circuiting"
		exit 1
	fi

	# turn short-circuiting off. There will be a C2 -> C1 write because C1's doc
	# wil not have xattr and C2's doc will have HLV as xattr (last step of conflict resolution).
	setReplicationSettings "C1" "B1" "C2" "B2" "disableHlvBasedShortCircuit=true"
	setReplicationSettings "C2" "B2" "C1" "B1" "disableHlvBasedShortCircuit=true"

	writeJSONDocument "C1" "B1" "shortCircuitDoc2" '{"foo":"bar"}'

	echo "Waiting for changes_left to go to 0 for 5s"
	sleep 5

	waitForChangesLeft0 "C1" "B1" "C2" "B2"
	waitForChangesLeft0 "C2" "B2" "C1" "B1"

	c1DocsWritten3=$(getPrometheusStat "C1" "B1" "B2" "xdcr_docs_written_total")
	c2DocsWritten3=$(getPrometheusStat "C2" "B2" "B1" "xdcr_docs_written_total")
	if [ $((c1DocsWritten3 - c1DocsWritten2)) -ne 1 ] || [ $((c2DocsWritten3 - c2DocsWritten2)) -ne 1 ]; then
		echo "FAILED: docs_written difference expected is one due to no short-circuiting"
		exit 1
	fi

	# turn short-circuiting on again
	setReplicationSettings "C1" "B1" "C2" "B2" "disableHlvBasedShortCircuit=false"
	setReplicationSettings "C2" "B2" "C1" "B1" "disableHlvBasedShortCircuit=false"

	writeJSONDocument "C1" "B1" "shortCircuitDoc3" '{"foo":"bar"}'

	echo "Waiting for changes_left to go to 0 for 5s"
	sleep 5

	waitForChangesLeft0 "C1" "B1" "C2" "B2"
	waitForChangesLeft0 "C2" "B2" "C1" "B1"

	c1DocsWritten4=$(getPrometheusStat "C1" "B1" "B2" "xdcr_docs_written_total")
	c2DocsWritten4=$(getPrometheusStat "C2" "B2" "B1" "xdcr_docs_written_total")
	if [ $((c1DocsWritten4 - c1DocsWritten3)) -ne 1 ] || [ $((c2DocsWritten4 - c2DocsWritten3)) -ne 0 ]; then
		echo "FAILED: docs_written difference expected is one for C1 and 0 for C2 due to short-circuiting"
		exit 1
	fi
}

function verifyPromStats {
	# verify no data-corruption
	validateBinaryFilteredIs0 "C1" "B1" "B2"
	validateBinaryFilteredIs0 "C2" "B2" "B1"

	# verify no datapool get failures
	validateDatapoolFailIs0 "C1" "B1" "B2"
	validateDatapoolFailIs0 "C2" "B2" "B1"
}

function testReplicationSettings {
	echo "=========== testReplicationSettings =========="
	echo "Creating replication with mobile=Active"
	setBucket "C1" "B1" "enableCrossClusterVersioning" "true"
	setBucket "C2" "B2" "enableCrossClusterVersioning" "true"
	sleep 5
	createBucketReplication "C1" "B1" "C2" "B2" BucketReplPropertiesWithMobile

	echo "Checking replication setting mobileCompatible=Active"
	mobile=$(getReplicationSettings "C1" "B1" "C2" "B2" | jq .mobile)
	if [[ "$mobile" != \"Active\" ]]; then
		echo "mobile should be \"Active\" but got \"$mobile\""
		exit 1
	fi
	local expected=0

	writeJSONDocument "C1" "B1" "_sync:doc1" '{"foo":"bar"}'
	writeJSONDocument "C1" "B1" "_sync:att:doc1" '{"foo":"bar"}'
	sleep 20
	waitForChangesLeft0 "C1" "B1" "C2" "B2"
	# Should filter 1 doc
	expected=$(($expected + 1))
	local filtered=$(getStats "C1" "B1" "C2" "B2" "docs_filtered")
	if ! (($filtered == $expected)); then
		echo "Expect docs_filtered to be $expected but got $filtered"
		exit 1
	fi

	echo "Changing replication setting to mobile=Off"
	setReplicationSettings "C1" "B1" "C2" "B2" "mobile=Off"
	echo "Checking replication setting mobile=Off"
	mobile=$(getReplicationSettings "C1" "B1" "C2" "B2" | jq .mobile)
	if [[ "$mobile" != \"Off\" ]]; then
		echo "mobile should be \"Off\" but got $mobile"
		exit 1
	fi

	echo "sleeping 10 seconds for pipeline to restart"
	sleep 10

	writeJSONDocument "C1" "B1" "_sync:doc2" '{"foo":"bar"}'
	writeJSONDocument "C1" "B1" "_sync:att:doc2" '{"foo":"bar"}'
	sleep 20
	waitForChangesLeft0 "C1" "B1" "C2" "B2"
	local filtered=$(getStats "C1" "B1" "C2" "B2" "docs_filtered")
	# Both should be replicated since mobile=off
	if ! (($filtered == $expected)); then
		echo "Expect docs_filtered to be $expected but got $filtered"
		exit 1
	fi

	echo "Changing replication setting to mobile=Active"
	setReplicationSettings "C1" "B1" "C2" "B2" "mobile=Active"
	echo "Checking replication setting mobile=Active"
	mobile=$(getReplicationSettings "C1" "B1" "C2" "B2" | jq .mobile)
	if [[ "$mobile" != \"Active\" ]]; then
		echo "mobile should be \"Active\" but got $mobile"
		exit 1
	fi

	echo "sleeping 10 seconds for pipeline to restart"
	sleep 10

	writeJSONDocument "C1" "B1" "_sync:doc3" '{"foo":"bar"}'
	writeJSONDocument "C1" "B1" "_sync:att:doc3" '{"foo":"bar"}'
	sleep 15
	waitForChangesLeft0 "C1" "B1" "C2" "B2"
	# Should filter 1 doc
	expected=$(($expected + 1))
	local filtered=$(getStats "C1" "B1" "C2" "B2" "docs_filtered")
	# Both should be replicated since mobile=off
	if ! (($filtered == $expected)); then
		echo "Expect docs_filtered to be $expected but got $filtered"
		exit 1
	fi
	cleanupBucketReplications
}

function testMobileHlv {
	echo "=========== testMobileHlv =========="

	echo "Setting enableCrossClusterVersioning to true"
	setCrossClusterVersioningForBucket "C1" "B1"
	setCrossClusterVersioningForBucket "C2" "B2"

	enableMobileImportSimIfPresent "C1" "B1"
	enableMobileImportSimIfPresent "C2" "B2"

	createBucketReplication "C1" "B1" "C2" "B2" BucketReplPropertiesWithMobile
	createBucketReplication "C2" "B2" "C1" "B1" BucketReplPropertiesWithMobile

	# Insert
	writeJSONDocument "C1" "B1" "mobile1" '{"foo":"bar"}'
	writeJSONDocument "C1" "B1" "mobile2" '{"foo":"bar"}'
	waitForChangesLeft0 "C1" "B1" "C2" "B2"
	waitForChangesLeft0 "C2" "B2" "C1" "B1"
	# Update
	writeJSONDocument "C1" "B1" "mobile1" '{"foo2":"bar2"}'
	writeJSONDocument "C1" "B1" "mobile2" '{"foo2":"bar2"}'
	waitForChangesLeft0 "C1" "B1" "C2" "B2"
	# Update at C2.B2
	writeJSONDocument "C2" "B2" "mobile1" '{"foo3":"bar3"}'
	writeJSONDocument "C2" "B2" "mobile2" '{"foo3":"bar3"}'
	waitForChangesLeft0 "C2" "B2" "C1" "B1"
	waitForChangesLeft0 "C2" "B2" "C1" "B1"
	grepForAbnormalities

	echo runCbWorkloadGenBucket "C1" "B1"
	runCbWorkloadGenBucket "C1" "B1" &
	echo runCbWorkloadGenBucket "C1" "B1" 10000 "common"
	runCbWorkloadGenBucket "C1" "B1" 10000 "common" &

	echo runCbWorkloadGenBucket "C2" "B2"
	runCbWorkloadGenBucket "C2" "B2" &
	echo runCbWorkloadGenBucket "C2" "B2" 10000 "common"
	runCbWorkloadGenBucket "C2" "B2" 10000 "common" &

	echo "sleeping 10 seconds for cbworkloadgen to finish"
	sleep 10

	sleepTime=20
	echo "Sleep $sleepTime seconds to wait for replication to finish"
	sleep $sleepTime

	waitForChangesLeft0 "C1" "B1" "C2" "B2"
	waitForChangesLeft0 "C2" "B2" "C1" "B1"

	grepForAbnormalities

	verifyPromStats
}

function runTestCase {
	echo "============================================================================"
	echo "Running mobile coexistence test case"
	echo "============================================================================"
	testForClusterRun
	if (($? != 0)); then
		exit $?
	fi
	setupTopologies
	if (($? != 0)); then
		exit $?
	fi

	createRemoteClusterReference "C1" "C2"
	createRemoteClusterReference "C2" "C1"
	sleep 1
	testReplicationSettings
	testMobileHlv
	testHlvShortCircuiting

	grepForAbnormalities

	verifyPromStats

	echo "============================================================================"
	echo "Mobile coexistence test case passed"
	echo "============================================================================"
	cleanupBuckets
	cleanupBucketReplications
	cleanupRemoteClusterRefs
}
