// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	base "github.com/couchbase/goxdcr/base"

	mock "github.com/stretchr/testify/mock"
)

// Filter is an autogenerated mock type for the Filter type
type Filter struct {
	mock.Mock
}

// FilterUprEvent provides a mock function with given fields: wrappedUprEvent
func (_m *Filter) FilterUprEvent(wrappedUprEvent *base.WrappedUprEvent) (bool, error, string, int64) {
	ret := _m.Called(wrappedUprEvent)

	var r0 bool
	var r1 error
	var r2 string
	var r3 int64
	if rf, ok := ret.Get(0).(func(*base.WrappedUprEvent) (bool, error, string, int64)); ok {
		return rf(wrappedUprEvent)
	}
	if rf, ok := ret.Get(0).(func(*base.WrappedUprEvent) bool); ok {
		r0 = rf(wrappedUprEvent)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(*base.WrappedUprEvent) error); ok {
		r1 = rf(wrappedUprEvent)
	} else {
		r1 = ret.Error(1)
	}

	if rf, ok := ret.Get(2).(func(*base.WrappedUprEvent) string); ok {
		r2 = rf(wrappedUprEvent)
	} else {
		r2 = ret.Get(2).(string)
	}

	if rf, ok := ret.Get(3).(func(*base.WrappedUprEvent) int64); ok {
		r3 = rf(wrappedUprEvent)
	} else {
		r3 = ret.Get(3).(int64)
	}

	return r0, r1, r2, r3
}

// SetShouldSkipBinaryDocs provides a mock function with given fields: val
func (_m *Filter) SetShouldSkipBinaryDocs(val bool) {
	_m.Called(val)
}

// SetShouldSkipUncommittedTxn provides a mock function with given fields: val
func (_m *Filter) SetShouldSkipUncommittedTxn(val bool) {
	_m.Called(val)
}

type mockConstructorTestingTNewFilter interface {
	mock.TestingT
	Cleanup(func())
}

// NewFilter creates a new instance of Filter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewFilter(t mockConstructorTestingTNewFilter) *Filter {
	mock := &Filter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
