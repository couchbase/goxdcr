// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	base "github.com/couchbase/goxdcr/base"

	memcached "github.com/couchbase/gomemcached/client"

	mock "github.com/stretchr/testify/mock"
)

// FilterUtils is an autogenerated mock type for the FilterUtils type
type FilterUtils struct {
	mock.Mock
}

type FilterUtils_Expecter struct {
	mock *mock.Mock
}

func (_m *FilterUtils) EXPECT() *FilterUtils_Expecter {
	return &FilterUtils_Expecter{mock: &_m.Mock}
}

// CheckForTransactionXattrsInUprEvent provides a mock function with given fields: uprEvent, dp, slicesToBeReleased, needToFilterBody
func (_m *FilterUtils) CheckForTransactionXattrsInUprEvent(uprEvent *memcached.UprEvent, dp base.DataPool, slicesToBeReleased *[][]byte, needToFilterBody bool) (bool, []byte, int, error, string, int64, []byte) {
	ret := _m.Called(uprEvent, dp, slicesToBeReleased, needToFilterBody)

	if len(ret) == 0 {
		panic("no return value specified for CheckForTransactionXattrsInUprEvent")
	}

	var r0 bool
	var r1 []byte
	var r2 int
	var r3 error
	var r4 string
	var r5 int64
	var r6 []byte
	if rf, ok := ret.Get(0).(func(*memcached.UprEvent, base.DataPool, *[][]byte, bool) (bool, []byte, int, error, string, int64, []byte)); ok {
		return rf(uprEvent, dp, slicesToBeReleased, needToFilterBody)
	}
	if rf, ok := ret.Get(0).(func(*memcached.UprEvent, base.DataPool, *[][]byte, bool) bool); ok {
		r0 = rf(uprEvent, dp, slicesToBeReleased, needToFilterBody)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(*memcached.UprEvent, base.DataPool, *[][]byte, bool) []byte); ok {
		r1 = rf(uprEvent, dp, slicesToBeReleased, needToFilterBody)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]byte)
		}
	}

	if rf, ok := ret.Get(2).(func(*memcached.UprEvent, base.DataPool, *[][]byte, bool) int); ok {
		r2 = rf(uprEvent, dp, slicesToBeReleased, needToFilterBody)
	} else {
		r2 = ret.Get(2).(int)
	}

	if rf, ok := ret.Get(3).(func(*memcached.UprEvent, base.DataPool, *[][]byte, bool) error); ok {
		r3 = rf(uprEvent, dp, slicesToBeReleased, needToFilterBody)
	} else {
		r3 = ret.Error(3)
	}

	if rf, ok := ret.Get(4).(func(*memcached.UprEvent, base.DataPool, *[][]byte, bool) string); ok {
		r4 = rf(uprEvent, dp, slicesToBeReleased, needToFilterBody)
	} else {
		r4 = ret.Get(4).(string)
	}

	if rf, ok := ret.Get(5).(func(*memcached.UprEvent, base.DataPool, *[][]byte, bool) int64); ok {
		r5 = rf(uprEvent, dp, slicesToBeReleased, needToFilterBody)
	} else {
		r5 = ret.Get(5).(int64)
	}

	if rf, ok := ret.Get(6).(func(*memcached.UprEvent, base.DataPool, *[][]byte, bool) []byte); ok {
		r6 = rf(uprEvent, dp, slicesToBeReleased, needToFilterBody)
	} else {
		if ret.Get(6) != nil {
			r6 = ret.Get(6).([]byte)
		}
	}

	return r0, r1, r2, r3, r4, r5, r6
}

// FilterUtils_CheckForTransactionXattrsInUprEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckForTransactionXattrsInUprEvent'
type FilterUtils_CheckForTransactionXattrsInUprEvent_Call struct {
	*mock.Call
}

// CheckForTransactionXattrsInUprEvent is a helper method to define mock.On call
//   - uprEvent *memcached.UprEvent
//   - dp base.DataPool
//   - slicesToBeReleased *[][]byte
//   - needToFilterBody bool
func (_e *FilterUtils_Expecter) CheckForTransactionXattrsInUprEvent(uprEvent interface{}, dp interface{}, slicesToBeReleased interface{}, needToFilterBody interface{}) *FilterUtils_CheckForTransactionXattrsInUprEvent_Call {
	return &FilterUtils_CheckForTransactionXattrsInUprEvent_Call{Call: _e.mock.On("CheckForTransactionXattrsInUprEvent", uprEvent, dp, slicesToBeReleased, needToFilterBody)}
}

func (_c *FilterUtils_CheckForTransactionXattrsInUprEvent_Call) Run(run func(uprEvent *memcached.UprEvent, dp base.DataPool, slicesToBeReleased *[][]byte, needToFilterBody bool)) *FilterUtils_CheckForTransactionXattrsInUprEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*memcached.UprEvent), args[1].(base.DataPool), args[2].(*[][]byte), args[3].(bool))
	})
	return _c
}

func (_c *FilterUtils_CheckForTransactionXattrsInUprEvent_Call) Return(hasTxnXattrs bool, body []byte, endBodyPos int, err error, additionalErrDesc string, totalFailedCnt int64, uncompressedUprValue []byte) *FilterUtils_CheckForTransactionXattrsInUprEvent_Call {
	_c.Call.Return(hasTxnXattrs, body, endBodyPos, err, additionalErrDesc, totalFailedCnt, uncompressedUprValue)
	return _c
}

func (_c *FilterUtils_CheckForTransactionXattrsInUprEvent_Call) RunAndReturn(run func(*memcached.UprEvent, base.DataPool, *[][]byte, bool) (bool, []byte, int, error, string, int64, []byte)) *FilterUtils_CheckForTransactionXattrsInUprEvent_Call {
	_c.Call.Return(run)
	return _c
}

// NewDataPool provides a mock function with given fields:
func (_m *FilterUtils) NewDataPool() base.DataPool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for NewDataPool")
	}

	var r0 base.DataPool
	if rf, ok := ret.Get(0).(func() base.DataPool); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(base.DataPool)
		}
	}

	return r0
}

// FilterUtils_NewDataPool_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewDataPool'
type FilterUtils_NewDataPool_Call struct {
	*mock.Call
}

// NewDataPool is a helper method to define mock.On call
func (_e *FilterUtils_Expecter) NewDataPool() *FilterUtils_NewDataPool_Call {
	return &FilterUtils_NewDataPool_Call{Call: _e.mock.On("NewDataPool")}
}

func (_c *FilterUtils_NewDataPool_Call) Run(run func()) *FilterUtils_NewDataPool_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *FilterUtils_NewDataPool_Call) Return(_a0 base.DataPool) *FilterUtils_NewDataPool_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FilterUtils_NewDataPool_Call) RunAndReturn(run func() base.DataPool) *FilterUtils_NewDataPool_Call {
	_c.Call.Return(run)
	return _c
}

// ProcessUprEventForFiltering provides a mock function with given fields: uprEvent, body, endBodyPos, dp, flags, slicesBuf
func (_m *FilterUtils) ProcessUprEventForFiltering(uprEvent *memcached.UprEvent, body []byte, endBodyPos int, dp base.DataPool, flags base.FilterFlagType, slicesBuf *[][]byte) ([]byte, error, string, int64) {
	ret := _m.Called(uprEvent, body, endBodyPos, dp, flags, slicesBuf)

	if len(ret) == 0 {
		panic("no return value specified for ProcessUprEventForFiltering")
	}

	var r0 []byte
	var r1 error
	var r2 string
	var r3 int64
	if rf, ok := ret.Get(0).(func(*memcached.UprEvent, []byte, int, base.DataPool, base.FilterFlagType, *[][]byte) ([]byte, error, string, int64)); ok {
		return rf(uprEvent, body, endBodyPos, dp, flags, slicesBuf)
	}
	if rf, ok := ret.Get(0).(func(*memcached.UprEvent, []byte, int, base.DataPool, base.FilterFlagType, *[][]byte) []byte); ok {
		r0 = rf(uprEvent, body, endBodyPos, dp, flags, slicesBuf)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(*memcached.UprEvent, []byte, int, base.DataPool, base.FilterFlagType, *[][]byte) error); ok {
		r1 = rf(uprEvent, body, endBodyPos, dp, flags, slicesBuf)
	} else {
		r1 = ret.Error(1)
	}

	if rf, ok := ret.Get(2).(func(*memcached.UprEvent, []byte, int, base.DataPool, base.FilterFlagType, *[][]byte) string); ok {
		r2 = rf(uprEvent, body, endBodyPos, dp, flags, slicesBuf)
	} else {
		r2 = ret.Get(2).(string)
	}

	if rf, ok := ret.Get(3).(func(*memcached.UprEvent, []byte, int, base.DataPool, base.FilterFlagType, *[][]byte) int64); ok {
		r3 = rf(uprEvent, body, endBodyPos, dp, flags, slicesBuf)
	} else {
		r3 = ret.Get(3).(int64)
	}

	return r0, r1, r2, r3
}

// FilterUtils_ProcessUprEventForFiltering_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessUprEventForFiltering'
type FilterUtils_ProcessUprEventForFiltering_Call struct {
	*mock.Call
}

// ProcessUprEventForFiltering is a helper method to define mock.On call
//   - uprEvent *memcached.UprEvent
//   - body []byte
//   - endBodyPos int
//   - dp base.DataPool
//   - flags base.FilterFlagType
//   - slicesBuf *[][]byte
func (_e *FilterUtils_Expecter) ProcessUprEventForFiltering(uprEvent interface{}, body interface{}, endBodyPos interface{}, dp interface{}, flags interface{}, slicesBuf interface{}) *FilterUtils_ProcessUprEventForFiltering_Call {
	return &FilterUtils_ProcessUprEventForFiltering_Call{Call: _e.mock.On("ProcessUprEventForFiltering", uprEvent, body, endBodyPos, dp, flags, slicesBuf)}
}

func (_c *FilterUtils_ProcessUprEventForFiltering_Call) Run(run func(uprEvent *memcached.UprEvent, body []byte, endBodyPos int, dp base.DataPool, flags base.FilterFlagType, slicesBuf *[][]byte)) *FilterUtils_ProcessUprEventForFiltering_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*memcached.UprEvent), args[1].([]byte), args[2].(int), args[3].(base.DataPool), args[4].(base.FilterFlagType), args[5].(*[][]byte))
	})
	return _c
}

func (_c *FilterUtils_ProcessUprEventForFiltering_Call) Return(_a0 []byte, _a1 error, _a2 string, _a3 int64) *FilterUtils_ProcessUprEventForFiltering_Call {
	_c.Call.Return(_a0, _a1, _a2, _a3)
	return _c
}

func (_c *FilterUtils_ProcessUprEventForFiltering_Call) RunAndReturn(run func(*memcached.UprEvent, []byte, int, base.DataPool, base.FilterFlagType, *[][]byte) ([]byte, error, string, int64)) *FilterUtils_ProcessUprEventForFiltering_Call {
	_c.Call.Return(run)
	return _c
}

// NewFilterUtils creates a new instance of FilterUtils. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFilterUtils(t interface {
	mock.TestingT
	Cleanup(func())
}) *FilterUtils {
	mock := &FilterUtils{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
