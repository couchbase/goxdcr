// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	base "github.com/couchbase/goxdcr/base/helpers"
	mock "github.com/stretchr/testify/mock"

	net "net"
)

// DnsSrvHelperIface is an autogenerated mock type for the DnsSrvHelperIface type
type DnsSrvHelperIface struct {
	mock.Mock
}

type DnsSrvHelperIface_Expecter struct {
	mock *mock.Mock
}

func (_m *DnsSrvHelperIface) EXPECT() *DnsSrvHelperIface_Expecter {
	return &DnsSrvHelperIface_Expecter{mock: &_m.Mock}
}

// DnsSrvLookup provides a mock function with given fields: hostname
func (_m *DnsSrvHelperIface) DnsSrvLookup(hostname string) ([]*net.SRV, base.SrvRecordsType, error) {
	ret := _m.Called(hostname)

	if len(ret) == 0 {
		panic("no return value specified for DnsSrvLookup")
	}

	var r0 []*net.SRV
	var r1 base.SrvRecordsType
	var r2 error
	if rf, ok := ret.Get(0).(func(string) ([]*net.SRV, base.SrvRecordsType, error)); ok {
		return rf(hostname)
	}
	if rf, ok := ret.Get(0).(func(string) []*net.SRV); ok {
		r0 = rf(hostname)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*net.SRV)
		}
	}

	if rf, ok := ret.Get(1).(func(string) base.SrvRecordsType); ok {
		r1 = rf(hostname)
	} else {
		r1 = ret.Get(1).(base.SrvRecordsType)
	}

	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(hostname)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// DnsSrvHelperIface_DnsSrvLookup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DnsSrvLookup'
type DnsSrvHelperIface_DnsSrvLookup_Call struct {
	*mock.Call
}

// DnsSrvLookup is a helper method to define mock.On call
//   - hostname string
func (_e *DnsSrvHelperIface_Expecter) DnsSrvLookup(hostname interface{}) *DnsSrvHelperIface_DnsSrvLookup_Call {
	return &DnsSrvHelperIface_DnsSrvLookup_Call{Call: _e.mock.On("DnsSrvLookup", hostname)}
}

func (_c *DnsSrvHelperIface_DnsSrvLookup_Call) Run(run func(hostname string)) *DnsSrvHelperIface_DnsSrvLookup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *DnsSrvHelperIface_DnsSrvLookup_Call) Return(srvEntries []*net.SRV, secureType base.SrvRecordsType, err error) *DnsSrvHelperIface_DnsSrvLookup_Call {
	_c.Call.Return(srvEntries, secureType, err)
	return _c
}

func (_c *DnsSrvHelperIface_DnsSrvLookup_Call) RunAndReturn(run func(string) ([]*net.SRV, base.SrvRecordsType, error)) *DnsSrvHelperIface_DnsSrvLookup_Call {
	_c.Call.Return(run)
	return _c
}

// NewDnsSrvHelperIface creates a new instance of DnsSrvHelperIface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDnsSrvHelperIface(t interface {
	mock.TestingT
	Cleanup(func())
}) *DnsSrvHelperIface {
	mock := &DnsSrvHelperIface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
