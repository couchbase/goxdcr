// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	base "github.com/couchbase/goxdcr/base"
	metadata "github.com/couchbase/goxdcr/metadata"

	mock "github.com/stretchr/testify/mock"
)

// ConnectionPreCheck is an autogenerated mock type for the ConnectionPreCheck type
type ConnectionPreCheck struct {
	mock.Mock
}

type ConnectionPreCheck_Expecter struct {
	mock *mock.Mock
}

func (_m *ConnectionPreCheck) EXPECT() *ConnectionPreCheck_Expecter {
	return &ConnectionPreCheck_Expecter{mock: &_m.Mock}
}

// RetrieveConnectionPreCheckResult provides a mock function with given fields: _a0
func (_m *ConnectionPreCheck) RetrieveConnectionPreCheckResult(_a0 string) (base.ConnectionErrMapType, bool, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveConnectionPreCheckResult")
	}

	var r0 base.ConnectionErrMapType
	var r1 bool
	var r2 error
	if rf, ok := ret.Get(0).(func(string) (base.ConnectionErrMapType, bool, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) base.ConnectionErrMapType); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(base.ConnectionErrMapType)
		}
	}

	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(_a0)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ConnectionPreCheck_RetrieveConnectionPreCheckResult_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetrieveConnectionPreCheckResult'
type ConnectionPreCheck_RetrieveConnectionPreCheckResult_Call struct {
	*mock.Call
}

// RetrieveConnectionPreCheckResult is a helper method to define mock.On call
//   - _a0 string
func (_e *ConnectionPreCheck_Expecter) RetrieveConnectionPreCheckResult(_a0 interface{}) *ConnectionPreCheck_RetrieveConnectionPreCheckResult_Call {
	return &ConnectionPreCheck_RetrieveConnectionPreCheckResult_Call{Call: _e.mock.On("RetrieveConnectionPreCheckResult", _a0)}
}

func (_c *ConnectionPreCheck_RetrieveConnectionPreCheckResult_Call) Run(run func(_a0 string)) *ConnectionPreCheck_RetrieveConnectionPreCheckResult_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ConnectionPreCheck_RetrieveConnectionPreCheckResult_Call) Return(_a0 base.ConnectionErrMapType, _a1 bool, _a2 error) *ConnectionPreCheck_RetrieveConnectionPreCheckResult_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ConnectionPreCheck_RetrieveConnectionPreCheckResult_Call) RunAndReturn(run func(string) (base.ConnectionErrMapType, bool, error)) *ConnectionPreCheck_RetrieveConnectionPreCheckResult_Call {
	_c.Call.Return(run)
	return _c
}

// SendConnectionPreCheckRequest provides a mock function with given fields: _a0, _a1
func (_m *ConnectionPreCheck) SendConnectionPreCheckRequest(_a0 *metadata.RemoteClusterReference, _a1 string) {
	_m.Called(_a0, _a1)
}

// ConnectionPreCheck_SendConnectionPreCheckRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendConnectionPreCheckRequest'
type ConnectionPreCheck_SendConnectionPreCheckRequest_Call struct {
	*mock.Call
}

// SendConnectionPreCheckRequest is a helper method to define mock.On call
//   - _a0 *metadata.RemoteClusterReference
//   - _a1 string
func (_e *ConnectionPreCheck_Expecter) SendConnectionPreCheckRequest(_a0 interface{}, _a1 interface{}) *ConnectionPreCheck_SendConnectionPreCheckRequest_Call {
	return &ConnectionPreCheck_SendConnectionPreCheckRequest_Call{Call: _e.mock.On("SendConnectionPreCheckRequest", _a0, _a1)}
}

func (_c *ConnectionPreCheck_SendConnectionPreCheckRequest_Call) Run(run func(_a0 *metadata.RemoteClusterReference, _a1 string)) *ConnectionPreCheck_SendConnectionPreCheckRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*metadata.RemoteClusterReference), args[1].(string))
	})
	return _c
}

func (_c *ConnectionPreCheck_SendConnectionPreCheckRequest_Call) Return() *ConnectionPreCheck_SendConnectionPreCheckRequest_Call {
	_c.Call.Return()
	return _c
}

func (_c *ConnectionPreCheck_SendConnectionPreCheckRequest_Call) RunAndReturn(run func(*metadata.RemoteClusterReference, string)) *ConnectionPreCheck_SendConnectionPreCheckRequest_Call {
	_c.Call.Return(run)
	return _c
}

// NewConnectionPreCheck creates a new instance of ConnectionPreCheck. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConnectionPreCheck(t interface {
	mock.TestingT
	Cleanup(func())
}) *ConnectionPreCheck {
	mock := &ConnectionPreCheck{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
