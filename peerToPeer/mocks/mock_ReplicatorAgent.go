// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	metadata "github.com/couchbase/goxdcr/metadata"
	mock "github.com/stretchr/testify/mock"

	peerToPeer "github.com/couchbase/goxdcr/peerToPeer"
)

// ReplicatorAgent is an autogenerated mock type for the ReplicatorAgent type
type ReplicatorAgent struct {
	mock.Mock
}

type ReplicatorAgent_Expecter struct {
	mock *mock.Mock
}

func (_m *ReplicatorAgent) EXPECT() *ReplicatorAgent_Expecter {
	return &ReplicatorAgent_Expecter{mock: &_m.Mock}
}

// GetAndClearInfoToReplicate provides a mock function with given fields:
func (_m *ReplicatorAgent) GetAndClearInfoToReplicate() (*metadata.ReplicationSpecification, *peerToPeer.VBPeriodicReplicateReq, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAndClearInfoToReplicate")
	}

	var r0 *metadata.ReplicationSpecification
	var r1 *peerToPeer.VBPeriodicReplicateReq
	var r2 error
	if rf, ok := ret.Get(0).(func() (*metadata.ReplicationSpecification, *peerToPeer.VBPeriodicReplicateReq, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *metadata.ReplicationSpecification); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*metadata.ReplicationSpecification)
		}
	}

	if rf, ok := ret.Get(1).(func() *peerToPeer.VBPeriodicReplicateReq); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*peerToPeer.VBPeriodicReplicateReq)
		}
	}

	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ReplicatorAgent_GetAndClearInfoToReplicate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAndClearInfoToReplicate'
type ReplicatorAgent_GetAndClearInfoToReplicate_Call struct {
	*mock.Call
}

// GetAndClearInfoToReplicate is a helper method to define mock.On call
func (_e *ReplicatorAgent_Expecter) GetAndClearInfoToReplicate() *ReplicatorAgent_GetAndClearInfoToReplicate_Call {
	return &ReplicatorAgent_GetAndClearInfoToReplicate_Call{Call: _e.mock.On("GetAndClearInfoToReplicate")}
}

func (_c *ReplicatorAgent_GetAndClearInfoToReplicate_Call) Run(run func()) *ReplicatorAgent_GetAndClearInfoToReplicate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ReplicatorAgent_GetAndClearInfoToReplicate_Call) Return(_a0 *metadata.ReplicationSpecification, _a1 *peerToPeer.VBPeriodicReplicateReq, _a2 error) *ReplicatorAgent_GetAndClearInfoToReplicate_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ReplicatorAgent_GetAndClearInfoToReplicate_Call) RunAndReturn(run func() (*metadata.ReplicationSpecification, *peerToPeer.VBPeriodicReplicateReq, error)) *ReplicatorAgent_GetAndClearInfoToReplicate_Call {
	_c.Call.Return(run)
	return _c
}

// RequestImmediateDataGather provides a mock function with given fields:
func (_m *ReplicatorAgent) RequestImmediateDataGather() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for RequestImmediateDataGather")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReplicatorAgent_RequestImmediateDataGather_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RequestImmediateDataGather'
type ReplicatorAgent_RequestImmediateDataGather_Call struct {
	*mock.Call
}

// RequestImmediateDataGather is a helper method to define mock.On call
func (_e *ReplicatorAgent_Expecter) RequestImmediateDataGather() *ReplicatorAgent_RequestImmediateDataGather_Call {
	return &ReplicatorAgent_RequestImmediateDataGather_Call{Call: _e.mock.On("RequestImmediateDataGather")}
}

func (_c *ReplicatorAgent_RequestImmediateDataGather_Call) Run(run func()) *ReplicatorAgent_RequestImmediateDataGather_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ReplicatorAgent_RequestImmediateDataGather_Call) Return(_a0 error) *ReplicatorAgent_RequestImmediateDataGather_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ReplicatorAgent_RequestImmediateDataGather_Call) RunAndReturn(run func() error) *ReplicatorAgent_RequestImmediateDataGather_Call {
	_c.Call.Return(run)
	return _c
}

// SetUpdatedSpecAsync provides a mock function with given fields: spec, cbFunc
func (_m *ReplicatorAgent) SetUpdatedSpecAsync(spec *metadata.ReplicationSpecification, cbFunc func()) {
	_m.Called(spec, cbFunc)
}

// ReplicatorAgent_SetUpdatedSpecAsync_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetUpdatedSpecAsync'
type ReplicatorAgent_SetUpdatedSpecAsync_Call struct {
	*mock.Call
}

// SetUpdatedSpecAsync is a helper method to define mock.On call
//   - spec *metadata.ReplicationSpecification
//   - cbFunc func()
func (_e *ReplicatorAgent_Expecter) SetUpdatedSpecAsync(spec interface{}, cbFunc interface{}) *ReplicatorAgent_SetUpdatedSpecAsync_Call {
	return &ReplicatorAgent_SetUpdatedSpecAsync_Call{Call: _e.mock.On("SetUpdatedSpecAsync", spec, cbFunc)}
}

func (_c *ReplicatorAgent_SetUpdatedSpecAsync_Call) Run(run func(spec *metadata.ReplicationSpecification, cbFunc func())) *ReplicatorAgent_SetUpdatedSpecAsync_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*metadata.ReplicationSpecification), args[1].(func()))
	})
	return _c
}

func (_c *ReplicatorAgent_SetUpdatedSpecAsync_Call) Return() *ReplicatorAgent_SetUpdatedSpecAsync_Call {
	_c.Call.Return()
	return _c
}

func (_c *ReplicatorAgent_SetUpdatedSpecAsync_Call) RunAndReturn(run func(*metadata.ReplicationSpecification, func())) *ReplicatorAgent_SetUpdatedSpecAsync_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with given fields:
func (_m *ReplicatorAgent) Start() {
	_m.Called()
}

// ReplicatorAgent_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type ReplicatorAgent_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
func (_e *ReplicatorAgent_Expecter) Start() *ReplicatorAgent_Start_Call {
	return &ReplicatorAgent_Start_Call{Call: _e.mock.On("Start")}
}

func (_c *ReplicatorAgent_Start_Call) Run(run func()) *ReplicatorAgent_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ReplicatorAgent_Start_Call) Return() *ReplicatorAgent_Start_Call {
	_c.Call.Return()
	return _c
}

func (_c *ReplicatorAgent_Start_Call) RunAndReturn(run func()) *ReplicatorAgent_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function with given fields:
func (_m *ReplicatorAgent) Stop() {
	_m.Called()
}

// ReplicatorAgent_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type ReplicatorAgent_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *ReplicatorAgent_Expecter) Stop() *ReplicatorAgent_Stop_Call {
	return &ReplicatorAgent_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *ReplicatorAgent_Stop_Call) Run(run func()) *ReplicatorAgent_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ReplicatorAgent_Stop_Call) Return() *ReplicatorAgent_Stop_Call {
	_c.Call.Return()
	return _c
}

func (_c *ReplicatorAgent_Stop_Call) RunAndReturn(run func()) *ReplicatorAgent_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// NewReplicatorAgent creates a new instance of ReplicatorAgent. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReplicatorAgent(t interface {
	mock.TestingT
	Cleanup(func())
}) *ReplicatorAgent {
	mock := &ReplicatorAgent{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
