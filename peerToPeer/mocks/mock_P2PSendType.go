// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	log "github.com/couchbase/goxdcr/log"
	mock "github.com/stretchr/testify/mock"

	peerToPeer "github.com/couchbase/goxdcr/peerToPeer"
)

// P2PSendType is an autogenerated mock type for the P2PSendType type
type P2PSendType struct {
	mock.Mock
}

type P2PSendType_Expecter struct {
	mock *mock.Mock
}

func (_m *P2PSendType) EXPECT() *P2PSendType_Expecter {
	return &P2PSendType_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: req, _a1
func (_m *P2PSendType) Execute(req peerToPeer.Request, _a1 *log.CommonLogger) (peerToPeer.HandlerResult, error) {
	ret := _m.Called(req, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 peerToPeer.HandlerResult
	var r1 error
	if rf, ok := ret.Get(0).(func(peerToPeer.Request, *log.CommonLogger) (peerToPeer.HandlerResult, error)); ok {
		return rf(req, _a1)
	}
	if rf, ok := ret.Get(0).(func(peerToPeer.Request, *log.CommonLogger) peerToPeer.HandlerResult); ok {
		r0 = rf(req, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(peerToPeer.HandlerResult)
		}
	}

	if rf, ok := ret.Get(1).(func(peerToPeer.Request, *log.CommonLogger) error); ok {
		r1 = rf(req, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// P2PSendType_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type P2PSendType_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - req peerToPeer.Request
//   - _a1 *log.CommonLogger
func (_e *P2PSendType_Expecter) Execute(req interface{}, _a1 interface{}) *P2PSendType_Execute_Call {
	return &P2PSendType_Execute_Call{Call: _e.mock.On("Execute", req, _a1)}
}

func (_c *P2PSendType_Execute_Call) Run(run func(req peerToPeer.Request, _a1 *log.CommonLogger)) *P2PSendType_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(peerToPeer.Request), args[1].(*log.CommonLogger))
	})
	return _c
}

func (_c *P2PSendType_Execute_Call) Return(_a0 peerToPeer.HandlerResult, _a1 error) *P2PSendType_Execute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *P2PSendType_Execute_Call) RunAndReturn(run func(peerToPeer.Request, *log.CommonLogger) (peerToPeer.HandlerResult, error)) *P2PSendType_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewP2PSendType creates a new instance of P2PSendType. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewP2PSendType(t interface {
	mock.TestingT
	Cleanup(func())
}) *P2PSendType {
	mock := &P2PSendType{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
