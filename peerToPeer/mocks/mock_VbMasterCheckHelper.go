// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	metadata "github.com/couchbase/goxdcr/metadata"
	mock "github.com/stretchr/testify/mock"

	peerToPeer "github.com/couchbase/goxdcr/peerToPeer"
)

// VbMasterCheckHelper is an autogenerated mock type for the VbMasterCheckHelper type
type VbMasterCheckHelper struct {
	mock.Mock
}

type VbMasterCheckHelper_Expecter struct {
	mock *mock.Mock
}

func (_m *VbMasterCheckHelper) EXPECT() *VbMasterCheckHelper_Expecter {
	return &VbMasterCheckHelper_Expecter{mock: &_m.Mock}
}

// GetUnverifiedSubset provides a mock function with given fields: requestedSet
func (_m *VbMasterCheckHelper) GetUnverifiedSubset(requestedSet peerToPeer.BucketVBMapType) (peerToPeer.BucketVBMapType, error) {
	ret := _m.Called(requestedSet)

	if len(ret) == 0 {
		panic("no return value specified for GetUnverifiedSubset")
	}

	var r0 peerToPeer.BucketVBMapType
	var r1 error
	if rf, ok := ret.Get(0).(func(peerToPeer.BucketVBMapType) (peerToPeer.BucketVBMapType, error)); ok {
		return rf(requestedSet)
	}
	if rf, ok := ret.Get(0).(func(peerToPeer.BucketVBMapType) peerToPeer.BucketVBMapType); ok {
		r0 = rf(requestedSet)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(peerToPeer.BucketVBMapType)
		}
	}

	if rf, ok := ret.Get(1).(func(peerToPeer.BucketVBMapType) error); ok {
		r1 = rf(requestedSet)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VbMasterCheckHelper_GetUnverifiedSubset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUnverifiedSubset'
type VbMasterCheckHelper_GetUnverifiedSubset_Call struct {
	*mock.Call
}

// GetUnverifiedSubset is a helper method to define mock.On call
//   - requestedSet peerToPeer.BucketVBMapType
func (_e *VbMasterCheckHelper_Expecter) GetUnverifiedSubset(requestedSet interface{}) *VbMasterCheckHelper_GetUnverifiedSubset_Call {
	return &VbMasterCheckHelper_GetUnverifiedSubset_Call{Call: _e.mock.On("GetUnverifiedSubset", requestedSet)}
}

func (_c *VbMasterCheckHelper_GetUnverifiedSubset_Call) Run(run func(requestedSet peerToPeer.BucketVBMapType)) *VbMasterCheckHelper_GetUnverifiedSubset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(peerToPeer.BucketVBMapType))
	})
	return _c
}

func (_c *VbMasterCheckHelper_GetUnverifiedSubset_Call) Return(_a0 peerToPeer.BucketVBMapType, _a1 error) *VbMasterCheckHelper_GetUnverifiedSubset_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *VbMasterCheckHelper_GetUnverifiedSubset_Call) RunAndReturn(run func(peerToPeer.BucketVBMapType) (peerToPeer.BucketVBMapType, error)) *VbMasterCheckHelper_GetUnverifiedSubset_Call {
	_c.Call.Return(run)
	return _c
}

// HandleSpecChange provides a mock function with given fields: oldSpec, newSpec
func (_m *VbMasterCheckHelper) HandleSpecChange(oldSpec *metadata.ReplicationSpecification, newSpec *metadata.ReplicationSpecification) {
	_m.Called(oldSpec, newSpec)
}

// VbMasterCheckHelper_HandleSpecChange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleSpecChange'
type VbMasterCheckHelper_HandleSpecChange_Call struct {
	*mock.Call
}

// HandleSpecChange is a helper method to define mock.On call
//   - oldSpec *metadata.ReplicationSpecification
//   - newSpec *metadata.ReplicationSpecification
func (_e *VbMasterCheckHelper_Expecter) HandleSpecChange(oldSpec interface{}, newSpec interface{}) *VbMasterCheckHelper_HandleSpecChange_Call {
	return &VbMasterCheckHelper_HandleSpecChange_Call{Call: _e.mock.On("HandleSpecChange", oldSpec, newSpec)}
}

func (_c *VbMasterCheckHelper_HandleSpecChange_Call) Run(run func(oldSpec *metadata.ReplicationSpecification, newSpec *metadata.ReplicationSpecification)) *VbMasterCheckHelper_HandleSpecChange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*metadata.ReplicationSpecification), args[1].(*metadata.ReplicationSpecification))
	})
	return _c
}

func (_c *VbMasterCheckHelper_HandleSpecChange_Call) Return() *VbMasterCheckHelper_HandleSpecChange_Call {
	_c.Call.Return()
	return _c
}

func (_c *VbMasterCheckHelper_HandleSpecChange_Call) RunAndReturn(run func(*metadata.ReplicationSpecification, *metadata.ReplicationSpecification)) *VbMasterCheckHelper_HandleSpecChange_Call {
	_c.Call.Return(run)
	return _c
}

// HandleSpecCreation provides a mock function with given fields: spec
func (_m *VbMasterCheckHelper) HandleSpecCreation(spec *metadata.ReplicationSpecification) {
	_m.Called(spec)
}

// VbMasterCheckHelper_HandleSpecCreation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleSpecCreation'
type VbMasterCheckHelper_HandleSpecCreation_Call struct {
	*mock.Call
}

// HandleSpecCreation is a helper method to define mock.On call
//   - spec *metadata.ReplicationSpecification
func (_e *VbMasterCheckHelper_Expecter) HandleSpecCreation(spec interface{}) *VbMasterCheckHelper_HandleSpecCreation_Call {
	return &VbMasterCheckHelper_HandleSpecCreation_Call{Call: _e.mock.On("HandleSpecCreation", spec)}
}

func (_c *VbMasterCheckHelper_HandleSpecCreation_Call) Run(run func(spec *metadata.ReplicationSpecification)) *VbMasterCheckHelper_HandleSpecCreation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*metadata.ReplicationSpecification))
	})
	return _c
}

func (_c *VbMasterCheckHelper_HandleSpecCreation_Call) Return() *VbMasterCheckHelper_HandleSpecCreation_Call {
	_c.Call.Return()
	return _c
}

func (_c *VbMasterCheckHelper_HandleSpecCreation_Call) RunAndReturn(run func(*metadata.ReplicationSpecification)) *VbMasterCheckHelper_HandleSpecCreation_Call {
	_c.Call.Return(run)
	return _c
}

// HandleSpecDeletion provides a mock function with given fields: spec
func (_m *VbMasterCheckHelper) HandleSpecDeletion(spec *metadata.ReplicationSpecification) {
	_m.Called(spec)
}

// VbMasterCheckHelper_HandleSpecDeletion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleSpecDeletion'
type VbMasterCheckHelper_HandleSpecDeletion_Call struct {
	*mock.Call
}

// HandleSpecDeletion is a helper method to define mock.On call
//   - spec *metadata.ReplicationSpecification
func (_e *VbMasterCheckHelper_Expecter) HandleSpecDeletion(spec interface{}) *VbMasterCheckHelper_HandleSpecDeletion_Call {
	return &VbMasterCheckHelper_HandleSpecDeletion_Call{Call: _e.mock.On("HandleSpecDeletion", spec)}
}

func (_c *VbMasterCheckHelper_HandleSpecDeletion_Call) Run(run func(spec *metadata.ReplicationSpecification)) *VbMasterCheckHelper_HandleSpecDeletion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*metadata.ReplicationSpecification))
	})
	return _c
}

func (_c *VbMasterCheckHelper_HandleSpecDeletion_Call) Return() *VbMasterCheckHelper_HandleSpecDeletion_Call {
	_c.Call.Return()
	return _c
}

func (_c *VbMasterCheckHelper_HandleSpecDeletion_Call) RunAndReturn(run func(*metadata.ReplicationSpecification)) *VbMasterCheckHelper_HandleSpecDeletion_Call {
	_c.Call.Return(run)
	return _c
}

// NewVbMasterCheckHelper creates a new instance of VbMasterCheckHelper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewVbMasterCheckHelper(t interface {
	mock.TestingT
	Cleanup(func())
}) *VbMasterCheckHelper {
	mock := &VbMasterCheckHelper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
