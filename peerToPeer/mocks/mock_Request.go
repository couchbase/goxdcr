// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	peerToPeer "github.com/couchbase/goxdcr/peerToPeer"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// Request is an autogenerated mock type for the Request type
type Request struct {
	mock.Mock
}

type Request_Expecter struct {
	mock *mock.Mock
}

func (_m *Request) EXPECT() *Request_Expecter {
	return &Request_Expecter{mock: &_m.Mock}
}

// CallBack provides a mock function with given fields: resp
func (_m *Request) CallBack(resp peerToPeer.Response) (peerToPeer.HandlerResult, error) {
	ret := _m.Called(resp)

	if len(ret) == 0 {
		panic("no return value specified for CallBack")
	}

	var r0 peerToPeer.HandlerResult
	var r1 error
	if rf, ok := ret.Get(0).(func(peerToPeer.Response) (peerToPeer.HandlerResult, error)); ok {
		return rf(resp)
	}
	if rf, ok := ret.Get(0).(func(peerToPeer.Response) peerToPeer.HandlerResult); ok {
		r0 = rf(resp)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(peerToPeer.HandlerResult)
		}
	}

	if rf, ok := ret.Get(1).(func(peerToPeer.Response) error); ok {
		r1 = rf(resp)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Request_CallBack_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CallBack'
type Request_CallBack_Call struct {
	*mock.Call
}

// CallBack is a helper method to define mock.On call
//   - resp peerToPeer.Response
func (_e *Request_Expecter) CallBack(resp interface{}) *Request_CallBack_Call {
	return &Request_CallBack_Call{Call: _e.mock.On("CallBack", resp)}
}

func (_c *Request_CallBack_Call) Run(run func(resp peerToPeer.Response)) *Request_CallBack_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(peerToPeer.Response))
	})
	return _c
}

func (_c *Request_CallBack_Call) Return(_a0 peerToPeer.HandlerResult, _a1 error) *Request_CallBack_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Request_CallBack_Call) RunAndReturn(run func(peerToPeer.Response) (peerToPeer.HandlerResult, error)) *Request_CallBack_Call {
	_c.Call.Return(run)
	return _c
}

// DeSerialize provides a mock function with given fields: _a0
func (_m *Request) DeSerialize(_a0 []byte) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for DeSerialize")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Request_DeSerialize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeSerialize'
type Request_DeSerialize_Call struct {
	*mock.Call
}

// DeSerialize is a helper method to define mock.On call
//   - _a0 []byte
func (_e *Request_Expecter) DeSerialize(_a0 interface{}) *Request_DeSerialize_Call {
	return &Request_DeSerialize_Call{Call: _e.mock.On("DeSerialize", _a0)}
}

func (_c *Request_DeSerialize_Call) Run(run func(_a0 []byte)) *Request_DeSerialize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *Request_DeSerialize_Call) Return(_a0 error) *Request_DeSerialize_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Request_DeSerialize_Call) RunAndReturn(run func([]byte) error) *Request_DeSerialize_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateResponse provides a mock function with given fields:
func (_m *Request) GenerateResponse() interface{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GenerateResponse")
	}

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// Request_GenerateResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateResponse'
type Request_GenerateResponse_Call struct {
	*mock.Call
}

// GenerateResponse is a helper method to define mock.On call
func (_e *Request_Expecter) GenerateResponse() *Request_GenerateResponse_Call {
	return &Request_GenerateResponse_Call{Call: _e.mock.On("GenerateResponse")}
}

func (_c *Request_GenerateResponse_Call) Run(run func()) *Request_GenerateResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Request_GenerateResponse_Call) Return(_a0 interface{}) *Request_GenerateResponse_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Request_GenerateResponse_Call) RunAndReturn(run func() interface{}) *Request_GenerateResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetEnqueuedTime provides a mock function with given fields:
func (_m *Request) GetEnqueuedTime() time.Time {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetEnqueuedTime")
	}

	var r0 time.Time
	if rf, ok := ret.Get(0).(func() time.Time); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	return r0
}

// Request_GetEnqueuedTime_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEnqueuedTime'
type Request_GetEnqueuedTime_Call struct {
	*mock.Call
}

// GetEnqueuedTime is a helper method to define mock.On call
func (_e *Request_Expecter) GetEnqueuedTime() *Request_GetEnqueuedTime_Call {
	return &Request_GetEnqueuedTime_Call{Call: _e.mock.On("GetEnqueuedTime")}
}

func (_c *Request_GetEnqueuedTime_Call) Run(run func()) *Request_GetEnqueuedTime_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Request_GetEnqueuedTime_Call) Return(_a0 time.Time) *Request_GetEnqueuedTime_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Request_GetEnqueuedTime_Call) RunAndReturn(run func() time.Time) *Request_GetEnqueuedTime_Call {
	_c.Call.Return(run)
	return _c
}

// GetOpaque provides a mock function with given fields:
func (_m *Request) GetOpaque() uint32 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetOpaque")
	}

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	return r0
}

// Request_GetOpaque_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOpaque'
type Request_GetOpaque_Call struct {
	*mock.Call
}

// GetOpaque is a helper method to define mock.On call
func (_e *Request_Expecter) GetOpaque() *Request_GetOpaque_Call {
	return &Request_GetOpaque_Call{Call: _e.mock.On("GetOpaque")}
}

func (_c *Request_GetOpaque_Call) Run(run func()) *Request_GetOpaque_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Request_GetOpaque_Call) Return(_a0 uint32) *Request_GetOpaque_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Request_GetOpaque_Call) RunAndReturn(run func() uint32) *Request_GetOpaque_Call {
	_c.Call.Return(run)
	return _c
}

// GetOpcode provides a mock function with given fields:
func (_m *Request) GetOpcode() peerToPeer.OpCode {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetOpcode")
	}

	var r0 peerToPeer.OpCode
	if rf, ok := ret.Get(0).(func() peerToPeer.OpCode); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(peerToPeer.OpCode)
	}

	return r0
}

// Request_GetOpcode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOpcode'
type Request_GetOpcode_Call struct {
	*mock.Call
}

// GetOpcode is a helper method to define mock.On call
func (_e *Request_Expecter) GetOpcode() *Request_GetOpcode_Call {
	return &Request_GetOpcode_Call{Call: _e.mock.On("GetOpcode")}
}

func (_c *Request_GetOpcode_Call) Run(run func()) *Request_GetOpcode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Request_GetOpcode_Call) Return(_a0 peerToPeer.OpCode) *Request_GetOpcode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Request_GetOpcode_Call) RunAndReturn(run func() peerToPeer.OpCode) *Request_GetOpcode_Call {
	_c.Call.Return(run)
	return _c
}

// GetSender provides a mock function with given fields:
func (_m *Request) GetSender() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSender")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Request_GetSender_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSender'
type Request_GetSender_Call struct {
	*mock.Call
}

// GetSender is a helper method to define mock.On call
func (_e *Request_Expecter) GetSender() *Request_GetSender_Call {
	return &Request_GetSender_Call{Call: _e.mock.On("GetSender")}
}

func (_c *Request_GetSender_Call) Run(run func()) *Request_GetSender_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Request_GetSender_Call) Return(_a0 string) *Request_GetSender_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Request_GetSender_Call) RunAndReturn(run func() string) *Request_GetSender_Call {
	_c.Call.Return(run)
	return _c
}

// GetTarget provides a mock function with given fields:
func (_m *Request) GetTarget() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTarget")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Request_GetTarget_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTarget'
type Request_GetTarget_Call struct {
	*mock.Call
}

// GetTarget is a helper method to define mock.On call
func (_e *Request_Expecter) GetTarget() *Request_GetTarget_Call {
	return &Request_GetTarget_Call{Call: _e.mock.On("GetTarget")}
}

func (_c *Request_GetTarget_Call) Run(run func()) *Request_GetTarget_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Request_GetTarget_Call) Return(_a0 string) *Request_GetTarget_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Request_GetTarget_Call) RunAndReturn(run func() string) *Request_GetTarget_Call {
	_c.Call.Return(run)
	return _c
}

// GetType provides a mock function with given fields:
func (_m *Request) GetType() peerToPeer.ReqRespType {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetType")
	}

	var r0 peerToPeer.ReqRespType
	if rf, ok := ret.Get(0).(func() peerToPeer.ReqRespType); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(peerToPeer.ReqRespType)
	}

	return r0
}

// Request_GetType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetType'
type Request_GetType_Call struct {
	*mock.Call
}

// GetType is a helper method to define mock.On call
func (_e *Request_Expecter) GetType() *Request_GetType_Call {
	return &Request_GetType_Call{Call: _e.mock.On("GetType")}
}

func (_c *Request_GetType_Call) Run(run func()) *Request_GetType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Request_GetType_Call) Return(_a0 peerToPeer.ReqRespType) *Request_GetType_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Request_GetType_Call) RunAndReturn(run func() peerToPeer.ReqRespType) *Request_GetType_Call {
	_c.Call.Return(run)
	return _c
}

// RecordEnqueuedTime provides a mock function with given fields:
func (_m *Request) RecordEnqueuedTime() {
	_m.Called()
}

// Request_RecordEnqueuedTime_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RecordEnqueuedTime'
type Request_RecordEnqueuedTime_Call struct {
	*mock.Call
}

// RecordEnqueuedTime is a helper method to define mock.On call
func (_e *Request_Expecter) RecordEnqueuedTime() *Request_RecordEnqueuedTime_Call {
	return &Request_RecordEnqueuedTime_Call{Call: _e.mock.On("RecordEnqueuedTime")}
}

func (_c *Request_RecordEnqueuedTime_Call) Run(run func()) *Request_RecordEnqueuedTime_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Request_RecordEnqueuedTime_Call) Return() *Request_RecordEnqueuedTime_Call {
	_c.Call.Return()
	return _c
}

func (_c *Request_RecordEnqueuedTime_Call) RunAndReturn(run func()) *Request_RecordEnqueuedTime_Call {
	_c.Call.Return(run)
	return _c
}

// SameAs provides a mock function with given fields: other
func (_m *Request) SameAs(other interface{}) (bool, error) {
	ret := _m.Called(other)

	if len(ret) == 0 {
		panic("no return value specified for SameAs")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}) (bool, error)); ok {
		return rf(other)
	}
	if rf, ok := ret.Get(0).(func(interface{}) bool); ok {
		r0 = rf(other)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(interface{}) error); ok {
		r1 = rf(other)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Request_SameAs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SameAs'
type Request_SameAs_Call struct {
	*mock.Call
}

// SameAs is a helper method to define mock.On call
//   - other interface{}
func (_e *Request_Expecter) SameAs(other interface{}) *Request_SameAs_Call {
	return &Request_SameAs_Call{Call: _e.mock.On("SameAs", other)}
}

func (_c *Request_SameAs_Call) Run(run func(other interface{})) *Request_SameAs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *Request_SameAs_Call) Return(_a0 bool, _a1 error) *Request_SameAs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Request_SameAs_Call) RunAndReturn(run func(interface{}) (bool, error)) *Request_SameAs_Call {
	_c.Call.Return(run)
	return _c
}

// Serialize provides a mock function with given fields:
func (_m *Request) Serialize() ([]byte, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Serialize")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]byte, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Request_Serialize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Serialize'
type Request_Serialize_Call struct {
	*mock.Call
}

// Serialize is a helper method to define mock.On call
func (_e *Request_Expecter) Serialize() *Request_Serialize_Call {
	return &Request_Serialize_Call{Call: _e.mock.On("Serialize")}
}

func (_c *Request_Serialize_Call) Run(run func()) *Request_Serialize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Request_Serialize_Call) Return(_a0 []byte, _a1 error) *Request_Serialize_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Request_Serialize_Call) RunAndReturn(run func() ([]byte, error)) *Request_Serialize_Call {
	_c.Call.Return(run)
	return _c
}

// NewRequest creates a new instance of Request. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRequest(t interface {
	mock.TestingT
	Cleanup(func())
}) *Request {
	mock := &Request{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
