// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	base "github.com/couchbase/goxdcr/base"
	metadata "github.com/couchbase/goxdcr/metadata"

	mock "github.com/stretchr/testify/mock"
)

// ReplicaCache is an autogenerated mock type for the ReplicaCache type
type ReplicaCache struct {
	mock.Mock
}

type ReplicaCache_Expecter struct {
	mock *mock.Mock
}

func (_m *ReplicaCache) EXPECT() *ReplicaCache_Expecter {
	return &ReplicaCache_Expecter{mock: &_m.Mock}
}

// GetReplicaInfo provides a mock function with given fields: spec
func (_m *ReplicaCache) GetReplicaInfo(spec *metadata.ReplicationSpecification) (int, *base.VbHostsMapType, *base.StringStringMap, func(), error) {
	ret := _m.Called(spec)

	if len(ret) == 0 {
		panic("no return value specified for GetReplicaInfo")
	}

	var r0 int
	var r1 *base.VbHostsMapType
	var r2 *base.StringStringMap
	var r3 func()
	var r4 error
	if rf, ok := ret.Get(0).(func(*metadata.ReplicationSpecification) (int, *base.VbHostsMapType, *base.StringStringMap, func(), error)); ok {
		return rf(spec)
	}
	if rf, ok := ret.Get(0).(func(*metadata.ReplicationSpecification) int); ok {
		r0 = rf(spec)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(*metadata.ReplicationSpecification) *base.VbHostsMapType); ok {
		r1 = rf(spec)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*base.VbHostsMapType)
		}
	}

	if rf, ok := ret.Get(2).(func(*metadata.ReplicationSpecification) *base.StringStringMap); ok {
		r2 = rf(spec)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(*base.StringStringMap)
		}
	}

	if rf, ok := ret.Get(3).(func(*metadata.ReplicationSpecification) func()); ok {
		r3 = rf(spec)
	} else {
		if ret.Get(3) != nil {
			r3 = ret.Get(3).(func())
		}
	}

	if rf, ok := ret.Get(4).(func(*metadata.ReplicationSpecification) error); ok {
		r4 = rf(spec)
	} else {
		r4 = ret.Error(4)
	}

	return r0, r1, r2, r3, r4
}

// ReplicaCache_GetReplicaInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetReplicaInfo'
type ReplicaCache_GetReplicaInfo_Call struct {
	*mock.Call
}

// GetReplicaInfo is a helper method to define mock.On call
//   - spec *metadata.ReplicationSpecification
func (_e *ReplicaCache_Expecter) GetReplicaInfo(spec interface{}) *ReplicaCache_GetReplicaInfo_Call {
	return &ReplicaCache_GetReplicaInfo_Call{Call: _e.mock.On("GetReplicaInfo", spec)}
}

func (_c *ReplicaCache_GetReplicaInfo_Call) Run(run func(spec *metadata.ReplicationSpecification)) *ReplicaCache_GetReplicaInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*metadata.ReplicationSpecification))
	})
	return _c
}

func (_c *ReplicaCache_GetReplicaInfo_Call) Return(replicaCnt int, replicaMap *base.VbHostsMapType, replicaTranslateMap *base.StringStringMap, unlockFunc func(), err error) *ReplicaCache_GetReplicaInfo_Call {
	_c.Call.Return(replicaCnt, replicaMap, replicaTranslateMap, unlockFunc, err)
	return _c
}

func (_c *ReplicaCache_GetReplicaInfo_Call) RunAndReturn(run func(*metadata.ReplicationSpecification) (int, *base.VbHostsMapType, *base.StringStringMap, func(), error)) *ReplicaCache_GetReplicaInfo_Call {
	_c.Call.Return(run)
	return _c
}

// HandleSpecCreation provides a mock function with given fields: spec
func (_m *ReplicaCache) HandleSpecCreation(spec *metadata.ReplicationSpecification) {
	_m.Called(spec)
}

// ReplicaCache_HandleSpecCreation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleSpecCreation'
type ReplicaCache_HandleSpecCreation_Call struct {
	*mock.Call
}

// HandleSpecCreation is a helper method to define mock.On call
//   - spec *metadata.ReplicationSpecification
func (_e *ReplicaCache_Expecter) HandleSpecCreation(spec interface{}) *ReplicaCache_HandleSpecCreation_Call {
	return &ReplicaCache_HandleSpecCreation_Call{Call: _e.mock.On("HandleSpecCreation", spec)}
}

func (_c *ReplicaCache_HandleSpecCreation_Call) Run(run func(spec *metadata.ReplicationSpecification)) *ReplicaCache_HandleSpecCreation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*metadata.ReplicationSpecification))
	})
	return _c
}

func (_c *ReplicaCache_HandleSpecCreation_Call) Return() *ReplicaCache_HandleSpecCreation_Call {
	_c.Call.Return()
	return _c
}

func (_c *ReplicaCache_HandleSpecCreation_Call) RunAndReturn(run func(*metadata.ReplicationSpecification)) *ReplicaCache_HandleSpecCreation_Call {
	_c.Call.Return(run)
	return _c
}

// HandleSpecDeletion provides a mock function with given fields: oldSpec
func (_m *ReplicaCache) HandleSpecDeletion(oldSpec *metadata.ReplicationSpecification) {
	_m.Called(oldSpec)
}

// ReplicaCache_HandleSpecDeletion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleSpecDeletion'
type ReplicaCache_HandleSpecDeletion_Call struct {
	*mock.Call
}

// HandleSpecDeletion is a helper method to define mock.On call
//   - oldSpec *metadata.ReplicationSpecification
func (_e *ReplicaCache_Expecter) HandleSpecDeletion(oldSpec interface{}) *ReplicaCache_HandleSpecDeletion_Call {
	return &ReplicaCache_HandleSpecDeletion_Call{Call: _e.mock.On("HandleSpecDeletion", oldSpec)}
}

func (_c *ReplicaCache_HandleSpecDeletion_Call) Run(run func(oldSpec *metadata.ReplicationSpecification)) *ReplicaCache_HandleSpecDeletion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*metadata.ReplicationSpecification))
	})
	return _c
}

func (_c *ReplicaCache_HandleSpecDeletion_Call) Return() *ReplicaCache_HandleSpecDeletion_Call {
	_c.Call.Return()
	return _c
}

func (_c *ReplicaCache_HandleSpecDeletion_Call) RunAndReturn(run func(*metadata.ReplicationSpecification)) *ReplicaCache_HandleSpecDeletion_Call {
	_c.Call.Return(run)
	return _c
}

// NewReplicaCache creates a new instance of ReplicaCache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReplicaCache(t interface {
	mock.TestingT
	Cleanup(func())
}) *ReplicaCache {
	mock := &ReplicaCache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
