// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	metadata "github.com/couchbase/goxdcr/v8/metadata"
	mock "github.com/stretchr/testify/mock"

	parts "github.com/couchbase/goxdcr/v8/parts"
)

// RouterInjector is an autogenerated mock type for the RouterInjector type
type RouterInjector struct {
	mock.Mock
}

type RouterInjector_Expecter struct {
	mock *mock.Mock
}

func (_m *RouterInjector) EXPECT() *RouterInjector_Expecter {
	return &RouterInjector_Expecter{mock: &_m.Mock}
}

// Inject provides a mock function with given fields: router, settings
func (_m *RouterInjector) Inject(router *parts.Router, settings metadata.ReplicationSettingsMap) {
	_m.Called(router, settings)
}

// RouterInjector_Inject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Inject'
type RouterInjector_Inject_Call struct {
	*mock.Call
}

// Inject is a helper method to define mock.On call
//   - router *parts.Router
//   - settings metadata.ReplicationSettingsMap
func (_e *RouterInjector_Expecter) Inject(router interface{}, settings interface{}) *RouterInjector_Inject_Call {
	return &RouterInjector_Inject_Call{Call: _e.mock.On("Inject", router, settings)}
}

func (_c *RouterInjector_Inject_Call) Run(run func(router *parts.Router, settings metadata.ReplicationSettingsMap)) *RouterInjector_Inject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*parts.Router), args[1].(metadata.ReplicationSettingsMap))
	})
	return _c
}

func (_c *RouterInjector_Inject_Call) Return() *RouterInjector_Inject_Call {
	_c.Call.Return()
	return _c
}

func (_c *RouterInjector_Inject_Call) RunAndReturn(run func(*parts.Router, metadata.ReplicationSettingsMap)) *RouterInjector_Inject_Call {
	_c.Run(run)
	return _c
}

// NewRouterInjector creates a new instance of RouterInjector. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRouterInjector(t interface {
	mock.TestingT
	Cleanup(func())
}) *RouterInjector {
	mock := &RouterInjector{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
