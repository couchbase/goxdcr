// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	metadata "github.com/couchbase/goxdcr/v8/metadata"
	mock "github.com/stretchr/testify/mock"

	parts "github.com/couchbase/goxdcr/v8/parts"
)

// DcpNozzleInjector is an autogenerated mock type for the DcpNozzleInjector type
type DcpNozzleInjector struct {
	mock.Mock
}

type DcpNozzleInjector_Expecter struct {
	mock *mock.Mock
}

func (_m *DcpNozzleInjector) EXPECT() *DcpNozzleInjector_Expecter {
	return &DcpNozzleInjector_Expecter{mock: &_m.Mock}
}

// Init provides a mock function with given fields: dcp, settings
func (_m *DcpNozzleInjector) Init(dcp *parts.DcpNozzle, settings metadata.ReplicationSettingsMap) {
	_m.Called(dcp, settings)
}

// DcpNozzleInjector_Init_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Init'
type DcpNozzleInjector_Init_Call struct {
	*mock.Call
}

// Init is a helper method to define mock.On call
//   - dcp *parts.DcpNozzle
//   - settings metadata.ReplicationSettingsMap
func (_e *DcpNozzleInjector_Expecter) Init(dcp interface{}, settings interface{}) *DcpNozzleInjector_Init_Call {
	return &DcpNozzleInjector_Init_Call{Call: _e.mock.On("Init", dcp, settings)}
}

func (_c *DcpNozzleInjector_Init_Call) Run(run func(dcp *parts.DcpNozzle, settings metadata.ReplicationSettingsMap)) *DcpNozzleInjector_Init_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*parts.DcpNozzle), args[1].(metadata.ReplicationSettingsMap))
	})
	return _c
}

func (_c *DcpNozzleInjector_Init_Call) Return() *DcpNozzleInjector_Init_Call {
	_c.Call.Return()
	return _c
}

func (_c *DcpNozzleInjector_Init_Call) RunAndReturn(run func(*parts.DcpNozzle, metadata.ReplicationSettingsMap)) *DcpNozzleInjector_Init_Call {
	_c.Run(run)
	return _c
}

// NewDcpNozzleInjector creates a new instance of DcpNozzleInjector. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDcpNozzleInjector(t interface {
	mock.TestingT
	Cleanup(func())
}) *DcpNozzleInjector {
	mock := &DcpNozzleInjector{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
