// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	base "github.com/couchbase/goxdcr/base"
	mock "github.com/stretchr/testify/mock"
)

// ReqCreator is an autogenerated mock type for the ReqCreator type
type ReqCreator struct {
	mock.Mock
}

type ReqCreator_Expecter struct {
	mock *mock.Mock
}

func (_m *ReqCreator) EXPECT() *ReqCreator_Expecter {
	return &ReqCreator_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: id
func (_m *ReqCreator) Execute(id string) (*base.WrappedMCRequest, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 *base.WrappedMCRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*base.WrappedMCRequest, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *base.WrappedMCRequest); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*base.WrappedMCRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReqCreator_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type ReqCreator_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - id string
func (_e *ReqCreator_Expecter) Execute(id interface{}) *ReqCreator_Execute_Call {
	return &ReqCreator_Execute_Call{Call: _e.mock.On("Execute", id)}
}

func (_c *ReqCreator_Execute_Call) Run(run func(id string)) *ReqCreator_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ReqCreator_Execute_Call) Return(_a0 *base.WrappedMCRequest, _a1 error) *ReqCreator_Execute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReqCreator_Execute_Call) RunAndReturn(run func(string) (*base.WrappedMCRequest, error)) *ReqCreator_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewReqCreator creates a new instance of ReqCreator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReqCreator(t interface {
	mock.TestingT
	Cleanup(func())
}) *ReqCreator {
	mock := &ReqCreator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
