// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	parts "github.com/couchbase/goxdcr/parts"
	mock "github.com/stretchr/testify/mock"
)

// stateCheckFunc is an autogenerated mock type for the stateCheckFunc type
type stateCheckFunc struct {
	mock.Mock
}

type stateCheckFunc_Expecter struct {
	mock *mock.Mock
}

func (_m *stateCheckFunc) EXPECT() *stateCheckFunc_Expecter {
	return &stateCheckFunc_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: state
func (_m *stateCheckFunc) Execute(state parts.DcpStreamState) bool {
	ret := _m.Called(state)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(parts.DcpStreamState) bool); ok {
		r0 = rf(state)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// stateCheckFunc_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type stateCheckFunc_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - state parts.DcpStreamState
func (_e *stateCheckFunc_Expecter) Execute(state interface{}) *stateCheckFunc_Execute_Call {
	return &stateCheckFunc_Execute_Call{Call: _e.mock.On("Execute", state)}
}

func (_c *stateCheckFunc_Execute_Call) Run(run func(state parts.DcpStreamState)) *stateCheckFunc_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(parts.DcpStreamState))
	})
	return _c
}

func (_c *stateCheckFunc_Execute_Call) Return(_a0 bool) *stateCheckFunc_Execute_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *stateCheckFunc_Execute_Call) RunAndReturn(run func(parts.DcpStreamState) bool) *stateCheckFunc_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// newStateCheckFunc creates a new instance of stateCheckFunc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newStateCheckFunc(t interface {
	mock.TestingT
	Cleanup(func())
}) *stateCheckFunc {
	mock := &stateCheckFunc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
