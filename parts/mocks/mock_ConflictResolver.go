// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	gomemcached "github.com/couchbase/gomemcached"
	base "github.com/couchbase/goxdcr/base"

	hlv "github.com/couchbase/goxdcr/hlv"

	log "github.com/couchbase/goxdcr/log"

	mock "github.com/stretchr/testify/mock"
)

// ConflictResolver is an autogenerated mock type for the ConflictResolver type
type ConflictResolver struct {
	mock.Mock
}

type ConflictResolver_Expecter struct {
	mock *mock.Mock
}

func (_m *ConflictResolver) EXPECT() *ConflictResolver_Expecter {
	return &ConflictResolver_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: req, resp, specs, sourceId, targetId, xattrEnabled, logger
func (_m *ConflictResolver) Execute(req *base.WrappedMCRequest, resp *gomemcached.MCResponse, specs []base.SubdocLookupPathSpec, sourceId hlv.DocumentSourceId, targetId hlv.DocumentSourceId, xattrEnabled bool, logger *log.CommonLogger) (base.ConflictResult, error) {
	ret := _m.Called(req, resp, specs, sourceId, targetId, xattrEnabled, logger)

	var r0 base.ConflictResult
	var r1 error
	if rf, ok := ret.Get(0).(func(*base.WrappedMCRequest, *gomemcached.MCResponse, []base.SubdocLookupPathSpec, hlv.DocumentSourceId, hlv.DocumentSourceId, bool, *log.CommonLogger) (base.ConflictResult, error)); ok {
		return rf(req, resp, specs, sourceId, targetId, xattrEnabled, logger)
	}
	if rf, ok := ret.Get(0).(func(*base.WrappedMCRequest, *gomemcached.MCResponse, []base.SubdocLookupPathSpec, hlv.DocumentSourceId, hlv.DocumentSourceId, bool, *log.CommonLogger) base.ConflictResult); ok {
		r0 = rf(req, resp, specs, sourceId, targetId, xattrEnabled, logger)
	} else {
		r0 = ret.Get(0).(base.ConflictResult)
	}

	if rf, ok := ret.Get(1).(func(*base.WrappedMCRequest, *gomemcached.MCResponse, []base.SubdocLookupPathSpec, hlv.DocumentSourceId, hlv.DocumentSourceId, bool, *log.CommonLogger) error); ok {
		r1 = rf(req, resp, specs, sourceId, targetId, xattrEnabled, logger)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConflictResolver_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type ConflictResolver_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - req *base.WrappedMCRequest
//   - resp *gomemcached.MCResponse
//   - specs []base.SubdocLookupPathSpec
//   - sourceId hlv.DocumentSourceId
//   - targetId hlv.DocumentSourceId
//   - xattrEnabled bool
//   - logger *log.CommonLogger
func (_e *ConflictResolver_Expecter) Execute(req interface{}, resp interface{}, specs interface{}, sourceId interface{}, targetId interface{}, xattrEnabled interface{}, logger interface{}) *ConflictResolver_Execute_Call {
	return &ConflictResolver_Execute_Call{Call: _e.mock.On("Execute", req, resp, specs, sourceId, targetId, xattrEnabled, logger)}
}

func (_c *ConflictResolver_Execute_Call) Run(run func(req *base.WrappedMCRequest, resp *gomemcached.MCResponse, specs []base.SubdocLookupPathSpec, sourceId hlv.DocumentSourceId, targetId hlv.DocumentSourceId, xattrEnabled bool, logger *log.CommonLogger)) *ConflictResolver_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*base.WrappedMCRequest), args[1].(*gomemcached.MCResponse), args[2].([]base.SubdocLookupPathSpec), args[3].(hlv.DocumentSourceId), args[4].(hlv.DocumentSourceId), args[5].(bool), args[6].(*log.CommonLogger))
	})
	return _c
}

func (_c *ConflictResolver_Execute_Call) Return(_a0 base.ConflictResult, _a1 error) *ConflictResolver_Execute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConflictResolver_Execute_Call) RunAndReturn(run func(*base.WrappedMCRequest, *gomemcached.MCResponse, []base.SubdocLookupPathSpec, hlv.DocumentSourceId, hlv.DocumentSourceId, bool, *log.CommonLogger) (base.ConflictResult, error)) *ConflictResolver_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewConflictResolver creates a new instance of ConflictResolver. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConflictResolver(t interface {
	mock.TestingT
	Cleanup(func())
}) *ConflictResolver {
	mock := &ConflictResolver{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
