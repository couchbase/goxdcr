// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	parts "github.com/couchbase/goxdcr/parts"
	mock "github.com/stretchr/testify/mock"
)

// CollectionsRoutingUpdater is an autogenerated mock type for the CollectionsRoutingUpdater type
type CollectionsRoutingUpdater struct {
	mock.Mock
}

type CollectionsRoutingUpdater_Expecter struct {
	mock *mock.Mock
}

func (_m *CollectionsRoutingUpdater) EXPECT() *CollectionsRoutingUpdater_Expecter {
	return &CollectionsRoutingUpdater_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: _a0
func (_m *CollectionsRoutingUpdater) Execute(_a0 parts.CollectionsRoutingInfo) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(parts.CollectionsRoutingInfo) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CollectionsRoutingUpdater_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type CollectionsRoutingUpdater_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - _a0 parts.CollectionsRoutingInfo
func (_e *CollectionsRoutingUpdater_Expecter) Execute(_a0 interface{}) *CollectionsRoutingUpdater_Execute_Call {
	return &CollectionsRoutingUpdater_Execute_Call{Call: _e.mock.On("Execute", _a0)}
}

func (_c *CollectionsRoutingUpdater_Execute_Call) Run(run func(_a0 parts.CollectionsRoutingInfo)) *CollectionsRoutingUpdater_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(parts.CollectionsRoutingInfo))
	})
	return _c
}

func (_c *CollectionsRoutingUpdater_Execute_Call) Return(_a0 error) *CollectionsRoutingUpdater_Execute_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CollectionsRoutingUpdater_Execute_Call) RunAndReturn(run func(parts.CollectionsRoutingInfo) error) *CollectionsRoutingUpdater_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewCollectionsRoutingUpdater creates a new instance of CollectionsRoutingUpdater. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCollectionsRoutingUpdater(t interface {
	mock.TestingT
	Cleanup(func())
}) *CollectionsRoutingUpdater {
	mock := &CollectionsRoutingUpdater{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
