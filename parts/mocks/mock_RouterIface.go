// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	base "github.com/couchbase/goxdcr/base"
	mock "github.com/stretchr/testify/mock"
)

// RouterIface is an autogenerated mock type for the RouterIface type
type RouterIface struct {
	mock.Mock
}

type RouterIface_Expecter struct {
	mock *mock.Mock
}

func (_m *RouterIface) EXPECT() *RouterIface_Expecter {
	return &RouterIface_Expecter{mock: &_m.Mock}
}

// Route provides a mock function with given fields: data
func (_m *RouterIface) Route(data interface{}) (map[string]interface{}, error) {
	ret := _m.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for Route")
	}

	var r0 map[string]interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}) (map[string]interface{}, error)); ok {
		return rf(data)
	}
	if rf, ok := ret.Get(0).(func(interface{}) map[string]interface{}); ok {
		r0 = rf(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RouterIface_Route_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Route'
type RouterIface_Route_Call struct {
	*mock.Call
}

// Route is a helper method to define mock.On call
//   - data interface{}
func (_e *RouterIface_Expecter) Route(data interface{}) *RouterIface_Route_Call {
	return &RouterIface_Route_Call{Call: _e.mock.On("Route", data)}
}

func (_c *RouterIface_Route_Call) Run(run func(data interface{})) *RouterIface_Route_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *RouterIface_Route_Call) Return(_a0 map[string]interface{}, _a1 error) *RouterIface_Route_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RouterIface_Route_Call) RunAndReturn(run func(interface{}) (map[string]interface{}, error)) *RouterIface_Route_Call {
	_c.Call.Return(run)
	return _c
}

// RouteCollection provides a mock function with given fields: data, partId, origUprEvent
func (_m *RouterIface) RouteCollection(data interface{}, partId string, origUprEvent *base.WrappedUprEvent) error {
	ret := _m.Called(data, partId, origUprEvent)

	if len(ret) == 0 {
		panic("no return value specified for RouteCollection")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, string, *base.WrappedUprEvent) error); ok {
		r0 = rf(data, partId, origUprEvent)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RouterIface_RouteCollection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RouteCollection'
type RouterIface_RouteCollection_Call struct {
	*mock.Call
}

// RouteCollection is a helper method to define mock.On call
//   - data interface{}
//   - partId string
//   - origUprEvent *base.WrappedUprEvent
func (_e *RouterIface_Expecter) RouteCollection(data interface{}, partId interface{}, origUprEvent interface{}) *RouterIface_RouteCollection_Call {
	return &RouterIface_RouteCollection_Call{Call: _e.mock.On("RouteCollection", data, partId, origUprEvent)}
}

func (_c *RouterIface_RouteCollection_Call) Run(run func(data interface{}, partId string, origUprEvent *base.WrappedUprEvent)) *RouterIface_RouteCollection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}), args[1].(string), args[2].(*base.WrappedUprEvent))
	})
	return _c
}

func (_c *RouterIface_RouteCollection_Call) Return(_a0 error) *RouterIface_RouteCollection_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RouterIface_RouteCollection_Call) RunAndReturn(run func(interface{}, string, *base.WrappedUprEvent) error) *RouterIface_RouteCollection_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with given fields:
func (_m *RouterIface) Start() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RouterIface_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type RouterIface_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
func (_e *RouterIface_Expecter) Start() *RouterIface_Start_Call {
	return &RouterIface_Start_Call{Call: _e.mock.On("Start")}
}

func (_c *RouterIface_Start_Call) Run(run func()) *RouterIface_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RouterIface_Start_Call) Return(_a0 error) *RouterIface_Start_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RouterIface_Start_Call) RunAndReturn(run func() error) *RouterIface_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function with given fields:
func (_m *RouterIface) Stop() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RouterIface_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type RouterIface_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *RouterIface_Expecter) Stop() *RouterIface_Stop_Call {
	return &RouterIface_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *RouterIface_Stop_Call) Run(run func()) *RouterIface_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RouterIface_Stop_Call) Return(_a0 error) *RouterIface_Stop_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RouterIface_Stop_Call) RunAndReturn(run func() error) *RouterIface_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// NewRouterIface creates a new instance of RouterIface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRouterIface(t interface {
	mock.TestingT
	Cleanup(func())
}) *RouterIface {
	mock := &RouterIface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
