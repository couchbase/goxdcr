// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	common "github.com/couchbase/goxdcr/common"
	mock "github.com/stretchr/testify/mock"

	peerToPeer "github.com/couchbase/goxdcr/peerToPeer"
)

// VBMasterCheckFunc is an autogenerated mock type for the VBMasterCheckFunc type
type VBMasterCheckFunc struct {
	mock.Mock
}

// Execute provides a mock function with given fields: _a0
func (_m *VBMasterCheckFunc) Execute(_a0 common.Pipeline) (map[string]*peerToPeer.VBMasterCheckResp, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 map[string]*peerToPeer.VBMasterCheckResp
	var r1 error
	if rf, ok := ret.Get(0).(func(common.Pipeline) (map[string]*peerToPeer.VBMasterCheckResp, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(common.Pipeline) map[string]*peerToPeer.VBMasterCheckResp); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*peerToPeer.VBMasterCheckResp)
		}
	}

	if rf, ok := ret.Get(1).(func(common.Pipeline) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewVBMasterCheckFunc creates a new instance of VBMasterCheckFunc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewVBMasterCheckFunc(t interface {
	mock.TestingT
	Cleanup(func())
}) *VBMasterCheckFunc {
	mock := &VBMasterCheckFunc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
