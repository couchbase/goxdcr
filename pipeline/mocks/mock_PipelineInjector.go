// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	base "github.com/couchbase/goxdcr/v8/base"
	metadata "github.com/couchbase/goxdcr/v8/metadata"

	mock "github.com/stretchr/testify/mock"
)

// PipelineInjector is an autogenerated mock type for the PipelineInjector type
type PipelineInjector struct {
	mock.Mock
}

type PipelineInjector_Expecter struct {
	mock *mock.Mock
}

func (_m *PipelineInjector) EXPECT() *PipelineInjector_Expecter {
	return &PipelineInjector_Expecter{mock: &_m.Mock}
}

// InjectDevPreCheckVBPoison provides a mock function with given fields: settings, b
func (_m *PipelineInjector) InjectDevPreCheckVBPoison(settings *metadata.ReplicationSettings, b *base.VbSeqnoMapType) {
	_m.Called(settings, b)
}

// PipelineInjector_InjectDevPreCheckVBPoison_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InjectDevPreCheckVBPoison'
type PipelineInjector_InjectDevPreCheckVBPoison_Call struct {
	*mock.Call
}

// InjectDevPreCheckVBPoison is a helper method to define mock.On call
//   - settings *metadata.ReplicationSettings
//   - b *base.VbSeqnoMapType
func (_e *PipelineInjector_Expecter) InjectDevPreCheckVBPoison(settings interface{}, b interface{}) *PipelineInjector_InjectDevPreCheckVBPoison_Call {
	return &PipelineInjector_InjectDevPreCheckVBPoison_Call{Call: _e.mock.On("InjectDevPreCheckVBPoison", settings, b)}
}

func (_c *PipelineInjector_InjectDevPreCheckVBPoison_Call) Run(run func(settings *metadata.ReplicationSettings, b *base.VbSeqnoMapType)) *PipelineInjector_InjectDevPreCheckVBPoison_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*metadata.ReplicationSettings), args[1].(*base.VbSeqnoMapType))
	})
	return _c
}

func (_c *PipelineInjector_InjectDevPreCheckVBPoison_Call) Return() *PipelineInjector_InjectDevPreCheckVBPoison_Call {
	_c.Call.Return()
	return _c
}

func (_c *PipelineInjector_InjectDevPreCheckVBPoison_Call) RunAndReturn(run func(*metadata.ReplicationSettings, *base.VbSeqnoMapType)) *PipelineInjector_InjectDevPreCheckVBPoison_Call {
	_c.Run(run)
	return _c
}

// NewPipelineInjector creates a new instance of PipelineInjector. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPipelineInjector(t interface {
	mock.TestingT
	Cleanup(func())
}) *PipelineInjector {
	mock := &PipelineInjector{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
