// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	common "github.com/couchbase/goxdcr/common"
	mock "github.com/stretchr/testify/mock"

	peerToPeer "github.com/couchbase/goxdcr/peerToPeer"
)

// MergeVBMasterRespCkptsFunc is an autogenerated mock type for the MergeVBMasterRespCkptsFunc type
type MergeVBMasterRespCkptsFunc struct {
	mock.Mock
}

type MergeVBMasterRespCkptsFunc_Expecter struct {
	mock *mock.Mock
}

func (_m *MergeVBMasterRespCkptsFunc) EXPECT() *MergeVBMasterRespCkptsFunc_Expecter {
	return &MergeVBMasterRespCkptsFunc_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: _a0, _a1
func (_m *MergeVBMasterRespCkptsFunc) Execute(_a0 common.Pipeline, _a1 peerToPeer.PeersVBMasterCheckRespMap) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(common.Pipeline, peerToPeer.PeersVBMasterCheckRespMap) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MergeVBMasterRespCkptsFunc_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MergeVBMasterRespCkptsFunc_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - _a0 common.Pipeline
//   - _a1 peerToPeer.PeersVBMasterCheckRespMap
func (_e *MergeVBMasterRespCkptsFunc_Expecter) Execute(_a0 interface{}, _a1 interface{}) *MergeVBMasterRespCkptsFunc_Execute_Call {
	return &MergeVBMasterRespCkptsFunc_Execute_Call{Call: _e.mock.On("Execute", _a0, _a1)}
}

func (_c *MergeVBMasterRespCkptsFunc_Execute_Call) Run(run func(_a0 common.Pipeline, _a1 peerToPeer.PeersVBMasterCheckRespMap)) *MergeVBMasterRespCkptsFunc_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.Pipeline), args[1].(peerToPeer.PeersVBMasterCheckRespMap))
	})
	return _c
}

func (_c *MergeVBMasterRespCkptsFunc_Execute_Call) Return(_a0 error) *MergeVBMasterRespCkptsFunc_Execute_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MergeVBMasterRespCkptsFunc_Execute_Call) RunAndReturn(run func(common.Pipeline, peerToPeer.PeersVBMasterCheckRespMap) error) *MergeVBMasterRespCkptsFunc_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMergeVBMasterRespCkptsFunc creates a new instance of MergeVBMasterRespCkptsFunc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMergeVBMasterRespCkptsFunc(t interface {
	mock.TestingT
	Cleanup(func())
}) *MergeVBMasterRespCkptsFunc {
	mock := &MergeVBMasterRespCkptsFunc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
