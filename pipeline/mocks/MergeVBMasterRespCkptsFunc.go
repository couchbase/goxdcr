// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	common "github.com/couchbase/goxdcr/common"
	mock "github.com/stretchr/testify/mock"

	peerToPeer "github.com/couchbase/goxdcr/peerToPeer"
)

// MergeVBMasterRespCkptsFunc is an autogenerated mock type for the MergeVBMasterRespCkptsFunc type
type MergeVBMasterRespCkptsFunc struct {
	mock.Mock
}

// Execute provides a mock function with given fields: _a0, _a1
func (_m *MergeVBMasterRespCkptsFunc) Execute(_a0 common.Pipeline, _a1 peerToPeer.PeersVBMasterCheckRespMap) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(common.Pipeline, peerToPeer.PeersVBMasterCheckRespMap) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMergeVBMasterRespCkptsFunc creates a new instance of MergeVBMasterRespCkptsFunc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMergeVBMasterRespCkptsFunc(t interface {
	mock.TestingT
	Cleanup(func())
}) *MergeVBMasterRespCkptsFunc {
	mock := &MergeVBMasterRespCkptsFunc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
