// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	base "github.com/couchbase/goxdcr/base"
	common "github.com/couchbase/goxdcr/common"

	expvar "expvar"

	metadata "github.com/couchbase/goxdcr/metadata"

	mock "github.com/stretchr/testify/mock"

	pipeline "github.com/couchbase/goxdcr/pipeline"
)

// ReplicationStatusIface is an autogenerated mock type for the ReplicationStatusIface type
type ReplicationStatusIface struct {
	mock.Mock
}

type ReplicationStatusIface_Expecter struct {
	mock *mock.Mock
}

func (_m *ReplicationStatusIface) EXPECT() *ReplicationStatusIface_Expecter {
	return &ReplicationStatusIface_Expecter{mock: &_m.Mock}
}

// AddError provides a mock function with given fields: err
func (_m *ReplicationStatusIface) AddError(err error) {
	_m.Called(err)
}

// ReplicationStatusIface_AddError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddError'
type ReplicationStatusIface_AddError_Call struct {
	*mock.Call
}

// AddError is a helper method to define mock.On call
//   - err error
func (_e *ReplicationStatusIface_Expecter) AddError(err interface{}) *ReplicationStatusIface_AddError_Call {
	return &ReplicationStatusIface_AddError_Call{Call: _e.mock.On("AddError", err)}
}

func (_c *ReplicationStatusIface_AddError_Call) Run(run func(err error)) *ReplicationStatusIface_AddError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(error))
	})
	return _c
}

func (_c *ReplicationStatusIface_AddError_Call) Return() *ReplicationStatusIface_AddError_Call {
	_c.Call.Return()
	return _c
}

func (_c *ReplicationStatusIface_AddError_Call) RunAndReturn(run func(error)) *ReplicationStatusIface_AddError_Call {
	_c.Call.Return(run)
	return _c
}

// AddErrorsFromMap provides a mock function with given fields: errMap
func (_m *ReplicationStatusIface) AddErrorsFromMap(errMap base.ErrorMap) {
	_m.Called(errMap)
}

// ReplicationStatusIface_AddErrorsFromMap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddErrorsFromMap'
type ReplicationStatusIface_AddErrorsFromMap_Call struct {
	*mock.Call
}

// AddErrorsFromMap is a helper method to define mock.On call
//   - errMap base.ErrorMap
func (_e *ReplicationStatusIface_Expecter) AddErrorsFromMap(errMap interface{}) *ReplicationStatusIface_AddErrorsFromMap_Call {
	return &ReplicationStatusIface_AddErrorsFromMap_Call{Call: _e.mock.On("AddErrorsFromMap", errMap)}
}

func (_c *ReplicationStatusIface_AddErrorsFromMap_Call) Run(run func(errMap base.ErrorMap)) *ReplicationStatusIface_AddErrorsFromMap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(base.ErrorMap))
	})
	return _c
}

func (_c *ReplicationStatusIface_AddErrorsFromMap_Call) Return() *ReplicationStatusIface_AddErrorsFromMap_Call {
	_c.Call.Return()
	return _c
}

func (_c *ReplicationStatusIface_AddErrorsFromMap_Call) RunAndReturn(run func(base.ErrorMap)) *ReplicationStatusIface_AddErrorsFromMap_Call {
	_c.Call.Return(run)
	return _c
}

// AllPipelines provides a mock function with given fields:
func (_m *ReplicationStatusIface) AllPipelines() []common.Pipeline {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for AllPipelines")
	}

	var r0 []common.Pipeline
	if rf, ok := ret.Get(0).(func() []common.Pipeline); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]common.Pipeline)
		}
	}

	return r0
}

// ReplicationStatusIface_AllPipelines_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AllPipelines'
type ReplicationStatusIface_AllPipelines_Call struct {
	*mock.Call
}

// AllPipelines is a helper method to define mock.On call
func (_e *ReplicationStatusIface_Expecter) AllPipelines() *ReplicationStatusIface_AllPipelines_Call {
	return &ReplicationStatusIface_AllPipelines_Call{Call: _e.mock.On("AllPipelines")}
}

func (_c *ReplicationStatusIface_AllPipelines_Call) Run(run func()) *ReplicationStatusIface_AllPipelines_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ReplicationStatusIface_AllPipelines_Call) Return(_a0 []common.Pipeline) *ReplicationStatusIface_AllPipelines_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ReplicationStatusIface_AllPipelines_Call) RunAndReturn(run func() []common.Pipeline) *ReplicationStatusIface_AllPipelines_Call {
	_c.Call.Return(run)
	return _c
}

// BackfillPipeline provides a mock function with given fields:
func (_m *ReplicationStatusIface) BackfillPipeline() common.Pipeline {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for BackfillPipeline")
	}

	var r0 common.Pipeline
	if rf, ok := ret.Get(0).(func() common.Pipeline); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Pipeline)
		}
	}

	return r0
}

// ReplicationStatusIface_BackfillPipeline_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BackfillPipeline'
type ReplicationStatusIface_BackfillPipeline_Call struct {
	*mock.Call
}

// BackfillPipeline is a helper method to define mock.On call
func (_e *ReplicationStatusIface_Expecter) BackfillPipeline() *ReplicationStatusIface_BackfillPipeline_Call {
	return &ReplicationStatusIface_BackfillPipeline_Call{Call: _e.mock.On("BackfillPipeline")}
}

func (_c *ReplicationStatusIface_BackfillPipeline_Call) Run(run func()) *ReplicationStatusIface_BackfillPipeline_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ReplicationStatusIface_BackfillPipeline_Call) Return(_a0 common.Pipeline) *ReplicationStatusIface_BackfillPipeline_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ReplicationStatusIface_BackfillPipeline_Call) RunAndReturn(run func() common.Pipeline) *ReplicationStatusIface_BackfillPipeline_Call {
	_c.Call.Return(run)
	return _c
}

// CleanupBeforeExit provides a mock function with given fields: statsToClear
func (_m *ReplicationStatusIface) CleanupBeforeExit(statsToClear []string) {
	_m.Called(statsToClear)
}

// ReplicationStatusIface_CleanupBeforeExit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CleanupBeforeExit'
type ReplicationStatusIface_CleanupBeforeExit_Call struct {
	*mock.Call
}

// CleanupBeforeExit is a helper method to define mock.On call
//   - statsToClear []string
func (_e *ReplicationStatusIface_Expecter) CleanupBeforeExit(statsToClear interface{}) *ReplicationStatusIface_CleanupBeforeExit_Call {
	return &ReplicationStatusIface_CleanupBeforeExit_Call{Call: _e.mock.On("CleanupBeforeExit", statsToClear)}
}

func (_c *ReplicationStatusIface_CleanupBeforeExit_Call) Run(run func(statsToClear []string)) *ReplicationStatusIface_CleanupBeforeExit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]string))
	})
	return _c
}

func (_c *ReplicationStatusIface_CleanupBeforeExit_Call) Return() *ReplicationStatusIface_CleanupBeforeExit_Call {
	_c.Call.Return()
	return _c
}

func (_c *ReplicationStatusIface_CleanupBeforeExit_Call) RunAndReturn(run func([]string)) *ReplicationStatusIface_CleanupBeforeExit_Call {
	_c.Call.Return(run)
	return _c
}

// ClearCustomSetting provides a mock function with given fields: settingsKey
func (_m *ReplicationStatusIface) ClearCustomSetting(settingsKey string) {
	_m.Called(settingsKey)
}

// ReplicationStatusIface_ClearCustomSetting_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClearCustomSetting'
type ReplicationStatusIface_ClearCustomSetting_Call struct {
	*mock.Call
}

// ClearCustomSetting is a helper method to define mock.On call
//   - settingsKey string
func (_e *ReplicationStatusIface_Expecter) ClearCustomSetting(settingsKey interface{}) *ReplicationStatusIface_ClearCustomSetting_Call {
	return &ReplicationStatusIface_ClearCustomSetting_Call{Call: _e.mock.On("ClearCustomSetting", settingsKey)}
}

func (_c *ReplicationStatusIface_ClearCustomSetting_Call) Run(run func(settingsKey string)) *ReplicationStatusIface_ClearCustomSetting_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ReplicationStatusIface_ClearCustomSetting_Call) Return() *ReplicationStatusIface_ClearCustomSetting_Call {
	_c.Call.Return()
	return _c
}

func (_c *ReplicationStatusIface_ClearCustomSetting_Call) RunAndReturn(run func(string)) *ReplicationStatusIface_ClearCustomSetting_Call {
	_c.Call.Return(run)
	return _c
}

// ClearErrors provides a mock function with given fields:
func (_m *ReplicationStatusIface) ClearErrors() {
	_m.Called()
}

// ReplicationStatusIface_ClearErrors_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClearErrors'
type ReplicationStatusIface_ClearErrors_Call struct {
	*mock.Call
}

// ClearErrors is a helper method to define mock.On call
func (_e *ReplicationStatusIface_Expecter) ClearErrors() *ReplicationStatusIface_ClearErrors_Call {
	return &ReplicationStatusIface_ClearErrors_Call{Call: _e.mock.On("ClearErrors")}
}

func (_c *ReplicationStatusIface_ClearErrors_Call) Run(run func()) *ReplicationStatusIface_ClearErrors_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ReplicationStatusIface_ClearErrors_Call) Return() *ReplicationStatusIface_ClearErrors_Call {
	_c.Call.Return()
	return _c
}

func (_c *ReplicationStatusIface_ClearErrors_Call) RunAndReturn(run func()) *ReplicationStatusIface_ClearErrors_Call {
	_c.Call.Return(run)
	return _c
}

// ClearErrorsWithString provides a mock function with given fields: subStr
func (_m *ReplicationStatusIface) ClearErrorsWithString(subStr string) {
	_m.Called(subStr)
}

// ReplicationStatusIface_ClearErrorsWithString_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClearErrorsWithString'
type ReplicationStatusIface_ClearErrorsWithString_Call struct {
	*mock.Call
}

// ClearErrorsWithString is a helper method to define mock.On call
//   - subStr string
func (_e *ReplicationStatusIface_Expecter) ClearErrorsWithString(subStr interface{}) *ReplicationStatusIface_ClearErrorsWithString_Call {
	return &ReplicationStatusIface_ClearErrorsWithString_Call{Call: _e.mock.On("ClearErrorsWithString", subStr)}
}

func (_c *ReplicationStatusIface_ClearErrorsWithString_Call) Run(run func(subStr string)) *ReplicationStatusIface_ClearErrorsWithString_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ReplicationStatusIface_ClearErrorsWithString_Call) Return() *ReplicationStatusIface_ClearErrorsWithString_Call {
	_c.Call.Return()
	return _c
}

func (_c *ReplicationStatusIface_ClearErrorsWithString_Call) RunAndReturn(run func(string)) *ReplicationStatusIface_ClearErrorsWithString_Call {
	_c.Call.Return(run)
	return _c
}

// ClearTemporaryCustomSettings provides a mock function with given fields:
func (_m *ReplicationStatusIface) ClearTemporaryCustomSettings() {
	_m.Called()
}

// ReplicationStatusIface_ClearTemporaryCustomSettings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClearTemporaryCustomSettings'
type ReplicationStatusIface_ClearTemporaryCustomSettings_Call struct {
	*mock.Call
}

// ClearTemporaryCustomSettings is a helper method to define mock.On call
func (_e *ReplicationStatusIface_Expecter) ClearTemporaryCustomSettings() *ReplicationStatusIface_ClearTemporaryCustomSettings_Call {
	return &ReplicationStatusIface_ClearTemporaryCustomSettings_Call{Call: _e.mock.On("ClearTemporaryCustomSettings")}
}

func (_c *ReplicationStatusIface_ClearTemporaryCustomSettings_Call) Run(run func()) *ReplicationStatusIface_ClearTemporaryCustomSettings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ReplicationStatusIface_ClearTemporaryCustomSettings_Call) Return() *ReplicationStatusIface_ClearTemporaryCustomSettings_Call {
	_c.Call.Return()
	return _c
}

func (_c *ReplicationStatusIface_ClearTemporaryCustomSettings_Call) RunAndReturn(run func()) *ReplicationStatusIface_ClearTemporaryCustomSettings_Call {
	_c.Call.Return(run)
	return _c
}

// Errors provides a mock function with given fields:
func (_m *ReplicationStatusIface) Errors() pipeline.PipelineErrorArray {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Errors")
	}

	var r0 pipeline.PipelineErrorArray
	if rf, ok := ret.Get(0).(func() pipeline.PipelineErrorArray); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pipeline.PipelineErrorArray)
		}
	}

	return r0
}

// ReplicationStatusIface_Errors_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Errors'
type ReplicationStatusIface_Errors_Call struct {
	*mock.Call
}

// Errors is a helper method to define mock.On call
func (_e *ReplicationStatusIface_Expecter) Errors() *ReplicationStatusIface_Errors_Call {
	return &ReplicationStatusIface_Errors_Call{Call: _e.mock.On("Errors")}
}

func (_c *ReplicationStatusIface_Errors_Call) Run(run func()) *ReplicationStatusIface_Errors_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ReplicationStatusIface_Errors_Call) Return(_a0 pipeline.PipelineErrorArray) *ReplicationStatusIface_Errors_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ReplicationStatusIface_Errors_Call) RunAndReturn(run func() pipeline.PipelineErrorArray) *ReplicationStatusIface_Errors_Call {
	_c.Call.Return(run)
	return _c
}

// GetEventsManager provides a mock function with given fields:
func (_m *ReplicationStatusIface) GetEventsManager() pipeline.PipelineEventsManager {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetEventsManager")
	}

	var r0 pipeline.PipelineEventsManager
	if rf, ok := ret.Get(0).(func() pipeline.PipelineEventsManager); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pipeline.PipelineEventsManager)
		}
	}

	return r0
}

// ReplicationStatusIface_GetEventsManager_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEventsManager'
type ReplicationStatusIface_GetEventsManager_Call struct {
	*mock.Call
}

// GetEventsManager is a helper method to define mock.On call
func (_e *ReplicationStatusIface_Expecter) GetEventsManager() *ReplicationStatusIface_GetEventsManager_Call {
	return &ReplicationStatusIface_GetEventsManager_Call{Call: _e.mock.On("GetEventsManager")}
}

func (_c *ReplicationStatusIface_GetEventsManager_Call) Run(run func()) *ReplicationStatusIface_GetEventsManager_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ReplicationStatusIface_GetEventsManager_Call) Return(_a0 pipeline.PipelineEventsManager) *ReplicationStatusIface_GetEventsManager_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ReplicationStatusIface_GetEventsManager_Call) RunAndReturn(run func() pipeline.PipelineEventsManager) *ReplicationStatusIface_GetEventsManager_Call {
	_c.Call.Return(run)
	return _c
}

// GetEventsProducer provides a mock function with given fields:
func (_m *ReplicationStatusIface) GetEventsProducer() common.PipelineEventsProducer {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetEventsProducer")
	}

	var r0 common.PipelineEventsProducer
	if rf, ok := ret.Get(0).(func() common.PipelineEventsProducer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.PipelineEventsProducer)
		}
	}

	return r0
}

// ReplicationStatusIface_GetEventsProducer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEventsProducer'
type ReplicationStatusIface_GetEventsProducer_Call struct {
	*mock.Call
}

// GetEventsProducer is a helper method to define mock.On call
func (_e *ReplicationStatusIface_Expecter) GetEventsProducer() *ReplicationStatusIface_GetEventsProducer_Call {
	return &ReplicationStatusIface_GetEventsProducer_Call{Call: _e.mock.On("GetEventsProducer")}
}

func (_c *ReplicationStatusIface_GetEventsProducer_Call) Run(run func()) *ReplicationStatusIface_GetEventsProducer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ReplicationStatusIface_GetEventsProducer_Call) Return(_a0 common.PipelineEventsProducer) *ReplicationStatusIface_GetEventsProducer_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ReplicationStatusIface_GetEventsProducer_Call) RunAndReturn(run func() common.PipelineEventsProducer) *ReplicationStatusIface_GetEventsProducer_Call {
	_c.Call.Return(run)
	return _c
}

// GetOverviewStats provides a mock function with given fields: pipelineType
func (_m *ReplicationStatusIface) GetOverviewStats(pipelineType common.PipelineType) *expvar.Map {
	ret := _m.Called(pipelineType)

	if len(ret) == 0 {
		panic("no return value specified for GetOverviewStats")
	}

	var r0 *expvar.Map
	if rf, ok := ret.Get(0).(func(common.PipelineType) *expvar.Map); ok {
		r0 = rf(pipelineType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*expvar.Map)
		}
	}

	return r0
}

// ReplicationStatusIface_GetOverviewStats_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOverviewStats'
type ReplicationStatusIface_GetOverviewStats_Call struct {
	*mock.Call
}

// GetOverviewStats is a helper method to define mock.On call
//   - pipelineType common.PipelineType
func (_e *ReplicationStatusIface_Expecter) GetOverviewStats(pipelineType interface{}) *ReplicationStatusIface_GetOverviewStats_Call {
	return &ReplicationStatusIface_GetOverviewStats_Call{Call: _e.mock.On("GetOverviewStats", pipelineType)}
}

func (_c *ReplicationStatusIface_GetOverviewStats_Call) Run(run func(pipelineType common.PipelineType)) *ReplicationStatusIface_GetOverviewStats_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.PipelineType))
	})
	return _c
}

func (_c *ReplicationStatusIface_GetOverviewStats_Call) Return(_a0 *expvar.Map) *ReplicationStatusIface_GetOverviewStats_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ReplicationStatusIface_GetOverviewStats_Call) RunAndReturn(run func(common.PipelineType) *expvar.Map) *ReplicationStatusIface_GetOverviewStats_Call {
	_c.Call.Return(run)
	return _c
}

// GetProgress provides a mock function with given fields:
func (_m *ReplicationStatusIface) GetProgress() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetProgress")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ReplicationStatusIface_GetProgress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProgress'
type ReplicationStatusIface_GetProgress_Call struct {
	*mock.Call
}

// GetProgress is a helper method to define mock.On call
func (_e *ReplicationStatusIface_Expecter) GetProgress() *ReplicationStatusIface_GetProgress_Call {
	return &ReplicationStatusIface_GetProgress_Call{Call: _e.mock.On("GetProgress")}
}

func (_c *ReplicationStatusIface_GetProgress_Call) Run(run func()) *ReplicationStatusIface_GetProgress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ReplicationStatusIface_GetProgress_Call) Return(_a0 string) *ReplicationStatusIface_GetProgress_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ReplicationStatusIface_GetProgress_Call) RunAndReturn(run func() string) *ReplicationStatusIface_GetProgress_Call {
	_c.Call.Return(run)
	return _c
}

// GetSpecInternalId provides a mock function with given fields:
func (_m *ReplicationStatusIface) GetSpecInternalId() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSpecInternalId")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ReplicationStatusIface_GetSpecInternalId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSpecInternalId'
type ReplicationStatusIface_GetSpecInternalId_Call struct {
	*mock.Call
}

// GetSpecInternalId is a helper method to define mock.On call
func (_e *ReplicationStatusIface_Expecter) GetSpecInternalId() *ReplicationStatusIface_GetSpecInternalId_Call {
	return &ReplicationStatusIface_GetSpecInternalId_Call{Call: _e.mock.On("GetSpecInternalId")}
}

func (_c *ReplicationStatusIface_GetSpecInternalId_Call) Run(run func()) *ReplicationStatusIface_GetSpecInternalId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ReplicationStatusIface_GetSpecInternalId_Call) Return(_a0 string) *ReplicationStatusIface_GetSpecInternalId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ReplicationStatusIface_GetSpecInternalId_Call) RunAndReturn(run func() string) *ReplicationStatusIface_GetSpecInternalId_Call {
	_c.Call.Return(run)
	return _c
}

// GetStats provides a mock function with given fields: registryName, pipelineType
func (_m *ReplicationStatusIface) GetStats(registryName string, pipelineType common.PipelineType) *expvar.Map {
	ret := _m.Called(registryName, pipelineType)

	if len(ret) == 0 {
		panic("no return value specified for GetStats")
	}

	var r0 *expvar.Map
	if rf, ok := ret.Get(0).(func(string, common.PipelineType) *expvar.Map); ok {
		r0 = rf(registryName, pipelineType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*expvar.Map)
		}
	}

	return r0
}

// ReplicationStatusIface_GetStats_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStats'
type ReplicationStatusIface_GetStats_Call struct {
	*mock.Call
}

// GetStats is a helper method to define mock.On call
//   - registryName string
//   - pipelineType common.PipelineType
func (_e *ReplicationStatusIface_Expecter) GetStats(registryName interface{}, pipelineType interface{}) *ReplicationStatusIface_GetStats_Call {
	return &ReplicationStatusIface_GetStats_Call{Call: _e.mock.On("GetStats", registryName, pipelineType)}
}

func (_c *ReplicationStatusIface_GetStats_Call) Run(run func(registryName string, pipelineType common.PipelineType)) *ReplicationStatusIface_GetStats_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(common.PipelineType))
	})
	return _c
}

func (_c *ReplicationStatusIface_GetStats_Call) Return(_a0 *expvar.Map) *ReplicationStatusIface_GetStats_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ReplicationStatusIface_GetStats_Call) RunAndReturn(run func(string, common.PipelineType) *expvar.Map) *ReplicationStatusIface_GetStats_Call {
	_c.Call.Return(run)
	return _c
}

// LoadLatestBrokenMap provides a mock function with given fields:
func (_m *ReplicationStatusIface) LoadLatestBrokenMap() {
	_m.Called()
}

// ReplicationStatusIface_LoadLatestBrokenMap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadLatestBrokenMap'
type ReplicationStatusIface_LoadLatestBrokenMap_Call struct {
	*mock.Call
}

// LoadLatestBrokenMap is a helper method to define mock.On call
func (_e *ReplicationStatusIface_Expecter) LoadLatestBrokenMap() *ReplicationStatusIface_LoadLatestBrokenMap_Call {
	return &ReplicationStatusIface_LoadLatestBrokenMap_Call{Call: _e.mock.On("LoadLatestBrokenMap")}
}

func (_c *ReplicationStatusIface_LoadLatestBrokenMap_Call) Run(run func()) *ReplicationStatusIface_LoadLatestBrokenMap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ReplicationStatusIface_LoadLatestBrokenMap_Call) Return() *ReplicationStatusIface_LoadLatestBrokenMap_Call {
	_c.Call.Return()
	return _c
}

func (_c *ReplicationStatusIface_LoadLatestBrokenMap_Call) RunAndReturn(run func()) *ReplicationStatusIface_LoadLatestBrokenMap_Call {
	_c.Call.Return(run)
	return _c
}

// Pipeline provides a mock function with given fields:
func (_m *ReplicationStatusIface) Pipeline() common.Pipeline {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Pipeline")
	}

	var r0 common.Pipeline
	if rf, ok := ret.Get(0).(func() common.Pipeline); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Pipeline)
		}
	}

	return r0
}

// ReplicationStatusIface_Pipeline_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Pipeline'
type ReplicationStatusIface_Pipeline_Call struct {
	*mock.Call
}

// Pipeline is a helper method to define mock.On call
func (_e *ReplicationStatusIface_Expecter) Pipeline() *ReplicationStatusIface_Pipeline_Call {
	return &ReplicationStatusIface_Pipeline_Call{Call: _e.mock.On("Pipeline")}
}

func (_c *ReplicationStatusIface_Pipeline_Call) Run(run func()) *ReplicationStatusIface_Pipeline_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ReplicationStatusIface_Pipeline_Call) Return(_a0 common.Pipeline) *ReplicationStatusIface_Pipeline_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ReplicationStatusIface_Pipeline_Call) RunAndReturn(run func() common.Pipeline) *ReplicationStatusIface_Pipeline_Call {
	_c.Call.Return(run)
	return _c
}

// PopulateReplInfo provides a mock function with given fields: replInfo, bypassUIErrorCodes, processErrorMsgForUI
func (_m *ReplicationStatusIface) PopulateReplInfo(replInfo *base.ReplicationInfo, bypassUIErrorCodes func(string) bool, processErrorMsgForUI func(string) string) {
	_m.Called(replInfo, bypassUIErrorCodes, processErrorMsgForUI)
}

// ReplicationStatusIface_PopulateReplInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PopulateReplInfo'
type ReplicationStatusIface_PopulateReplInfo_Call struct {
	*mock.Call
}

// PopulateReplInfo is a helper method to define mock.On call
//   - replInfo *base.ReplicationInfo
//   - bypassUIErrorCodes func(string) bool
//   - processErrorMsgForUI func(string) string
func (_e *ReplicationStatusIface_Expecter) PopulateReplInfo(replInfo interface{}, bypassUIErrorCodes interface{}, processErrorMsgForUI interface{}) *ReplicationStatusIface_PopulateReplInfo_Call {
	return &ReplicationStatusIface_PopulateReplInfo_Call{Call: _e.mock.On("PopulateReplInfo", replInfo, bypassUIErrorCodes, processErrorMsgForUI)}
}

func (_c *ReplicationStatusIface_PopulateReplInfo_Call) Run(run func(replInfo *base.ReplicationInfo, bypassUIErrorCodes func(string) bool, processErrorMsgForUI func(string) string)) *ReplicationStatusIface_PopulateReplInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*base.ReplicationInfo), args[1].(func(string) bool), args[2].(func(string) string))
	})
	return _c
}

func (_c *ReplicationStatusIface_PopulateReplInfo_Call) Return() *ReplicationStatusIface_PopulateReplInfo_Call {
	_c.Call.Return()
	return _c
}

func (_c *ReplicationStatusIface_PopulateReplInfo_Call) RunAndReturn(run func(*base.ReplicationInfo, func(string) bool, func(string) string)) *ReplicationStatusIface_PopulateReplInfo_Call {
	_c.Call.Return(run)
	return _c
}

// Publish provides a mock function with given fields: lock
func (_m *ReplicationStatusIface) Publish(lock bool) {
	_m.Called(lock)
}

// ReplicationStatusIface_Publish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Publish'
type ReplicationStatusIface_Publish_Call struct {
	*mock.Call
}

// Publish is a helper method to define mock.On call
//   - lock bool
func (_e *ReplicationStatusIface_Expecter) Publish(lock interface{}) *ReplicationStatusIface_Publish_Call {
	return &ReplicationStatusIface_Publish_Call{Call: _e.mock.On("Publish", lock)}
}

func (_c *ReplicationStatusIface_Publish_Call) Run(run func(lock bool)) *ReplicationStatusIface_Publish_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bool))
	})
	return _c
}

func (_c *ReplicationStatusIface_Publish_Call) Return() *ReplicationStatusIface_Publish_Call {
	_c.Call.Return()
	return _c
}

func (_c *ReplicationStatusIface_Publish_Call) RunAndReturn(run func(bool)) *ReplicationStatusIface_Publish_Call {
	_c.Call.Return(run)
	return _c
}

// PublishWithStatus provides a mock function with given fields: status, lock
func (_m *ReplicationStatusIface) PublishWithStatus(status string, lock bool) {
	_m.Called(status, lock)
}

// ReplicationStatusIface_PublishWithStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublishWithStatus'
type ReplicationStatusIface_PublishWithStatus_Call struct {
	*mock.Call
}

// PublishWithStatus is a helper method to define mock.On call
//   - status string
//   - lock bool
func (_e *ReplicationStatusIface_Expecter) PublishWithStatus(status interface{}, lock interface{}) *ReplicationStatusIface_PublishWithStatus_Call {
	return &ReplicationStatusIface_PublishWithStatus_Call{Call: _e.mock.On("PublishWithStatus", status, lock)}
}

func (_c *ReplicationStatusIface_PublishWithStatus_Call) Run(run func(status string, lock bool)) *ReplicationStatusIface_PublishWithStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(bool))
	})
	return _c
}

func (_c *ReplicationStatusIface_PublishWithStatus_Call) Return() *ReplicationStatusIface_PublishWithStatus_Call {
	_c.Call.Return()
	return _c
}

func (_c *ReplicationStatusIface_PublishWithStatus_Call) RunAndReturn(run func(string, bool)) *ReplicationStatusIface_PublishWithStatus_Call {
	_c.Call.Return(run)
	return _c
}

// RecordBackfillProgress provides a mock function with given fields: progress
func (_m *ReplicationStatusIface) RecordBackfillProgress(progress string) {
	_m.Called(progress)
}

// ReplicationStatusIface_RecordBackfillProgress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RecordBackfillProgress'
type ReplicationStatusIface_RecordBackfillProgress_Call struct {
	*mock.Call
}

// RecordBackfillProgress is a helper method to define mock.On call
//   - progress string
func (_e *ReplicationStatusIface_Expecter) RecordBackfillProgress(progress interface{}) *ReplicationStatusIface_RecordBackfillProgress_Call {
	return &ReplicationStatusIface_RecordBackfillProgress_Call{Call: _e.mock.On("RecordBackfillProgress", progress)}
}

func (_c *ReplicationStatusIface_RecordBackfillProgress_Call) Run(run func(progress string)) *ReplicationStatusIface_RecordBackfillProgress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ReplicationStatusIface_RecordBackfillProgress_Call) Return() *ReplicationStatusIface_RecordBackfillProgress_Call {
	_c.Call.Return()
	return _c
}

func (_c *ReplicationStatusIface_RecordBackfillProgress_Call) RunAndReturn(run func(string)) *ReplicationStatusIface_RecordBackfillProgress_Call {
	_c.Call.Return(run)
	return _c
}

// RecordProgress provides a mock function with given fields: progress
func (_m *ReplicationStatusIface) RecordProgress(progress string) {
	_m.Called(progress)
}

// ReplicationStatusIface_RecordProgress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RecordProgress'
type ReplicationStatusIface_RecordProgress_Call struct {
	*mock.Call
}

// RecordProgress is a helper method to define mock.On call
//   - progress string
func (_e *ReplicationStatusIface_Expecter) RecordProgress(progress interface{}) *ReplicationStatusIface_RecordProgress_Call {
	return &ReplicationStatusIface_RecordProgress_Call{Call: _e.mock.On("RecordProgress", progress)}
}

func (_c *ReplicationStatusIface_RecordProgress_Call) Run(run func(progress string)) *ReplicationStatusIface_RecordProgress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ReplicationStatusIface_RecordProgress_Call) Return() *ReplicationStatusIface_RecordProgress_Call {
	_c.Call.Return()
	return _c
}

func (_c *ReplicationStatusIface_RecordProgress_Call) RunAndReturn(run func(string)) *ReplicationStatusIface_RecordProgress_Call {
	_c.Call.Return(run)
	return _c
}

// RemovePipeline provides a mock function with given fields: _a0
func (_m *ReplicationStatusIface) RemovePipeline(_a0 common.Pipeline) {
	_m.Called(_a0)
}

// ReplicationStatusIface_RemovePipeline_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemovePipeline'
type ReplicationStatusIface_RemovePipeline_Call struct {
	*mock.Call
}

// RemovePipeline is a helper method to define mock.On call
//   - _a0 common.Pipeline
func (_e *ReplicationStatusIface_Expecter) RemovePipeline(_a0 interface{}) *ReplicationStatusIface_RemovePipeline_Call {
	return &ReplicationStatusIface_RemovePipeline_Call{Call: _e.mock.On("RemovePipeline", _a0)}
}

func (_c *ReplicationStatusIface_RemovePipeline_Call) Run(run func(_a0 common.Pipeline)) *ReplicationStatusIface_RemovePipeline_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.Pipeline))
	})
	return _c
}

func (_c *ReplicationStatusIface_RemovePipeline_Call) Return() *ReplicationStatusIface_RemovePipeline_Call {
	_c.Call.Return()
	return _c
}

func (_c *ReplicationStatusIface_RemovePipeline_Call) RunAndReturn(run func(common.Pipeline)) *ReplicationStatusIface_RemovePipeline_Call {
	_c.Call.Return(run)
	return _c
}

// RepId provides a mock function with given fields:
func (_m *ReplicationStatusIface) RepId() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for RepId")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ReplicationStatusIface_RepId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RepId'
type ReplicationStatusIface_RepId_Call struct {
	*mock.Call
}

// RepId is a helper method to define mock.On call
func (_e *ReplicationStatusIface_Expecter) RepId() *ReplicationStatusIface_RepId_Call {
	return &ReplicationStatusIface_RepId_Call{Call: _e.mock.On("RepId")}
}

func (_c *ReplicationStatusIface_RepId_Call) Run(run func()) *ReplicationStatusIface_RepId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ReplicationStatusIface_RepId_Call) Return(_a0 string) *ReplicationStatusIface_RepId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ReplicationStatusIface_RepId_Call) RunAndReturn(run func() string) *ReplicationStatusIface_RepId_Call {
	_c.Call.Return(run)
	return _c
}

// ResetStorage provides a mock function with given fields: pipelineType
func (_m *ReplicationStatusIface) ResetStorage(pipelineType common.PipelineType) {
	_m.Called(pipelineType)
}

// ReplicationStatusIface_ResetStorage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResetStorage'
type ReplicationStatusIface_ResetStorage_Call struct {
	*mock.Call
}

// ResetStorage is a helper method to define mock.On call
//   - pipelineType common.PipelineType
func (_e *ReplicationStatusIface_Expecter) ResetStorage(pipelineType interface{}) *ReplicationStatusIface_ResetStorage_Call {
	return &ReplicationStatusIface_ResetStorage_Call{Call: _e.mock.On("ResetStorage", pipelineType)}
}

func (_c *ReplicationStatusIface_ResetStorage_Call) Run(run func(pipelineType common.PipelineType)) *ReplicationStatusIface_ResetStorage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.PipelineType))
	})
	return _c
}

func (_c *ReplicationStatusIface_ResetStorage_Call) Return() *ReplicationStatusIface_ResetStorage_Call {
	_c.Call.Return()
	return _c
}

func (_c *ReplicationStatusIface_ResetStorage_Call) RunAndReturn(run func(common.PipelineType)) *ReplicationStatusIface_ResetStorage_Call {
	_c.Call.Return(run)
	return _c
}

// RuntimeStatus provides a mock function with given fields: lock
func (_m *ReplicationStatusIface) RuntimeStatus(lock bool) pipeline.ReplicationState {
	ret := _m.Called(lock)

	if len(ret) == 0 {
		panic("no return value specified for RuntimeStatus")
	}

	var r0 pipeline.ReplicationState
	if rf, ok := ret.Get(0).(func(bool) pipeline.ReplicationState); ok {
		r0 = rf(lock)
	} else {
		r0 = ret.Get(0).(pipeline.ReplicationState)
	}

	return r0
}

// ReplicationStatusIface_RuntimeStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RuntimeStatus'
type ReplicationStatusIface_RuntimeStatus_Call struct {
	*mock.Call
}

// RuntimeStatus is a helper method to define mock.On call
//   - lock bool
func (_e *ReplicationStatusIface_Expecter) RuntimeStatus(lock interface{}) *ReplicationStatusIface_RuntimeStatus_Call {
	return &ReplicationStatusIface_RuntimeStatus_Call{Call: _e.mock.On("RuntimeStatus", lock)}
}

func (_c *ReplicationStatusIface_RuntimeStatus_Call) Run(run func(lock bool)) *ReplicationStatusIface_RuntimeStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bool))
	})
	return _c
}

func (_c *ReplicationStatusIface_RuntimeStatus_Call) Return(_a0 pipeline.ReplicationState) *ReplicationStatusIface_RuntimeStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ReplicationStatusIface_RuntimeStatus_Call) RunAndReturn(run func(bool) pipeline.ReplicationState) *ReplicationStatusIface_RuntimeStatus_Call {
	_c.Call.Return(run)
	return _c
}

// SetCustomSettings provides a mock function with given fields: customSettings
func (_m *ReplicationStatusIface) SetCustomSettings(customSettings map[string]interface{}) {
	_m.Called(customSettings)
}

// ReplicationStatusIface_SetCustomSettings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetCustomSettings'
type ReplicationStatusIface_SetCustomSettings_Call struct {
	*mock.Call
}

// SetCustomSettings is a helper method to define mock.On call
//   - customSettings map[string]interface{}
func (_e *ReplicationStatusIface_Expecter) SetCustomSettings(customSettings interface{}) *ReplicationStatusIface_SetCustomSettings_Call {
	return &ReplicationStatusIface_SetCustomSettings_Call{Call: _e.mock.On("SetCustomSettings", customSettings)}
}

func (_c *ReplicationStatusIface_SetCustomSettings_Call) Run(run func(customSettings map[string]interface{})) *ReplicationStatusIface_SetCustomSettings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(map[string]interface{}))
	})
	return _c
}

func (_c *ReplicationStatusIface_SetCustomSettings_Call) Return() *ReplicationStatusIface_SetCustomSettings_Call {
	_c.Call.Return()
	return _c
}

func (_c *ReplicationStatusIface_SetCustomSettings_Call) RunAndReturn(run func(map[string]interface{})) *ReplicationStatusIface_SetCustomSettings_Call {
	_c.Call.Return(run)
	return _c
}

// SetOverviewStats provides a mock function with given fields: stats, pipelineType
func (_m *ReplicationStatusIface) SetOverviewStats(stats *expvar.Map, pipelineType common.PipelineType) {
	_m.Called(stats, pipelineType)
}

// ReplicationStatusIface_SetOverviewStats_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetOverviewStats'
type ReplicationStatusIface_SetOverviewStats_Call struct {
	*mock.Call
}

// SetOverviewStats is a helper method to define mock.On call
//   - stats *expvar.Map
//   - pipelineType common.PipelineType
func (_e *ReplicationStatusIface_Expecter) SetOverviewStats(stats interface{}, pipelineType interface{}) *ReplicationStatusIface_SetOverviewStats_Call {
	return &ReplicationStatusIface_SetOverviewStats_Call{Call: _e.mock.On("SetOverviewStats", stats, pipelineType)}
}

func (_c *ReplicationStatusIface_SetOverviewStats_Call) Run(run func(stats *expvar.Map, pipelineType common.PipelineType)) *ReplicationStatusIface_SetOverviewStats_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*expvar.Map), args[1].(common.PipelineType))
	})
	return _c
}

func (_c *ReplicationStatusIface_SetOverviewStats_Call) Return() *ReplicationStatusIface_SetOverviewStats_Call {
	_c.Call.Return()
	return _c
}

func (_c *ReplicationStatusIface_SetOverviewStats_Call) RunAndReturn(run func(*expvar.Map, common.PipelineType)) *ReplicationStatusIface_SetOverviewStats_Call {
	_c.Call.Return(run)
	return _c
}

// SetPipeline provides a mock function with given fields: _a0
func (_m *ReplicationStatusIface) SetPipeline(_a0 common.Pipeline) {
	_m.Called(_a0)
}

// ReplicationStatusIface_SetPipeline_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetPipeline'
type ReplicationStatusIface_SetPipeline_Call struct {
	*mock.Call
}

// SetPipeline is a helper method to define mock.On call
//   - _a0 common.Pipeline
func (_e *ReplicationStatusIface_Expecter) SetPipeline(_a0 interface{}) *ReplicationStatusIface_SetPipeline_Call {
	return &ReplicationStatusIface_SetPipeline_Call{Call: _e.mock.On("SetPipeline", _a0)}
}

func (_c *ReplicationStatusIface_SetPipeline_Call) Run(run func(_a0 common.Pipeline)) *ReplicationStatusIface_SetPipeline_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.Pipeline))
	})
	return _c
}

func (_c *ReplicationStatusIface_SetPipeline_Call) Return() *ReplicationStatusIface_SetPipeline_Call {
	_c.Call.Return()
	return _c
}

func (_c *ReplicationStatusIface_SetPipeline_Call) RunAndReturn(run func(common.Pipeline)) *ReplicationStatusIface_SetPipeline_Call {
	_c.Call.Return(run)
	return _c
}

// SetStats provides a mock function with given fields: registryName, stats, pipelineType
func (_m *ReplicationStatusIface) SetStats(registryName string, stats *expvar.Map, pipelineType common.PipelineType) {
	_m.Called(registryName, stats, pipelineType)
}

// ReplicationStatusIface_SetStats_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetStats'
type ReplicationStatusIface_SetStats_Call struct {
	*mock.Call
}

// SetStats is a helper method to define mock.On call
//   - registryName string
//   - stats *expvar.Map
//   - pipelineType common.PipelineType
func (_e *ReplicationStatusIface_Expecter) SetStats(registryName interface{}, stats interface{}, pipelineType interface{}) *ReplicationStatusIface_SetStats_Call {
	return &ReplicationStatusIface_SetStats_Call{Call: _e.mock.On("SetStats", registryName, stats, pipelineType)}
}

func (_c *ReplicationStatusIface_SetStats_Call) Run(run func(registryName string, stats *expvar.Map, pipelineType common.PipelineType)) *ReplicationStatusIface_SetStats_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*expvar.Map), args[2].(common.PipelineType))
	})
	return _c
}

func (_c *ReplicationStatusIface_SetStats_Call) Return() *ReplicationStatusIface_SetStats_Call {
	_c.Call.Return()
	return _c
}

func (_c *ReplicationStatusIface_SetStats_Call) RunAndReturn(run func(string, *expvar.Map, common.PipelineType)) *ReplicationStatusIface_SetStats_Call {
	_c.Call.Return(run)
	return _c
}

// SetUpdater provides a mock function with given fields: updater
func (_m *ReplicationStatusIface) SetUpdater(updater interface{}) error {
	ret := _m.Called(updater)

	if len(ret) == 0 {
		panic("no return value specified for SetUpdater")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(updater)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReplicationStatusIface_SetUpdater_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetUpdater'
type ReplicationStatusIface_SetUpdater_Call struct {
	*mock.Call
}

// SetUpdater is a helper method to define mock.On call
//   - updater interface{}
func (_e *ReplicationStatusIface_Expecter) SetUpdater(updater interface{}) *ReplicationStatusIface_SetUpdater_Call {
	return &ReplicationStatusIface_SetUpdater_Call{Call: _e.mock.On("SetUpdater", updater)}
}

func (_c *ReplicationStatusIface_SetUpdater_Call) Run(run func(updater interface{})) *ReplicationStatusIface_SetUpdater_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *ReplicationStatusIface_SetUpdater_Call) Return(_a0 error) *ReplicationStatusIface_SetUpdater_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ReplicationStatusIface_SetUpdater_Call) RunAndReturn(run func(interface{}) error) *ReplicationStatusIface_SetUpdater_Call {
	_c.Call.Return(run)
	return _c
}

// SetVbList provides a mock function with given fields: vb_list
func (_m *ReplicationStatusIface) SetVbList(vb_list []uint16) {
	_m.Called(vb_list)
}

// ReplicationStatusIface_SetVbList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetVbList'
type ReplicationStatusIface_SetVbList_Call struct {
	*mock.Call
}

// SetVbList is a helper method to define mock.On call
//   - vb_list []uint16
func (_e *ReplicationStatusIface_Expecter) SetVbList(vb_list interface{}) *ReplicationStatusIface_SetVbList_Call {
	return &ReplicationStatusIface_SetVbList_Call{Call: _e.mock.On("SetVbList", vb_list)}
}

func (_c *ReplicationStatusIface_SetVbList_Call) Run(run func(vb_list []uint16)) *ReplicationStatusIface_SetVbList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]uint16))
	})
	return _c
}

func (_c *ReplicationStatusIface_SetVbList_Call) Return() *ReplicationStatusIface_SetVbList_Call {
	_c.Call.Return()
	return _c
}

func (_c *ReplicationStatusIface_SetVbList_Call) RunAndReturn(run func([]uint16)) *ReplicationStatusIface_SetVbList_Call {
	_c.Call.Return(run)
	return _c
}

// SettingsMap provides a mock function with given fields:
func (_m *ReplicationStatusIface) SettingsMap() map[string]interface{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for SettingsMap")
	}

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func() map[string]interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	return r0
}

// ReplicationStatusIface_SettingsMap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SettingsMap'
type ReplicationStatusIface_SettingsMap_Call struct {
	*mock.Call
}

// SettingsMap is a helper method to define mock.On call
func (_e *ReplicationStatusIface_Expecter) SettingsMap() *ReplicationStatusIface_SettingsMap_Call {
	return &ReplicationStatusIface_SettingsMap_Call{Call: _e.mock.On("SettingsMap")}
}

func (_c *ReplicationStatusIface_SettingsMap_Call) Run(run func()) *ReplicationStatusIface_SettingsMap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ReplicationStatusIface_SettingsMap_Call) Return(_a0 map[string]interface{}) *ReplicationStatusIface_SettingsMap_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ReplicationStatusIface_SettingsMap_Call) RunAndReturn(run func() map[string]interface{}) *ReplicationStatusIface_SettingsMap_Call {
	_c.Call.Return(run)
	return _c
}

// Spec provides a mock function with given fields:
func (_m *ReplicationStatusIface) Spec() *metadata.ReplicationSpecification {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Spec")
	}

	var r0 *metadata.ReplicationSpecification
	if rf, ok := ret.Get(0).(func() *metadata.ReplicationSpecification); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*metadata.ReplicationSpecification)
		}
	}

	return r0
}

// ReplicationStatusIface_Spec_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Spec'
type ReplicationStatusIface_Spec_Call struct {
	*mock.Call
}

// Spec is a helper method to define mock.On call
func (_e *ReplicationStatusIface_Expecter) Spec() *ReplicationStatusIface_Spec_Call {
	return &ReplicationStatusIface_Spec_Call{Call: _e.mock.On("Spec")}
}

func (_c *ReplicationStatusIface_Spec_Call) Run(run func()) *ReplicationStatusIface_Spec_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ReplicationStatusIface_Spec_Call) Return(_a0 *metadata.ReplicationSpecification) *ReplicationStatusIface_Spec_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ReplicationStatusIface_Spec_Call) RunAndReturn(run func() *metadata.ReplicationSpecification) *ReplicationStatusIface_Spec_Call {
	_c.Call.Return(run)
	return _c
}

// Storage provides a mock function with given fields: pipelineType
func (_m *ReplicationStatusIface) Storage(pipelineType common.PipelineType) *expvar.Map {
	ret := _m.Called(pipelineType)

	if len(ret) == 0 {
		panic("no return value specified for Storage")
	}

	var r0 *expvar.Map
	if rf, ok := ret.Get(0).(func(common.PipelineType) *expvar.Map); ok {
		r0 = rf(pipelineType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*expvar.Map)
		}
	}

	return r0
}

// ReplicationStatusIface_Storage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Storage'
type ReplicationStatusIface_Storage_Call struct {
	*mock.Call
}

// Storage is a helper method to define mock.On call
//   - pipelineType common.PipelineType
func (_e *ReplicationStatusIface_Expecter) Storage(pipelineType interface{}) *ReplicationStatusIface_Storage_Call {
	return &ReplicationStatusIface_Storage_Call{Call: _e.mock.On("Storage", pipelineType)}
}

func (_c *ReplicationStatusIface_Storage_Call) Run(run func(pipelineType common.PipelineType)) *ReplicationStatusIface_Storage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.PipelineType))
	})
	return _c
}

func (_c *ReplicationStatusIface_Storage_Call) Return(_a0 *expvar.Map) *ReplicationStatusIface_Storage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ReplicationStatusIface_Storage_Call) RunAndReturn(run func(common.PipelineType) *expvar.Map) *ReplicationStatusIface_Storage_Call {
	_c.Call.Return(run)
	return _c
}

// String provides a mock function with given fields:
func (_m *ReplicationStatusIface) String() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for String")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ReplicationStatusIface_String_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'String'
type ReplicationStatusIface_String_Call struct {
	*mock.Call
}

// String is a helper method to define mock.On call
func (_e *ReplicationStatusIface_Expecter) String() *ReplicationStatusIface_String_Call {
	return &ReplicationStatusIface_String_Call{Call: _e.mock.On("String")}
}

func (_c *ReplicationStatusIface_String_Call) Run(run func()) *ReplicationStatusIface_String_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ReplicationStatusIface_String_Call) Return(_a0 string) *ReplicationStatusIface_String_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ReplicationStatusIface_String_Call) RunAndReturn(run func() string) *ReplicationStatusIface_String_Call {
	_c.Call.Return(run)
	return _c
}

// Updater provides a mock function with given fields:
func (_m *ReplicationStatusIface) Updater() interface{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Updater")
	}

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// ReplicationStatusIface_Updater_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Updater'
type ReplicationStatusIface_Updater_Call struct {
	*mock.Call
}

// Updater is a helper method to define mock.On call
func (_e *ReplicationStatusIface_Expecter) Updater() *ReplicationStatusIface_Updater_Call {
	return &ReplicationStatusIface_Updater_Call{Call: _e.mock.On("Updater")}
}

func (_c *ReplicationStatusIface_Updater_Call) Run(run func()) *ReplicationStatusIface_Updater_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ReplicationStatusIface_Updater_Call) Return(_a0 interface{}) *ReplicationStatusIface_Updater_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ReplicationStatusIface_Updater_Call) RunAndReturn(run func() interface{}) *ReplicationStatusIface_Updater_Call {
	_c.Call.Return(run)
	return _c
}

// VbList provides a mock function with given fields:
func (_m *ReplicationStatusIface) VbList() []uint16 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for VbList")
	}

	var r0 []uint16
	if rf, ok := ret.Get(0).(func() []uint16); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]uint16)
		}
	}

	return r0
}

// ReplicationStatusIface_VbList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VbList'
type ReplicationStatusIface_VbList_Call struct {
	*mock.Call
}

// VbList is a helper method to define mock.On call
func (_e *ReplicationStatusIface_Expecter) VbList() *ReplicationStatusIface_VbList_Call {
	return &ReplicationStatusIface_VbList_Call{Call: _e.mock.On("VbList")}
}

func (_c *ReplicationStatusIface_VbList_Call) Run(run func()) *ReplicationStatusIface_VbList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ReplicationStatusIface_VbList_Call) Return(_a0 []uint16) *ReplicationStatusIface_VbList_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ReplicationStatusIface_VbList_Call) RunAndReturn(run func() []uint16) *ReplicationStatusIface_VbList_Call {
	_c.Call.Return(run)
	return _c
}

// NewReplicationStatusIface creates a new instance of ReplicationStatusIface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReplicationStatusIface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ReplicationStatusIface {
	mock := &ReplicationStatusIface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
