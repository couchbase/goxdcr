package mocks

import (
	base "github.com/couchbase/goxdcr/base"
	common "github.com/couchbase/goxdcr/common"

	expvar "expvar"

	metadata "github.com/couchbase/goxdcr/metadata"

	mock "github.com/stretchr/testify/mock"

	pipeline "github.com/couchbase/goxdcr/pipeline"
)

// ReplicationStatusIface is an autogenerated mock type for the ReplicationStatusIface type
type ReplicationStatusIface struct {
	mock.Mock
}

// AddError provides a mock function with given fields: err
func (_m *ReplicationStatusIface) AddError(err error) {
	_m.Called(err)
}

// AddErrorsFromMap provides a mock function with given fields: errMap
func (_m *ReplicationStatusIface) AddErrorsFromMap(errMap base.ErrorMap) {
	_m.Called(errMap)
}

// CleanupBeforeExit provides a mock function with given fields: statsToClear
func (_m *ReplicationStatusIface) CleanupBeforeExit(statsToClear []string) {
	_m.Called(statsToClear)
}

// ClearCustomSetting provides a mock function with given fields: settingsKey
func (_m *ReplicationStatusIface) ClearCustomSetting(settingsKey string) {
	_m.Called(settingsKey)
}

// ClearErrors provides a mock function with given fields:
func (_m *ReplicationStatusIface) ClearErrors() {
	_m.Called()
}

// ClearTemporaryCustomSettings provides a mock function with given fields:
func (_m *ReplicationStatusIface) ClearTemporaryCustomSettings() {
	_m.Called()
}

// Errors provides a mock function with given fields:
func (_m *ReplicationStatusIface) Errors() pipeline.PipelineErrorArray {
	ret := _m.Called()

	var r0 pipeline.PipelineErrorArray
	if rf, ok := ret.Get(0).(func() pipeline.PipelineErrorArray); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pipeline.PipelineErrorArray)
		}
	}

	return r0
}

// GetOverviewStats provides a mock function with given fields:
func (_m *ReplicationStatusIface) GetOverviewStats() *expvar.Map {
	ret := _m.Called()

	var r0 *expvar.Map
	if rf, ok := ret.Get(0).(func() *expvar.Map); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*expvar.Map)
		}
	}

	return r0
}

// GetProgress provides a mock function with given fields:
func (_m *ReplicationStatusIface) GetProgress() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetSpecInternalId provides a mock function with given fields:
func (_m *ReplicationStatusIface) GetSpecInternalId() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetStats provides a mock function with given fields: registryName
func (_m *ReplicationStatusIface) GetStats(registryName string) *expvar.Map {
	ret := _m.Called(registryName)

	var r0 *expvar.Map
	if rf, ok := ret.Get(0).(func(string) *expvar.Map); ok {
		r0 = rf(registryName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*expvar.Map)
		}
	}

	return r0
}

// GetThroughSeqnos provides a mock function with given fields:
func (_m *ReplicationStatusIface) GetThroughSeqnos() map[uint16]uint64 {
	ret := _m.Called()

	var r0 map[uint16]uint64
	if rf, ok := ret.Get(0).(func() map[uint16]uint64); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[uint16]uint64)
		}
	}

	return r0
}

// ObjectPool provides a mock function with given fields:
func (_m *ReplicationStatusIface) ObjectPool() *base.MCRequestPool {
	ret := _m.Called()

	var r0 *base.MCRequestPool
	if rf, ok := ret.Get(0).(func() *base.MCRequestPool); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*base.MCRequestPool)
		}
	}

	return r0
}

// Pipeline provides a mock function with given fields:
func (_m *ReplicationStatusIface) Pipeline() common.Pipeline {
	ret := _m.Called()

	var r0 common.Pipeline
	if rf, ok := ret.Get(0).(func() common.Pipeline); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Pipeline)
		}
	}

	return r0
}

// Publish provides a mock function with given fields: lock
func (_m *ReplicationStatusIface) Publish(lock bool) {
	_m.Called(lock)
}

// PublishWithStatus provides a mock function with given fields: status, lock
func (_m *ReplicationStatusIface) PublishWithStatus(status string, lock bool) {
	_m.Called(status, lock)
}

// RecordProgress provides a mock function with given fields: progress
func (_m *ReplicationStatusIface) RecordProgress(progress string) {
	_m.Called(progress)
}

// RepId provides a mock function with given fields:
func (_m *ReplicationStatusIface) RepId() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ResetStorage provides a mock function with given fields:
func (_m *ReplicationStatusIface) ResetStorage() {
	_m.Called()
}

// RuntimeStatus provides a mock function with given fields: lock
func (_m *ReplicationStatusIface) RuntimeStatus(lock bool) pipeline.ReplicationState {
	ret := _m.Called(lock)

	var r0 pipeline.ReplicationState
	if rf, ok := ret.Get(0).(func(bool) pipeline.ReplicationState); ok {
		r0 = rf(lock)
	} else {
		r0 = ret.Get(0).(pipeline.ReplicationState)
	}

	return r0
}

// SetCustomSettings provides a mock function with given fields: customSettings
func (_m *ReplicationStatusIface) SetCustomSettings(customSettings map[string]interface{}) {
	_m.Called(customSettings)
}

// SetOverviewStats provides a mock function with given fields: stats
func (_m *ReplicationStatusIface) SetOverviewStats(stats *expvar.Map) {
	_m.Called(stats)
}

// SetPipeline provides a mock function with given fields: _a0
func (_m *ReplicationStatusIface) SetPipeline(_a0 common.Pipeline) {
	_m.Called(_a0)
}

// SetStats provides a mock function with given fields: registryName, stats
func (_m *ReplicationStatusIface) SetStats(registryName string, stats *expvar.Map) {
	_m.Called(registryName, stats)
}

// SetThroughSeqno provides a mock function with given fields: vb, throughSeqno
func (_m *ReplicationStatusIface) SetThroughSeqno(vb uint16, throughSeqno uint64) {
	_m.Called(vb, throughSeqno)
}

// SetUpdater provides a mock function with given fields: updater
func (_m *ReplicationStatusIface) SetUpdater(updater interface{}) error {
	ret := _m.Called(updater)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(updater)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetVbList provides a mock function with given fields: vb_list
func (_m *ReplicationStatusIface) SetVbList(vb_list []uint16) {
	_m.Called(vb_list)
}

// SettingsMap provides a mock function with given fields:
func (_m *ReplicationStatusIface) SettingsMap() map[string]interface{} {
	ret := _m.Called()

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func() map[string]interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	return r0
}

// Spec provides a mock function with given fields:
func (_m *ReplicationStatusIface) Spec() *metadata.ReplicationSpecification {
	ret := _m.Called()

	var r0 *metadata.ReplicationSpecification
	if rf, ok := ret.Get(0).(func() *metadata.ReplicationSpecification); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*metadata.ReplicationSpecification)
		}
	}

	return r0
}

// Storage provides a mock function with given fields:
func (_m *ReplicationStatusIface) Storage() *expvar.Map {
	ret := _m.Called()

	var r0 *expvar.Map
	if rf, ok := ret.Get(0).(func() *expvar.Map); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*expvar.Map)
		}
	}

	return r0
}

// String provides a mock function with given fields:
func (_m *ReplicationStatusIface) String() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Updater provides a mock function with given fields:
func (_m *ReplicationStatusIface) Updater() interface{} {
	ret := _m.Called()

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// VbList provides a mock function with given fields:
func (_m *ReplicationStatusIface) VbList() []uint16 {
	ret := _m.Called()

	var r0 []uint16
	if rf, ok := ret.Get(0).(func() []uint16); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]uint16)
		}
	}

	return r0
}
