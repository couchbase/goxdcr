// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	metadata "github.com/couchbase/goxdcr/metadata"
	mock "github.com/stretchr/testify/mock"
)

// SSLPortMapConstructor is an autogenerated mock type for the SSLPortMapConstructor type
type SSLPortMapConstructor struct {
	mock.Mock
}

type SSLPortMapConstructor_Expecter struct {
	mock *mock.Mock
}

func (_m *SSLPortMapConstructor) EXPECT() *SSLPortMapConstructor_Expecter {
	return &SSLPortMapConstructor_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: targetClusterRef, spec
func (_m *SSLPortMapConstructor) Execute(targetClusterRef *metadata.RemoteClusterReference, spec *metadata.ReplicationSpecification) (map[string]uint16, error) {
	ret := _m.Called(targetClusterRef, spec)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 map[string]uint16
	var r1 error
	if rf, ok := ret.Get(0).(func(*metadata.RemoteClusterReference, *metadata.ReplicationSpecification) (map[string]uint16, error)); ok {
		return rf(targetClusterRef, spec)
	}
	if rf, ok := ret.Get(0).(func(*metadata.RemoteClusterReference, *metadata.ReplicationSpecification) map[string]uint16); ok {
		r0 = rf(targetClusterRef, spec)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]uint16)
		}
	}

	if rf, ok := ret.Get(1).(func(*metadata.RemoteClusterReference, *metadata.ReplicationSpecification) error); ok {
		r1 = rf(targetClusterRef, spec)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SSLPortMapConstructor_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type SSLPortMapConstructor_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - targetClusterRef *metadata.RemoteClusterReference
//   - spec *metadata.ReplicationSpecification
func (_e *SSLPortMapConstructor_Expecter) Execute(targetClusterRef interface{}, spec interface{}) *SSLPortMapConstructor_Execute_Call {
	return &SSLPortMapConstructor_Execute_Call{Call: _e.mock.On("Execute", targetClusterRef, spec)}
}

func (_c *SSLPortMapConstructor_Execute_Call) Run(run func(targetClusterRef *metadata.RemoteClusterReference, spec *metadata.ReplicationSpecification)) *SSLPortMapConstructor_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*metadata.RemoteClusterReference), args[1].(*metadata.ReplicationSpecification))
	})
	return _c
}

func (_c *SSLPortMapConstructor_Execute_Call) Return(_a0 map[string]uint16, _a1 error) *SSLPortMapConstructor_Execute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SSLPortMapConstructor_Execute_Call) RunAndReturn(run func(*metadata.RemoteClusterReference, *metadata.ReplicationSpecification) (map[string]uint16, error)) *SSLPortMapConstructor_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewSSLPortMapConstructor creates a new instance of SSLPortMapConstructor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSSLPortMapConstructor(t interface {
	mock.TestingT
	Cleanup(func())
}) *SSLPortMapConstructor {
	mock := &SSLPortMapConstructor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
