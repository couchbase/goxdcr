// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	base "github.com/couchbase/goxdcr/base"
	metadata "github.com/couchbase/goxdcr/metadata"

	mock "github.com/stretchr/testify/mock"

	pipeline "github.com/couchbase/goxdcr/pipeline"
)

// PipelineEventsManager is an autogenerated mock type for the PipelineEventsManager type
type PipelineEventsManager struct {
	mock.Mock
}

// AddEvent provides a mock function with given fields: eventType, eventDesc, eventExtras, hint
func (_m *PipelineEventsManager) AddEvent(eventType base.EventInfoType, eventDesc string, eventExtras base.EventsMap, hint interface{}) int64 {
	ret := _m.Called(eventType, eventDesc, eventExtras, hint)

	if len(ret) == 0 {
		panic("no return value specified for AddEvent")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func(base.EventInfoType, string, base.EventsMap, interface{}) int64); ok {
		r0 = rf(eventType, eventDesc, eventExtras, hint)
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// BackfillUpdateCb provides a mock function with given fields: diffPair, srcManifestsDelta
func (_m *PipelineEventsManager) BackfillUpdateCb(diffPair *metadata.CollectionNamespaceMappingsDiffPair, srcManifestsDelta []*metadata.CollectionsManifest) error {
	ret := _m.Called(diffPair, srcManifestsDelta)

	if len(ret) == 0 {
		panic("no return value specified for BackfillUpdateCb")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*metadata.CollectionNamespaceMappingsDiffPair, []*metadata.CollectionsManifest) error); ok {
		r0 = rf(diffPair, srcManifestsDelta)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ClearNonBrokenMapEventsWithString provides a mock function with given fields: substr
func (_m *PipelineEventsManager) ClearNonBrokenMapEventsWithString(substr string) {
	_m.Called(substr)
}

// ClearNonBrokenMapOrPersistentEvents provides a mock function with given fields:
func (_m *PipelineEventsManager) ClearNonBrokenMapOrPersistentEvents() {
	_m.Called()
}

// ClearPersistentEvents provides a mock function with given fields:
func (_m *PipelineEventsManager) ClearPersistentEvents() {
	_m.Called()
}

// ContainsEvent provides a mock function with given fields: eventId
func (_m *PipelineEventsManager) ContainsEvent(eventId int) bool {
	ret := _m.Called(eventId)

	if len(ret) == 0 {
		panic("no return value specified for ContainsEvent")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(int) bool); ok {
		r0 = rf(eventId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// DismissEvent provides a mock function with given fields: eventId
func (_m *PipelineEventsManager) DismissEvent(eventId int) error {
	ret := _m.Called(eventId)

	if len(ret) == 0 {
		panic("no return value specified for DismissEvent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(eventId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCurrentEvents provides a mock function with given fields:
func (_m *PipelineEventsManager) GetCurrentEvents() *pipeline.PipelineEventList {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetCurrentEvents")
	}

	var r0 *pipeline.PipelineEventList
	if rf, ok := ret.Get(0).(func() *pipeline.PipelineEventList); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pipeline.PipelineEventList)
		}
	}

	return r0
}

// LoadLatestBrokenMap provides a mock function with given fields: mapping
func (_m *PipelineEventsManager) LoadLatestBrokenMap(mapping metadata.CollectionNamespaceMapping) {
	_m.Called(mapping)
}

// ResetDismissedHistory provides a mock function with given fields:
func (_m *PipelineEventsManager) ResetDismissedHistory() {
	_m.Called()
}

// UpdateEvent provides a mock function with given fields: oldEventId, newEventDesc, newEventExtras
func (_m *PipelineEventsManager) UpdateEvent(oldEventId int64, newEventDesc string, newEventExtras *base.EventsMap) error {
	ret := _m.Called(oldEventId, newEventDesc, newEventExtras)

	if len(ret) == 0 {
		panic("no return value specified for UpdateEvent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, string, *base.EventsMap) error); ok {
		r0 = rf(oldEventId, newEventDesc, newEventExtras)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewPipelineEventsManager creates a new instance of PipelineEventsManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPipelineEventsManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *PipelineEventsManager {
	mock := &PipelineEventsManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
