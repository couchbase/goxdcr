// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	metadata "github.com/couchbase/goxdcr/metadata"

	mock "github.com/stretchr/testify/mock"
)

// RemoteClusterAgentIface is an autogenerated mock type for the RemoteClusterAgentIface type
type RemoteClusterAgentIface struct {
	mock.Mock
}

type RemoteClusterAgentIface_Expecter struct {
	mock *mock.Mock
}

func (_m *RemoteClusterAgentIface) EXPECT() *RemoteClusterAgentIface_Expecter {
	return &RemoteClusterAgentIface_Expecter{mock: &_m.Mock}
}

// DeleteReference provides a mock function with given fields: delFromMetaKv
func (_m *RemoteClusterAgentIface) DeleteReference(delFromMetaKv bool) (*metadata.RemoteClusterReference, error) {
	ret := _m.Called(delFromMetaKv)

	if len(ret) == 0 {
		panic("no return value specified for DeleteReference")
	}

	var r0 *metadata.RemoteClusterReference
	var r1 error
	if rf, ok := ret.Get(0).(func(bool) (*metadata.RemoteClusterReference, error)); ok {
		return rf(delFromMetaKv)
	}
	if rf, ok := ret.Get(0).(func(bool) *metadata.RemoteClusterReference); ok {
		r0 = rf(delFromMetaKv)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*metadata.RemoteClusterReference)
		}
	}

	if rf, ok := ret.Get(1).(func(bool) error); ok {
		r1 = rf(delFromMetaKv)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoteClusterAgentIface_DeleteReference_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteReference'
type RemoteClusterAgentIface_DeleteReference_Call struct {
	*mock.Call
}

// DeleteReference is a helper method to define mock.On call
//   - delFromMetaKv bool
func (_e *RemoteClusterAgentIface_Expecter) DeleteReference(delFromMetaKv interface{}) *RemoteClusterAgentIface_DeleteReference_Call {
	return &RemoteClusterAgentIface_DeleteReference_Call{Call: _e.mock.On("DeleteReference", delFromMetaKv)}
}

func (_c *RemoteClusterAgentIface_DeleteReference_Call) Run(run func(delFromMetaKv bool)) *RemoteClusterAgentIface_DeleteReference_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bool))
	})
	return _c
}

func (_c *RemoteClusterAgentIface_DeleteReference_Call) Return(_a0 *metadata.RemoteClusterReference, _a1 error) *RemoteClusterAgentIface_DeleteReference_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RemoteClusterAgentIface_DeleteReference_Call) RunAndReturn(run func(bool) (*metadata.RemoteClusterReference, error)) *RemoteClusterAgentIface_DeleteReference_Call {
	_c.Call.Return(run)
	return _c
}

// GetCapability provides a mock function with given fields:
func (_m *RemoteClusterAgentIface) GetCapability() (metadata.Capability, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetCapability")
	}

	var r0 metadata.Capability
	var r1 error
	if rf, ok := ret.Get(0).(func() (metadata.Capability, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() metadata.Capability); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(metadata.Capability)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoteClusterAgentIface_GetCapability_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCapability'
type RemoteClusterAgentIface_GetCapability_Call struct {
	*mock.Call
}

// GetCapability is a helper method to define mock.On call
func (_e *RemoteClusterAgentIface_Expecter) GetCapability() *RemoteClusterAgentIface_GetCapability_Call {
	return &RemoteClusterAgentIface_GetCapability_Call{Call: _e.mock.On("GetCapability")}
}

func (_c *RemoteClusterAgentIface_GetCapability_Call) Run(run func()) *RemoteClusterAgentIface_GetCapability_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RemoteClusterAgentIface_GetCapability_Call) Return(_a0 metadata.Capability, _a1 error) *RemoteClusterAgentIface_GetCapability_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RemoteClusterAgentIface_GetCapability_Call) RunAndReturn(run func() (metadata.Capability, error)) *RemoteClusterAgentIface_GetCapability_Call {
	_c.Call.Return(run)
	return _c
}

// GetConnectionStringForCAPIRemoteCluster provides a mock function with given fields:
func (_m *RemoteClusterAgentIface) GetConnectionStringForCAPIRemoteCluster() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetConnectionStringForCAPIRemoteCluster")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// RemoteClusterAgentIface_GetConnectionStringForCAPIRemoteCluster_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConnectionStringForCAPIRemoteCluster'
type RemoteClusterAgentIface_GetConnectionStringForCAPIRemoteCluster_Call struct {
	*mock.Call
}

// GetConnectionStringForCAPIRemoteCluster is a helper method to define mock.On call
func (_e *RemoteClusterAgentIface_Expecter) GetConnectionStringForCAPIRemoteCluster() *RemoteClusterAgentIface_GetConnectionStringForCAPIRemoteCluster_Call {
	return &RemoteClusterAgentIface_GetConnectionStringForCAPIRemoteCluster_Call{Call: _e.mock.On("GetConnectionStringForCAPIRemoteCluster")}
}

func (_c *RemoteClusterAgentIface_GetConnectionStringForCAPIRemoteCluster_Call) Run(run func()) *RemoteClusterAgentIface_GetConnectionStringForCAPIRemoteCluster_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RemoteClusterAgentIface_GetConnectionStringForCAPIRemoteCluster_Call) Return(_a0 string) *RemoteClusterAgentIface_GetConnectionStringForCAPIRemoteCluster_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RemoteClusterAgentIface_GetConnectionStringForCAPIRemoteCluster_Call) RunAndReturn(run func() string) *RemoteClusterAgentIface_GetConnectionStringForCAPIRemoteCluster_Call {
	_c.Call.Return(run)
	return _c
}

// GetReferenceAndStatusClone provides a mock function with given fields:
func (_m *RemoteClusterAgentIface) GetReferenceAndStatusClone() *metadata.RemoteClusterReference {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetReferenceAndStatusClone")
	}

	var r0 *metadata.RemoteClusterReference
	if rf, ok := ret.Get(0).(func() *metadata.RemoteClusterReference); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*metadata.RemoteClusterReference)
		}
	}

	return r0
}

// RemoteClusterAgentIface_GetReferenceAndStatusClone_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetReferenceAndStatusClone'
type RemoteClusterAgentIface_GetReferenceAndStatusClone_Call struct {
	*mock.Call
}

// GetReferenceAndStatusClone is a helper method to define mock.On call
func (_e *RemoteClusterAgentIface_Expecter) GetReferenceAndStatusClone() *RemoteClusterAgentIface_GetReferenceAndStatusClone_Call {
	return &RemoteClusterAgentIface_GetReferenceAndStatusClone_Call{Call: _e.mock.On("GetReferenceAndStatusClone")}
}

func (_c *RemoteClusterAgentIface_GetReferenceAndStatusClone_Call) Run(run func()) *RemoteClusterAgentIface_GetReferenceAndStatusClone_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RemoteClusterAgentIface_GetReferenceAndStatusClone_Call) Return(_a0 *metadata.RemoteClusterReference) *RemoteClusterAgentIface_GetReferenceAndStatusClone_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RemoteClusterAgentIface_GetReferenceAndStatusClone_Call) RunAndReturn(run func() *metadata.RemoteClusterReference) *RemoteClusterAgentIface_GetReferenceAndStatusClone_Call {
	_c.Call.Return(run)
	return _c
}

// GetReferenceClone provides a mock function with given fields:
func (_m *RemoteClusterAgentIface) GetReferenceClone() *metadata.RemoteClusterReference {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetReferenceClone")
	}

	var r0 *metadata.RemoteClusterReference
	if rf, ok := ret.Get(0).(func() *metadata.RemoteClusterReference); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*metadata.RemoteClusterReference)
		}
	}

	return r0
}

// RemoteClusterAgentIface_GetReferenceClone_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetReferenceClone'
type RemoteClusterAgentIface_GetReferenceClone_Call struct {
	*mock.Call
}

// GetReferenceClone is a helper method to define mock.On call
func (_e *RemoteClusterAgentIface_Expecter) GetReferenceClone() *RemoteClusterAgentIface_GetReferenceClone_Call {
	return &RemoteClusterAgentIface_GetReferenceClone_Call{Call: _e.mock.On("GetReferenceClone")}
}

func (_c *RemoteClusterAgentIface_GetReferenceClone_Call) Run(run func()) *RemoteClusterAgentIface_GetReferenceClone_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RemoteClusterAgentIface_GetReferenceClone_Call) Return(_a0 *metadata.RemoteClusterReference) *RemoteClusterAgentIface_GetReferenceClone_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RemoteClusterAgentIface_GetReferenceClone_Call) RunAndReturn(run func() *metadata.RemoteClusterReference) *RemoteClusterAgentIface_GetReferenceClone_Call {
	_c.Call.Return(run)
	return _c
}

// Refresh provides a mock function with given fields:
func (_m *RemoteClusterAgentIface) Refresh() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Refresh")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoteClusterAgentIface_Refresh_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Refresh'
type RemoteClusterAgentIface_Refresh_Call struct {
	*mock.Call
}

// Refresh is a helper method to define mock.On call
func (_e *RemoteClusterAgentIface_Expecter) Refresh() *RemoteClusterAgentIface_Refresh_Call {
	return &RemoteClusterAgentIface_Refresh_Call{Call: _e.mock.On("Refresh")}
}

func (_c *RemoteClusterAgentIface_Refresh_Call) Run(run func()) *RemoteClusterAgentIface_Refresh_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RemoteClusterAgentIface_Refresh_Call) Return(_a0 error) *RemoteClusterAgentIface_Refresh_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RemoteClusterAgentIface_Refresh_Call) RunAndReturn(run func() error) *RemoteClusterAgentIface_Refresh_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with given fields: newRef
func (_m *RemoteClusterAgentIface) Start(newRef *metadata.RemoteClusterReference) error {
	ret := _m.Called(newRef)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*metadata.RemoteClusterReference) error); ok {
		r0 = rf(newRef)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoteClusterAgentIface_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type RemoteClusterAgentIface_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - newRef *metadata.RemoteClusterReference
func (_e *RemoteClusterAgentIface_Expecter) Start(newRef interface{}) *RemoteClusterAgentIface_Start_Call {
	return &RemoteClusterAgentIface_Start_Call{Call: _e.mock.On("Start", newRef)}
}

func (_c *RemoteClusterAgentIface_Start_Call) Run(run func(newRef *metadata.RemoteClusterReference)) *RemoteClusterAgentIface_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*metadata.RemoteClusterReference))
	})
	return _c
}

func (_c *RemoteClusterAgentIface_Start_Call) Return(_a0 error) *RemoteClusterAgentIface_Start_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RemoteClusterAgentIface_Start_Call) RunAndReturn(run func(*metadata.RemoteClusterReference) error) *RemoteClusterAgentIface_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function with given fields:
func (_m *RemoteClusterAgentIface) Stop() {
	_m.Called()
}

// RemoteClusterAgentIface_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type RemoteClusterAgentIface_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *RemoteClusterAgentIface_Expecter) Stop() *RemoteClusterAgentIface_Stop_Call {
	return &RemoteClusterAgentIface_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *RemoteClusterAgentIface_Stop_Call) Run(run func()) *RemoteClusterAgentIface_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RemoteClusterAgentIface_Stop_Call) Return() *RemoteClusterAgentIface_Stop_Call {
	_c.Call.Return()
	return _c
}

func (_c *RemoteClusterAgentIface_Stop_Call) RunAndReturn(run func()) *RemoteClusterAgentIface_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateReferenceFrom provides a mock function with given fields: newRef, writeToMetaKv
func (_m *RemoteClusterAgentIface) UpdateReferenceFrom(newRef *metadata.RemoteClusterReference, writeToMetaKv bool) error {
	ret := _m.Called(newRef, writeToMetaKv)

	if len(ret) == 0 {
		panic("no return value specified for UpdateReferenceFrom")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*metadata.RemoteClusterReference, bool) error); ok {
		r0 = rf(newRef, writeToMetaKv)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoteClusterAgentIface_UpdateReferenceFrom_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateReferenceFrom'
type RemoteClusterAgentIface_UpdateReferenceFrom_Call struct {
	*mock.Call
}

// UpdateReferenceFrom is a helper method to define mock.On call
//   - newRef *metadata.RemoteClusterReference
//   - writeToMetaKv bool
func (_e *RemoteClusterAgentIface_Expecter) UpdateReferenceFrom(newRef interface{}, writeToMetaKv interface{}) *RemoteClusterAgentIface_UpdateReferenceFrom_Call {
	return &RemoteClusterAgentIface_UpdateReferenceFrom_Call{Call: _e.mock.On("UpdateReferenceFrom", newRef, writeToMetaKv)}
}

func (_c *RemoteClusterAgentIface_UpdateReferenceFrom_Call) Run(run func(newRef *metadata.RemoteClusterReference, writeToMetaKv bool)) *RemoteClusterAgentIface_UpdateReferenceFrom_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*metadata.RemoteClusterReference), args[1].(bool))
	})
	return _c
}

func (_c *RemoteClusterAgentIface_UpdateReferenceFrom_Call) Return(_a0 error) *RemoteClusterAgentIface_UpdateReferenceFrom_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RemoteClusterAgentIface_UpdateReferenceFrom_Call) RunAndReturn(run func(*metadata.RemoteClusterReference, bool) error) *RemoteClusterAgentIface_UpdateReferenceFrom_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateReferenceFromAsync provides a mock function with given fields: newRef, writeToMetaKv
func (_m *RemoteClusterAgentIface) UpdateReferenceFromAsync(newRef *metadata.RemoteClusterReference, writeToMetaKv bool) error {
	ret := _m.Called(newRef, writeToMetaKv)

	if len(ret) == 0 {
		panic("no return value specified for UpdateReferenceFromAsync")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*metadata.RemoteClusterReference, bool) error); ok {
		r0 = rf(newRef, writeToMetaKv)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoteClusterAgentIface_UpdateReferenceFromAsync_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateReferenceFromAsync'
type RemoteClusterAgentIface_UpdateReferenceFromAsync_Call struct {
	*mock.Call
}

// UpdateReferenceFromAsync is a helper method to define mock.On call
//   - newRef *metadata.RemoteClusterReference
//   - writeToMetaKv bool
func (_e *RemoteClusterAgentIface_Expecter) UpdateReferenceFromAsync(newRef interface{}, writeToMetaKv interface{}) *RemoteClusterAgentIface_UpdateReferenceFromAsync_Call {
	return &RemoteClusterAgentIface_UpdateReferenceFromAsync_Call{Call: _e.mock.On("UpdateReferenceFromAsync", newRef, writeToMetaKv)}
}

func (_c *RemoteClusterAgentIface_UpdateReferenceFromAsync_Call) Run(run func(newRef *metadata.RemoteClusterReference, writeToMetaKv bool)) *RemoteClusterAgentIface_UpdateReferenceFromAsync_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*metadata.RemoteClusterReference), args[1].(bool))
	})
	return _c
}

func (_c *RemoteClusterAgentIface_UpdateReferenceFromAsync_Call) Return(_a0 error) *RemoteClusterAgentIface_UpdateReferenceFromAsync_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RemoteClusterAgentIface_UpdateReferenceFromAsync_Call) RunAndReturn(run func(*metadata.RemoteClusterReference, bool) error) *RemoteClusterAgentIface_UpdateReferenceFromAsync_Call {
	_c.Call.Return(run)
	return _c
}

// UsesAlternateAddress provides a mock function with given fields:
func (_m *RemoteClusterAgentIface) UsesAlternateAddress() (bool, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for UsesAlternateAddress")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func() (bool, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoteClusterAgentIface_UsesAlternateAddress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UsesAlternateAddress'
type RemoteClusterAgentIface_UsesAlternateAddress_Call struct {
	*mock.Call
}

// UsesAlternateAddress is a helper method to define mock.On call
func (_e *RemoteClusterAgentIface_Expecter) UsesAlternateAddress() *RemoteClusterAgentIface_UsesAlternateAddress_Call {
	return &RemoteClusterAgentIface_UsesAlternateAddress_Call{Call: _e.mock.On("UsesAlternateAddress")}
}

func (_c *RemoteClusterAgentIface_UsesAlternateAddress_Call) Run(run func()) *RemoteClusterAgentIface_UsesAlternateAddress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RemoteClusterAgentIface_UsesAlternateAddress_Call) Return(_a0 bool, _a1 error) *RemoteClusterAgentIface_UsesAlternateAddress_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RemoteClusterAgentIface_UsesAlternateAddress_Call) RunAndReturn(run func() (bool, error)) *RemoteClusterAgentIface_UsesAlternateAddress_Call {
	_c.Call.Return(run)
	return _c
}

// NewRemoteClusterAgentIface creates a new instance of RemoteClusterAgentIface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRemoteClusterAgentIface(t interface {
	mock.TestingT
	Cleanup(func())
}) *RemoteClusterAgentIface {
	mock := &RemoteClusterAgentIface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
