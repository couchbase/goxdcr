// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	metadata "github.com/couchbase/goxdcr/v8/metadata"
	metadata_svc "github.com/couchbase/goxdcr/v8/metadata_svc"

	mock "github.com/stretchr/testify/mock"
)

// CollectionsManifestSvcInjector is an autogenerated mock type for the CollectionsManifestSvcInjector type
type CollectionsManifestSvcInjector struct {
	mock.Mock
}

type CollectionsManifestSvcInjector_Expecter struct {
	mock *mock.Mock
}

func (_m *CollectionsManifestSvcInjector) EXPECT() *CollectionsManifestSvcInjector_Expecter {
	return &CollectionsManifestSvcInjector_Expecter{mock: &_m.Mock}
}

// InjectDelay provides a mock function with given fields: spec, c
func (_m *CollectionsManifestSvcInjector) InjectDelay(spec *metadata.ReplicationSpecification, c *metadata_svc.CollectionsManifestService) {
	_m.Called(spec, c)
}

// CollectionsManifestSvcInjector_InjectDelay_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InjectDelay'
type CollectionsManifestSvcInjector_InjectDelay_Call struct {
	*mock.Call
}

// InjectDelay is a helper method to define mock.On call
//   - spec *metadata.ReplicationSpecification
//   - c *metadata_svc.CollectionsManifestService
func (_e *CollectionsManifestSvcInjector_Expecter) InjectDelay(spec interface{}, c interface{}) *CollectionsManifestSvcInjector_InjectDelay_Call {
	return &CollectionsManifestSvcInjector_InjectDelay_Call{Call: _e.mock.On("InjectDelay", spec, c)}
}

func (_c *CollectionsManifestSvcInjector_InjectDelay_Call) Run(run func(spec *metadata.ReplicationSpecification, c *metadata_svc.CollectionsManifestService)) *CollectionsManifestSvcInjector_InjectDelay_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*metadata.ReplicationSpecification), args[1].(*metadata_svc.CollectionsManifestService))
	})
	return _c
}

func (_c *CollectionsManifestSvcInjector_InjectDelay_Call) Return() *CollectionsManifestSvcInjector_InjectDelay_Call {
	_c.Call.Return()
	return _c
}

func (_c *CollectionsManifestSvcInjector_InjectDelay_Call) RunAndReturn(run func(*metadata.ReplicationSpecification, *metadata_svc.CollectionsManifestService)) *CollectionsManifestSvcInjector_InjectDelay_Call {
	_c.Run(run)
	return _c
}

// NewCollectionsManifestSvcInjector creates a new instance of CollectionsManifestSvcInjector. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCollectionsManifestSvcInjector(t interface {
	mock.TestingT
	Cleanup(func())
}) *CollectionsManifestSvcInjector {
	mock := &CollectionsManifestSvcInjector{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
