// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	metadata_svc "github.com/couchbase/goxdcr/metadata_svc"
	mock "github.com/stretchr/testify/mock"
)

// CacheableMetadataObj is an autogenerated mock type for the CacheableMetadataObj type
type CacheableMetadataObj struct {
	mock.Mock
}

type CacheableMetadataObj_Expecter struct {
	mock *mock.Mock
}

func (_m *CacheableMetadataObj) EXPECT() *CacheableMetadataObj_Expecter {
	return &CacheableMetadataObj_Expecter{mock: &_m.Mock}
}

// CAS provides a mock function with given fields: obj
func (_m *CacheableMetadataObj) CAS(obj metadata_svc.CacheableMetadataObj) bool {
	ret := _m.Called(obj)

	if len(ret) == 0 {
		panic("no return value specified for CAS")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(metadata_svc.CacheableMetadataObj) bool); ok {
		r0 = rf(obj)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// CacheableMetadataObj_CAS_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CAS'
type CacheableMetadataObj_CAS_Call struct {
	*mock.Call
}

// CAS is a helper method to define mock.On call
//   - obj metadata_svc.CacheableMetadataObj
func (_e *CacheableMetadataObj_Expecter) CAS(obj interface{}) *CacheableMetadataObj_CAS_Call {
	return &CacheableMetadataObj_CAS_Call{Call: _e.mock.On("CAS", obj)}
}

func (_c *CacheableMetadataObj_CAS_Call) Run(run func(obj metadata_svc.CacheableMetadataObj)) *CacheableMetadataObj_CAS_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(metadata_svc.CacheableMetadataObj))
	})
	return _c
}

func (_c *CacheableMetadataObj_CAS_Call) Return(_a0 bool) *CacheableMetadataObj_CAS_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CacheableMetadataObj_CAS_Call) RunAndReturn(run func(metadata_svc.CacheableMetadataObj) bool) *CacheableMetadataObj_CAS_Call {
	_c.Call.Return(run)
	return _c
}

// Clone provides a mock function with given fields:
func (_m *CacheableMetadataObj) Clone() metadata_svc.CacheableMetadataObj {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Clone")
	}

	var r0 metadata_svc.CacheableMetadataObj
	if rf, ok := ret.Get(0).(func() metadata_svc.CacheableMetadataObj); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(metadata_svc.CacheableMetadataObj)
		}
	}

	return r0
}

// CacheableMetadataObj_Clone_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Clone'
type CacheableMetadataObj_Clone_Call struct {
	*mock.Call
}

// Clone is a helper method to define mock.On call
func (_e *CacheableMetadataObj_Expecter) Clone() *CacheableMetadataObj_Clone_Call {
	return &CacheableMetadataObj_Clone_Call{Call: _e.mock.On("Clone")}
}

func (_c *CacheableMetadataObj_Clone_Call) Run(run func()) *CacheableMetadataObj_Clone_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *CacheableMetadataObj_Clone_Call) Return(_a0 metadata_svc.CacheableMetadataObj) *CacheableMetadataObj_Clone_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CacheableMetadataObj_Clone_Call) RunAndReturn(run func() metadata_svc.CacheableMetadataObj) *CacheableMetadataObj_Clone_Call {
	_c.Call.Return(run)
	return _c
}

// CloneAndRedact provides a mock function with given fields:
func (_m *CacheableMetadataObj) CloneAndRedact() metadata_svc.CacheableMetadataObj {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CloneAndRedact")
	}

	var r0 metadata_svc.CacheableMetadataObj
	if rf, ok := ret.Get(0).(func() metadata_svc.CacheableMetadataObj); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(metadata_svc.CacheableMetadataObj)
		}
	}

	return r0
}

// CacheableMetadataObj_CloneAndRedact_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CloneAndRedact'
type CacheableMetadataObj_CloneAndRedact_Call struct {
	*mock.Call
}

// CloneAndRedact is a helper method to define mock.On call
func (_e *CacheableMetadataObj_Expecter) CloneAndRedact() *CacheableMetadataObj_CloneAndRedact_Call {
	return &CacheableMetadataObj_CloneAndRedact_Call{Call: _e.mock.On("CloneAndRedact")}
}

func (_c *CacheableMetadataObj_CloneAndRedact_Call) Run(run func()) *CacheableMetadataObj_CloneAndRedact_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *CacheableMetadataObj_CloneAndRedact_Call) Return(_a0 metadata_svc.CacheableMetadataObj) *CacheableMetadataObj_CloneAndRedact_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CacheableMetadataObj_CloneAndRedact_Call) RunAndReturn(run func() metadata_svc.CacheableMetadataObj) *CacheableMetadataObj_CloneAndRedact_Call {
	_c.Call.Return(run)
	return _c
}

// Redact provides a mock function with given fields:
func (_m *CacheableMetadataObj) Redact() metadata_svc.CacheableMetadataObj {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Redact")
	}

	var r0 metadata_svc.CacheableMetadataObj
	if rf, ok := ret.Get(0).(func() metadata_svc.CacheableMetadataObj); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(metadata_svc.CacheableMetadataObj)
		}
	}

	return r0
}

// CacheableMetadataObj_Redact_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Redact'
type CacheableMetadataObj_Redact_Call struct {
	*mock.Call
}

// Redact is a helper method to define mock.On call
func (_e *CacheableMetadataObj_Expecter) Redact() *CacheableMetadataObj_Redact_Call {
	return &CacheableMetadataObj_Redact_Call{Call: _e.mock.On("Redact")}
}

func (_c *CacheableMetadataObj_Redact_Call) Run(run func()) *CacheableMetadataObj_Redact_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *CacheableMetadataObj_Redact_Call) Return(_a0 metadata_svc.CacheableMetadataObj) *CacheableMetadataObj_Redact_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CacheableMetadataObj_Redact_Call) RunAndReturn(run func() metadata_svc.CacheableMetadataObj) *CacheableMetadataObj_Redact_Call {
	_c.Call.Return(run)
	return _c
}

// NewCacheableMetadataObj creates a new instance of CacheableMetadataObj. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCacheableMetadataObj(t interface {
	mock.TestingT
	Cleanup(func())
}) *CacheableMetadataObj {
	mock := &CacheableMetadataObj{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
