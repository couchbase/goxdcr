// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	base "github.com/couchbase/goxdcr/base"
	metadata "github.com/couchbase/goxdcr/metadata"

	mock "github.com/stretchr/testify/mock"
)

// BucketSettingsSvc is an autogenerated mock type for the BucketSettingsSvc type
type BucketSettingsSvc struct {
	mock.Mock
}

type BucketSettingsSvc_Expecter struct {
	mock *mock.Mock
}

func (_m *BucketSettingsSvc) EXPECT() *BucketSettingsSvc_Expecter {
	return &BucketSettingsSvc_Expecter{mock: &_m.Mock}
}

// BucketSettings provides a mock function with given fields: bucketName
func (_m *BucketSettingsSvc) BucketSettings(bucketName string) (*metadata.BucketSettings, error) {
	ret := _m.Called(bucketName)

	if len(ret) == 0 {
		panic("no return value specified for BucketSettings")
	}

	var r0 *metadata.BucketSettings
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*metadata.BucketSettings, error)); ok {
		return rf(bucketName)
	}
	if rf, ok := ret.Get(0).(func(string) *metadata.BucketSettings); ok {
		r0 = rf(bucketName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*metadata.BucketSettings)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(bucketName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BucketSettingsSvc_BucketSettings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BucketSettings'
type BucketSettingsSvc_BucketSettings_Call struct {
	*mock.Call
}

// BucketSettings is a helper method to define mock.On call
//   - bucketName string
func (_e *BucketSettingsSvc_Expecter) BucketSettings(bucketName interface{}) *BucketSettingsSvc_BucketSettings_Call {
	return &BucketSettingsSvc_BucketSettings_Call{Call: _e.mock.On("BucketSettings", bucketName)}
}

func (_c *BucketSettingsSvc_BucketSettings_Call) Run(run func(bucketName string)) *BucketSettingsSvc_BucketSettings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *BucketSettingsSvc_BucketSettings_Call) Return(_a0 *metadata.BucketSettings, _a1 error) *BucketSettingsSvc_BucketSettings_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BucketSettingsSvc_BucketSettings_Call) RunAndReturn(run func(string) (*metadata.BucketSettings, error)) *BucketSettingsSvc_BucketSettings_Call {
	_c.Call.Return(run)
	return _c
}

// BucketSettingsServiceCallback provides a mock function with given fields: path, value, rev
func (_m *BucketSettingsSvc) BucketSettingsServiceCallback(path string, value []byte, rev interface{}) error {
	ret := _m.Called(path, value, rev)

	if len(ret) == 0 {
		panic("no return value specified for BucketSettingsServiceCallback")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []byte, interface{}) error); ok {
		r0 = rf(path, value, rev)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BucketSettingsSvc_BucketSettingsServiceCallback_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BucketSettingsServiceCallback'
type BucketSettingsSvc_BucketSettingsServiceCallback_Call struct {
	*mock.Call
}

// BucketSettingsServiceCallback is a helper method to define mock.On call
//   - path string
//   - value []byte
//   - rev interface{}
func (_e *BucketSettingsSvc_Expecter) BucketSettingsServiceCallback(path interface{}, value interface{}, rev interface{}) *BucketSettingsSvc_BucketSettingsServiceCallback_Call {
	return &BucketSettingsSvc_BucketSettingsServiceCallback_Call{Call: _e.mock.On("BucketSettingsServiceCallback", path, value, rev)}
}

func (_c *BucketSettingsSvc_BucketSettingsServiceCallback_Call) Run(run func(path string, value []byte, rev interface{})) *BucketSettingsSvc_BucketSettingsServiceCallback_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]byte), args[2].(interface{}))
	})
	return _c
}

func (_c *BucketSettingsSvc_BucketSettingsServiceCallback_Call) Return(_a0 error) *BucketSettingsSvc_BucketSettingsServiceCallback_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BucketSettingsSvc_BucketSettingsServiceCallback_Call) RunAndReturn(run func(string, []byte, interface{}) error) *BucketSettingsSvc_BucketSettingsServiceCallback_Call {
	_c.Call.Return(run)
	return _c
}

// SetBucketSettings provides a mock function with given fields: bucketName, bucketSettings
func (_m *BucketSettingsSvc) SetBucketSettings(bucketName string, bucketSettings *metadata.BucketSettings) error {
	ret := _m.Called(bucketName, bucketSettings)

	if len(ret) == 0 {
		panic("no return value specified for SetBucketSettings")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *metadata.BucketSettings) error); ok {
		r0 = rf(bucketName, bucketSettings)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BucketSettingsSvc_SetBucketSettings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetBucketSettings'
type BucketSettingsSvc_SetBucketSettings_Call struct {
	*mock.Call
}

// SetBucketSettings is a helper method to define mock.On call
//   - bucketName string
//   - bucketSettings *metadata.BucketSettings
func (_e *BucketSettingsSvc_Expecter) SetBucketSettings(bucketName interface{}, bucketSettings interface{}) *BucketSettingsSvc_SetBucketSettings_Call {
	return &BucketSettingsSvc_SetBucketSettings_Call{Call: _e.mock.On("SetBucketSettings", bucketName, bucketSettings)}
}

func (_c *BucketSettingsSvc_SetBucketSettings_Call) Run(run func(bucketName string, bucketSettings *metadata.BucketSettings)) *BucketSettingsSvc_SetBucketSettings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*metadata.BucketSettings))
	})
	return _c
}

func (_c *BucketSettingsSvc_SetBucketSettings_Call) Return(_a0 error) *BucketSettingsSvc_SetBucketSettings_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BucketSettingsSvc_SetBucketSettings_Call) RunAndReturn(run func(string, *metadata.BucketSettings) error) *BucketSettingsSvc_SetBucketSettings_Call {
	_c.Call.Return(run)
	return _c
}

// SetMetadataChangeHandlerCallback provides a mock function with given fields: callBack
func (_m *BucketSettingsSvc) SetMetadataChangeHandlerCallback(callBack base.MetadataChangeHandlerCallback) {
	_m.Called(callBack)
}

// BucketSettingsSvc_SetMetadataChangeHandlerCallback_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetMetadataChangeHandlerCallback'
type BucketSettingsSvc_SetMetadataChangeHandlerCallback_Call struct {
	*mock.Call
}

// SetMetadataChangeHandlerCallback is a helper method to define mock.On call
//   - callBack base.MetadataChangeHandlerCallback
func (_e *BucketSettingsSvc_Expecter) SetMetadataChangeHandlerCallback(callBack interface{}) *BucketSettingsSvc_SetMetadataChangeHandlerCallback_Call {
	return &BucketSettingsSvc_SetMetadataChangeHandlerCallback_Call{Call: _e.mock.On("SetMetadataChangeHandlerCallback", callBack)}
}

func (_c *BucketSettingsSvc_SetMetadataChangeHandlerCallback_Call) Run(run func(callBack base.MetadataChangeHandlerCallback)) *BucketSettingsSvc_SetMetadataChangeHandlerCallback_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(base.MetadataChangeHandlerCallback))
	})
	return _c
}

func (_c *BucketSettingsSvc_SetMetadataChangeHandlerCallback_Call) Return() *BucketSettingsSvc_SetMetadataChangeHandlerCallback_Call {
	_c.Call.Return()
	return _c
}

func (_c *BucketSettingsSvc_SetMetadataChangeHandlerCallback_Call) RunAndReturn(run func(base.MetadataChangeHandlerCallback)) *BucketSettingsSvc_SetMetadataChangeHandlerCallback_Call {
	_c.Run(run)
	return _c
}

// NewBucketSettingsSvc creates a new instance of BucketSettingsSvc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBucketSettingsSvc(t interface {
	mock.TestingT
	Cleanup(func())
}) *BucketSettingsSvc {
	mock := &BucketSettingsSvc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
