// Code generated by mockery. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// BucketInfoGetter is an autogenerated mock type for the BucketInfoGetter type
type BucketInfoGetter struct {
	mock.Mock
}

type BucketInfoGetter_Expecter struct {
	mock *mock.Mock
}

func (_m *BucketInfoGetter) EXPECT() *BucketInfoGetter_Expecter {
	return &BucketInfoGetter_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields:
func (_m *BucketInfoGetter) Execute() (map[string]interface{}, bool, string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 map[string]interface{}
	var r1 bool
	var r2 string
	var r3 error
	if rf, ok := ret.Get(0).(func() (map[string]interface{}, bool, string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() map[string]interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func() bool); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func() string); ok {
		r2 = rf()
	} else {
		r2 = ret.Get(2).(string)
	}

	if rf, ok := ret.Get(3).(func() error); ok {
		r3 = rf()
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// BucketInfoGetter_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type BucketInfoGetter_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
func (_e *BucketInfoGetter_Expecter) Execute() *BucketInfoGetter_Execute_Call {
	return &BucketInfoGetter_Execute_Call{Call: _e.mock.On("Execute")}
}

func (_c *BucketInfoGetter_Execute_Call) Run(run func()) *BucketInfoGetter_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BucketInfoGetter_Execute_Call) Return(_a0 map[string]interface{}, _a1 bool, _a2 string, _a3 error) *BucketInfoGetter_Execute_Call {
	_c.Call.Return(_a0, _a1, _a2, _a3)
	return _c
}

func (_c *BucketInfoGetter_Execute_Call) RunAndReturn(run func() (map[string]interface{}, bool, string, error)) *BucketInfoGetter_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewBucketInfoGetter creates a new instance of BucketInfoGetter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBucketInfoGetter(t interface {
	mock.TestingT
	Cleanup(func())
}) *BucketInfoGetter {
	mock := &BucketInfoGetter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
