// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	base "github.com/couchbase/goxdcr/base"
	metadata "github.com/couchbase/goxdcr/metadata"

	mock "github.com/stretchr/testify/mock"
)

// ConnectivityHelperSvc is an autogenerated mock type for the ConnectivityHelperSvc type
type ConnectivityHelperSvc struct {
	mock.Mock
}

type ConnectivityHelperSvc_Expecter struct {
	mock *mock.Mock
}

func (_m *ConnectivityHelperSvc) EXPECT() *ConnectivityHelperSvc_Expecter {
	return &ConnectivityHelperSvc_Expecter{mock: &_m.Mock}
}

// GetOverallStatus provides a mock function with given fields:
func (_m *ConnectivityHelperSvc) GetOverallStatus() metadata.ConnectivityStatus {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetOverallStatus")
	}

	var r0 metadata.ConnectivityStatus
	if rf, ok := ret.Get(0).(func() metadata.ConnectivityStatus); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(metadata.ConnectivityStatus)
	}

	return r0
}

// ConnectivityHelperSvc_GetOverallStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOverallStatus'
type ConnectivityHelperSvc_GetOverallStatus_Call struct {
	*mock.Call
}

// GetOverallStatus is a helper method to define mock.On call
func (_e *ConnectivityHelperSvc_Expecter) GetOverallStatus() *ConnectivityHelperSvc_GetOverallStatus_Call {
	return &ConnectivityHelperSvc_GetOverallStatus_Call{Call: _e.mock.On("GetOverallStatus")}
}

func (_c *ConnectivityHelperSvc_GetOverallStatus_Call) Run(run func()) *ConnectivityHelperSvc_GetOverallStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ConnectivityHelperSvc_GetOverallStatus_Call) Return(_a0 metadata.ConnectivityStatus) *ConnectivityHelperSvc_GetOverallStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ConnectivityHelperSvc_GetOverallStatus_Call) RunAndReturn(run func() metadata.ConnectivityStatus) *ConnectivityHelperSvc_GetOverallStatus_Call {
	_c.Call.Return(run)
	return _c
}

// MarkEncryptionError provides a mock function with given fields: val
func (_m *ConnectivityHelperSvc) MarkEncryptionError(val bool) {
	_m.Called(val)
}

// ConnectivityHelperSvc_MarkEncryptionError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarkEncryptionError'
type ConnectivityHelperSvc_MarkEncryptionError_Call struct {
	*mock.Call
}

// MarkEncryptionError is a helper method to define mock.On call
//   - val bool
func (_e *ConnectivityHelperSvc_Expecter) MarkEncryptionError(val interface{}) *ConnectivityHelperSvc_MarkEncryptionError_Call {
	return &ConnectivityHelperSvc_MarkEncryptionError_Call{Call: _e.mock.On("MarkEncryptionError", val)}
}

func (_c *ConnectivityHelperSvc_MarkEncryptionError_Call) Run(run func(val bool)) *ConnectivityHelperSvc_MarkEncryptionError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bool))
	})
	return _c
}

func (_c *ConnectivityHelperSvc_MarkEncryptionError_Call) Return() *ConnectivityHelperSvc_MarkEncryptionError_Call {
	_c.Call.Return()
	return _c
}

func (_c *ConnectivityHelperSvc_MarkEncryptionError_Call) RunAndReturn(run func(bool)) *ConnectivityHelperSvc_MarkEncryptionError_Call {
	_c.Call.Return(run)
	return _c
}

// MarkIpFamilyError provides a mock function with given fields: _a0
func (_m *ConnectivityHelperSvc) MarkIpFamilyError(_a0 bool) {
	_m.Called(_a0)
}

// ConnectivityHelperSvc_MarkIpFamilyError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarkIpFamilyError'
type ConnectivityHelperSvc_MarkIpFamilyError_Call struct {
	*mock.Call
}

// MarkIpFamilyError is a helper method to define mock.On call
//   - _a0 bool
func (_e *ConnectivityHelperSvc_Expecter) MarkIpFamilyError(_a0 interface{}) *ConnectivityHelperSvc_MarkIpFamilyError_Call {
	return &ConnectivityHelperSvc_MarkIpFamilyError_Call{Call: _e.mock.On("MarkIpFamilyError", _a0)}
}

func (_c *ConnectivityHelperSvc_MarkIpFamilyError_Call) Run(run func(_a0 bool)) *ConnectivityHelperSvc_MarkIpFamilyError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bool))
	})
	return _c
}

func (_c *ConnectivityHelperSvc_MarkIpFamilyError_Call) Return() *ConnectivityHelperSvc_MarkIpFamilyError_Call {
	_c.Call.Return()
	return _c
}

func (_c *ConnectivityHelperSvc_MarkIpFamilyError_Call) RunAndReturn(run func(bool)) *ConnectivityHelperSvc_MarkIpFamilyError_Call {
	_c.Call.Return(run)
	return _c
}

// MarkNode provides a mock function with given fields: nodeName, status
func (_m *ConnectivityHelperSvc) MarkNode(nodeName string, status metadata.ConnectivityStatus) (bool, bool) {
	ret := _m.Called(nodeName, status)

	if len(ret) == 0 {
		panic("no return value specified for MarkNode")
	}

	var r0 bool
	var r1 bool
	if rf, ok := ret.Get(0).(func(string, metadata.ConnectivityStatus) (bool, bool)); ok {
		return rf(nodeName, status)
	}
	if rf, ok := ret.Get(0).(func(string, metadata.ConnectivityStatus) bool); ok {
		r0 = rf(nodeName, status)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string, metadata.ConnectivityStatus) bool); ok {
		r1 = rf(nodeName, status)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// ConnectivityHelperSvc_MarkNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarkNode'
type ConnectivityHelperSvc_MarkNode_Call struct {
	*mock.Call
}

// MarkNode is a helper method to define mock.On call
//   - nodeName string
//   - status metadata.ConnectivityStatus
func (_e *ConnectivityHelperSvc_Expecter) MarkNode(nodeName interface{}, status interface{}) *ConnectivityHelperSvc_MarkNode_Call {
	return &ConnectivityHelperSvc_MarkNode_Call{Call: _e.mock.On("MarkNode", nodeName, status)}
}

func (_c *ConnectivityHelperSvc_MarkNode_Call) Run(run func(nodeName string, status metadata.ConnectivityStatus)) *ConnectivityHelperSvc_MarkNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(metadata.ConnectivityStatus))
	})
	return _c
}

func (_c *ConnectivityHelperSvc_MarkNode_Call) Return(changedState bool, authErrFixed bool) *ConnectivityHelperSvc_MarkNode_Call {
	_c.Call.Return(changedState, authErrFixed)
	return _c
}

func (_c *ConnectivityHelperSvc_MarkNode_Call) RunAndReturn(run func(string, metadata.ConnectivityStatus) (bool, bool)) *ConnectivityHelperSvc_MarkNode_Call {
	_c.Call.Return(run)
	return _c
}

// MarkNodeHeartbeatStatus provides a mock function with given fields: nodeName, heartbeatMap
func (_m *ConnectivityHelperSvc) MarkNodeHeartbeatStatus(nodeName string, heartbeatMap map[string]base.HeartbeatStatus) {
	_m.Called(nodeName, heartbeatMap)
}

// ConnectivityHelperSvc_MarkNodeHeartbeatStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarkNodeHeartbeatStatus'
type ConnectivityHelperSvc_MarkNodeHeartbeatStatus_Call struct {
	*mock.Call
}

// MarkNodeHeartbeatStatus is a helper method to define mock.On call
//   - nodeName string
//   - heartbeatMap map[string]base.HeartbeatStatus
func (_e *ConnectivityHelperSvc_Expecter) MarkNodeHeartbeatStatus(nodeName interface{}, heartbeatMap interface{}) *ConnectivityHelperSvc_MarkNodeHeartbeatStatus_Call {
	return &ConnectivityHelperSvc_MarkNodeHeartbeatStatus_Call{Call: _e.mock.On("MarkNodeHeartbeatStatus", nodeName, heartbeatMap)}
}

func (_c *ConnectivityHelperSvc_MarkNodeHeartbeatStatus_Call) Run(run func(nodeName string, heartbeatMap map[string]base.HeartbeatStatus)) *ConnectivityHelperSvc_MarkNodeHeartbeatStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(map[string]base.HeartbeatStatus))
	})
	return _c
}

func (_c *ConnectivityHelperSvc_MarkNodeHeartbeatStatus_Call) Return() *ConnectivityHelperSvc_MarkNodeHeartbeatStatus_Call {
	_c.Call.Return()
	return _c
}

func (_c *ConnectivityHelperSvc_MarkNodeHeartbeatStatus_Call) RunAndReturn(run func(string, map[string]base.HeartbeatStatus)) *ConnectivityHelperSvc_MarkNodeHeartbeatStatus_Call {
	_c.Call.Return(run)
	return _c
}

// String provides a mock function with given fields:
func (_m *ConnectivityHelperSvc) String() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for String")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ConnectivityHelperSvc_String_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'String'
type ConnectivityHelperSvc_String_Call struct {
	*mock.Call
}

// String is a helper method to define mock.On call
func (_e *ConnectivityHelperSvc_Expecter) String() *ConnectivityHelperSvc_String_Call {
	return &ConnectivityHelperSvc_String_Call{Call: _e.mock.On("String")}
}

func (_c *ConnectivityHelperSvc_String_Call) Run(run func()) *ConnectivityHelperSvc_String_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ConnectivityHelperSvc_String_Call) Return(_a0 string) *ConnectivityHelperSvc_String_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ConnectivityHelperSvc_String_Call) RunAndReturn(run func() string) *ConnectivityHelperSvc_String_Call {
	_c.Call.Return(run)
	return _c
}

// SyncWithValidList provides a mock function with given fields: nodeList
func (_m *ConnectivityHelperSvc) SyncWithValidList(nodeList base.StringPairList) {
	_m.Called(nodeList)
}

// ConnectivityHelperSvc_SyncWithValidList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SyncWithValidList'
type ConnectivityHelperSvc_SyncWithValidList_Call struct {
	*mock.Call
}

// SyncWithValidList is a helper method to define mock.On call
//   - nodeList base.StringPairList
func (_e *ConnectivityHelperSvc_Expecter) SyncWithValidList(nodeList interface{}) *ConnectivityHelperSvc_SyncWithValidList_Call {
	return &ConnectivityHelperSvc_SyncWithValidList_Call{Call: _e.mock.On("SyncWithValidList", nodeList)}
}

func (_c *ConnectivityHelperSvc_SyncWithValidList_Call) Run(run func(nodeList base.StringPairList)) *ConnectivityHelperSvc_SyncWithValidList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(base.StringPairList))
	})
	return _c
}

func (_c *ConnectivityHelperSvc_SyncWithValidList_Call) Return() *ConnectivityHelperSvc_SyncWithValidList_Call {
	_c.Call.Return()
	return _c
}

func (_c *ConnectivityHelperSvc_SyncWithValidList_Call) RunAndReturn(run func(base.StringPairList)) *ConnectivityHelperSvc_SyncWithValidList_Call {
	_c.Call.Return(run)
	return _c
}

// NewConnectivityHelperSvc creates a new instance of ConnectivityHelperSvc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConnectivityHelperSvc(t interface {
	mock.TestingT
	Cleanup(func())
}) *ConnectivityHelperSvc {
	mock := &ConnectivityHelperSvc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
