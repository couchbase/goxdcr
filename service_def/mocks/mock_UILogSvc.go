// Code generated by mockery. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// UILogSvc is an autogenerated mock type for the UILogSvc type
type UILogSvc struct {
	mock.Mock
}

type UILogSvc_Expecter struct {
	mock *mock.Mock
}

func (_m *UILogSvc) EXPECT() *UILogSvc_Expecter {
	return &UILogSvc_Expecter{mock: &_m.Mock}
}

// Write provides a mock function with given fields: message
func (_m *UILogSvc) Write(message string) {
	_m.Called(message)
}

// UILogSvc_Write_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Write'
type UILogSvc_Write_Call struct {
	*mock.Call
}

// Write is a helper method to define mock.On call
//   - message string
func (_e *UILogSvc_Expecter) Write(message interface{}) *UILogSvc_Write_Call {
	return &UILogSvc_Write_Call{Call: _e.mock.On("Write", message)}
}

func (_c *UILogSvc_Write_Call) Run(run func(message string)) *UILogSvc_Write_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *UILogSvc_Write_Call) Return() *UILogSvc_Write_Call {
	_c.Call.Return()
	return _c
}

func (_c *UILogSvc_Write_Call) RunAndReturn(run func(string)) *UILogSvc_Write_Call {
	_c.Run(run)
	return _c
}

// NewUILogSvc creates a new instance of UILogSvc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUILogSvc(t interface {
	mock.TestingT
	Cleanup(func())
}) *UILogSvc {
	mock := &UILogSvc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
