// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	metadata "github.com/couchbase/goxdcr/metadata"
	mock "github.com/stretchr/testify/mock"
)

// CollectionsManifestAgentIface is an autogenerated mock type for the CollectionsManifestAgentIface type
type CollectionsManifestAgentIface struct {
	mock.Mock
}

// ForceTargetManifestRefresh provides a mock function with given fields:
func (_m *CollectionsManifestAgentIface) ForceTargetManifestRefresh() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetLastPersistedManifests provides a mock function with given fields:
func (_m *CollectionsManifestAgentIface) GetLastPersistedManifests() (*metadata.CollectionsManifestPair, error) {
	ret := _m.Called()

	var r0 *metadata.CollectionsManifestPair
	if rf, ok := ret.Get(0).(func() *metadata.CollectionsManifestPair); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*metadata.CollectionsManifestPair)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSourceManifest provides a mock function with given fields:
func (_m *CollectionsManifestAgentIface) GetSourceManifest() (*metadata.CollectionsManifest, error) {
	ret := _m.Called()

	var r0 *metadata.CollectionsManifest
	if rf, ok := ret.Get(0).(func() *metadata.CollectionsManifest); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*metadata.CollectionsManifest)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSpecificSourceManifest provides a mock function with given fields: manifestVersion
func (_m *CollectionsManifestAgentIface) GetSpecificSourceManifest(manifestVersion uint64) (*metadata.CollectionsManifest, error) {
	ret := _m.Called(manifestVersion)

	var r0 *metadata.CollectionsManifest
	if rf, ok := ret.Get(0).(func(uint64) *metadata.CollectionsManifest); ok {
		r0 = rf(manifestVersion)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*metadata.CollectionsManifest)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(manifestVersion)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSpecificTargetManifest provides a mock function with given fields: manifestVersion
func (_m *CollectionsManifestAgentIface) GetSpecificTargetManifest(manifestVersion uint64) (*metadata.CollectionsManifest, error) {
	ret := _m.Called(manifestVersion)

	var r0 *metadata.CollectionsManifest
	if rf, ok := ret.Get(0).(func(uint64) *metadata.CollectionsManifest); ok {
		r0 = rf(manifestVersion)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*metadata.CollectionsManifest)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(manifestVersion)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTargetManifest provides a mock function with given fields:
func (_m *CollectionsManifestAgentIface) GetTargetManifest() (*metadata.CollectionsManifest, error) {
	ret := _m.Called()

	var r0 *metadata.CollectionsManifest
	if rf, ok := ret.Get(0).(func() *metadata.CollectionsManifest); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*metadata.CollectionsManifest)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PersistNeededManifests provides a mock function with given fields:
func (_m *CollectionsManifestAgentIface) PersistNeededManifests() (error, error, bool, bool) {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	var r2 bool
	if rf, ok := ret.Get(2).(func() bool); ok {
		r2 = rf()
	} else {
		r2 = ret.Get(2).(bool)
	}

	var r3 bool
	if rf, ok := ret.Get(3).(func() bool); ok {
		r3 = rf()
	} else {
		r3 = ret.Get(3).(bool)
	}

	return r0, r1, r2, r3
}

// SetTempAgent provides a mock function with given fields:
func (_m *CollectionsManifestAgentIface) SetTempAgent() {
	_m.Called()
}

// Start provides a mock function with given fields:
func (_m *CollectionsManifestAgentIface) Start() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Stop provides a mock function with given fields:
func (_m *CollectionsManifestAgentIface) Stop() {
	_m.Called()
}

type mockConstructorTestingTNewCollectionsManifestAgentIface interface {
	mock.TestingT
	Cleanup(func())
}

// NewCollectionsManifestAgentIface creates a new instance of CollectionsManifestAgentIface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCollectionsManifestAgentIface(t mockConstructorTestingTNewCollectionsManifestAgentIface) *CollectionsManifestAgentIface {
	mock := &CollectionsManifestAgentIface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
