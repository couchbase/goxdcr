// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	metadata "github.com/couchbase/goxdcr/metadata"
	mock "github.com/stretchr/testify/mock"
)

// ManifestsService is an autogenerated mock type for the ManifestsService type
type ManifestsService struct {
	mock.Mock
}

// DelManifests provides a mock function with given fields: replSpec
func (_m *ManifestsService) DelManifests(replSpec *metadata.ReplicationSpecification) error {
	ret := _m.Called(replSpec)

	if len(ret) == 0 {
		panic("no return value specified for DelManifests")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*metadata.ReplicationSpecification) error); ok {
		r0 = rf(replSpec)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetSourceManifests provides a mock function with given fields: replSpec
func (_m *ManifestsService) GetSourceManifests(replSpec *metadata.ReplicationSpecification) (*metadata.ManifestsList, error) {
	ret := _m.Called(replSpec)

	if len(ret) == 0 {
		panic("no return value specified for GetSourceManifests")
	}

	var r0 *metadata.ManifestsList
	var r1 error
	if rf, ok := ret.Get(0).(func(*metadata.ReplicationSpecification) (*metadata.ManifestsList, error)); ok {
		return rf(replSpec)
	}
	if rf, ok := ret.Get(0).(func(*metadata.ReplicationSpecification) *metadata.ManifestsList); ok {
		r0 = rf(replSpec)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*metadata.ManifestsList)
		}
	}

	if rf, ok := ret.Get(1).(func(*metadata.ReplicationSpecification) error); ok {
		r1 = rf(replSpec)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTargetManifests provides a mock function with given fields: replSpec
func (_m *ManifestsService) GetTargetManifests(replSpec *metadata.ReplicationSpecification) (*metadata.ManifestsList, error) {
	ret := _m.Called(replSpec)

	if len(ret) == 0 {
		panic("no return value specified for GetTargetManifests")
	}

	var r0 *metadata.ManifestsList
	var r1 error
	if rf, ok := ret.Get(0).(func(*metadata.ReplicationSpecification) (*metadata.ManifestsList, error)); ok {
		return rf(replSpec)
	}
	if rf, ok := ret.Get(0).(func(*metadata.ReplicationSpecification) *metadata.ManifestsList); ok {
		r0 = rf(replSpec)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*metadata.ManifestsList)
		}
	}

	if rf, ok := ret.Get(1).(func(*metadata.ReplicationSpecification) error); ok {
		r1 = rf(replSpec)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpsertSourceManifests provides a mock function with given fields: replSpec, src
func (_m *ManifestsService) UpsertSourceManifests(replSpec *metadata.ReplicationSpecification, src *metadata.ManifestsList) error {
	ret := _m.Called(replSpec, src)

	if len(ret) == 0 {
		panic("no return value specified for UpsertSourceManifests")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*metadata.ReplicationSpecification, *metadata.ManifestsList) error); ok {
		r0 = rf(replSpec, src)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpsertTargetManifests provides a mock function with given fields: replSpec, tgt
func (_m *ManifestsService) UpsertTargetManifests(replSpec *metadata.ReplicationSpecification, tgt *metadata.ManifestsList) error {
	ret := _m.Called(replSpec, tgt)

	if len(ret) == 0 {
		panic("no return value specified for UpsertTargetManifests")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*metadata.ReplicationSpecification, *metadata.ManifestsList) error); ok {
		r0 = rf(replSpec, tgt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewManifestsService creates a new instance of ManifestsService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewManifestsService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ManifestsService {
	mock := &ManifestsService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
