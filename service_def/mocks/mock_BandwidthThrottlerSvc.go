// Code generated by mockery. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// BandwidthThrottlerSvc is an autogenerated mock type for the BandwidthThrottlerSvc type
type BandwidthThrottlerSvc struct {
	mock.Mock
}

type BandwidthThrottlerSvc_Expecter struct {
	mock *mock.Mock
}

func (_m *BandwidthThrottlerSvc) EXPECT() *BandwidthThrottlerSvc_Expecter {
	return &BandwidthThrottlerSvc_Expecter{mock: &_m.Mock}
}

// Throttle provides a mock function with given fields: numberOfBytes, minNumberOfBytes, numberOfBytesOfFirstItem
func (_m *BandwidthThrottlerSvc) Throttle(numberOfBytes int64, minNumberOfBytes int64, numberOfBytesOfFirstItem int64) (int64, int64) {
	ret := _m.Called(numberOfBytes, minNumberOfBytes, numberOfBytesOfFirstItem)

	if len(ret) == 0 {
		panic("no return value specified for Throttle")
	}

	var r0 int64
	var r1 int64
	if rf, ok := ret.Get(0).(func(int64, int64, int64) (int64, int64)); ok {
		return rf(numberOfBytes, minNumberOfBytes, numberOfBytesOfFirstItem)
	}
	if rf, ok := ret.Get(0).(func(int64, int64, int64) int64); ok {
		r0 = rf(numberOfBytes, minNumberOfBytes, numberOfBytesOfFirstItem)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(int64, int64, int64) int64); ok {
		r1 = rf(numberOfBytes, minNumberOfBytes, numberOfBytesOfFirstItem)
	} else {
		r1 = ret.Get(1).(int64)
	}

	return r0, r1
}

// BandwidthThrottlerSvc_Throttle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Throttle'
type BandwidthThrottlerSvc_Throttle_Call struct {
	*mock.Call
}

// Throttle is a helper method to define mock.On call
//   - numberOfBytes int64
//   - minNumberOfBytes int64
//   - numberOfBytesOfFirstItem int64
func (_e *BandwidthThrottlerSvc_Expecter) Throttle(numberOfBytes interface{}, minNumberOfBytes interface{}, numberOfBytesOfFirstItem interface{}) *BandwidthThrottlerSvc_Throttle_Call {
	return &BandwidthThrottlerSvc_Throttle_Call{Call: _e.mock.On("Throttle", numberOfBytes, minNumberOfBytes, numberOfBytesOfFirstItem)}
}

func (_c *BandwidthThrottlerSvc_Throttle_Call) Run(run func(numberOfBytes int64, minNumberOfBytes int64, numberOfBytesOfFirstItem int64)) *BandwidthThrottlerSvc_Throttle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(int64), args[2].(int64))
	})
	return _c
}

func (_c *BandwidthThrottlerSvc_Throttle_Call) Return(bytesCanSend int64, bytesAllowed int64) *BandwidthThrottlerSvc_Throttle_Call {
	_c.Call.Return(bytesCanSend, bytesAllowed)
	return _c
}

func (_c *BandwidthThrottlerSvc_Throttle_Call) RunAndReturn(run func(int64, int64, int64) (int64, int64)) *BandwidthThrottlerSvc_Throttle_Call {
	_c.Call.Return(run)
	return _c
}

// Wait provides a mock function with given fields:
func (_m *BandwidthThrottlerSvc) Wait() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Wait")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BandwidthThrottlerSvc_Wait_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Wait'
type BandwidthThrottlerSvc_Wait_Call struct {
	*mock.Call
}

// Wait is a helper method to define mock.On call
func (_e *BandwidthThrottlerSvc_Expecter) Wait() *BandwidthThrottlerSvc_Wait_Call {
	return &BandwidthThrottlerSvc_Wait_Call{Call: _e.mock.On("Wait")}
}

func (_c *BandwidthThrottlerSvc_Wait_Call) Run(run func()) *BandwidthThrottlerSvc_Wait_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BandwidthThrottlerSvc_Wait_Call) Return(_a0 error) *BandwidthThrottlerSvc_Wait_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BandwidthThrottlerSvc_Wait_Call) RunAndReturn(run func() error) *BandwidthThrottlerSvc_Wait_Call {
	_c.Call.Return(run)
	return _c
}

// NewBandwidthThrottlerSvc creates a new instance of BandwidthThrottlerSvc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBandwidthThrottlerSvc(t interface {
	mock.TestingT
	Cleanup(func())
}) *BandwidthThrottlerSvc {
	mock := &BandwidthThrottlerSvc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
