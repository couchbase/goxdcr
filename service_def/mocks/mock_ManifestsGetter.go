// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	metadata "github.com/couchbase/goxdcr/metadata"
	mock "github.com/stretchr/testify/mock"
)

// ManifestsGetter is an autogenerated mock type for the ManifestsGetter type
type ManifestsGetter struct {
	mock.Mock
}

type ManifestsGetter_Expecter struct {
	mock *mock.Mock
}

func (_m *ManifestsGetter) EXPECT() *ManifestsGetter_Expecter {
	return &ManifestsGetter_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: spec, specMayNotExist
func (_m *ManifestsGetter) Execute(spec *metadata.ReplicationSpecification, specMayNotExist bool) (*metadata.CollectionsManifest, *metadata.CollectionsManifest, error) {
	ret := _m.Called(spec, specMayNotExist)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 *metadata.CollectionsManifest
	var r1 *metadata.CollectionsManifest
	var r2 error
	if rf, ok := ret.Get(0).(func(*metadata.ReplicationSpecification, bool) (*metadata.CollectionsManifest, *metadata.CollectionsManifest, error)); ok {
		return rf(spec, specMayNotExist)
	}
	if rf, ok := ret.Get(0).(func(*metadata.ReplicationSpecification, bool) *metadata.CollectionsManifest); ok {
		r0 = rf(spec, specMayNotExist)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*metadata.CollectionsManifest)
		}
	}

	if rf, ok := ret.Get(1).(func(*metadata.ReplicationSpecification, bool) *metadata.CollectionsManifest); ok {
		r1 = rf(spec, specMayNotExist)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*metadata.CollectionsManifest)
		}
	}

	if rf, ok := ret.Get(2).(func(*metadata.ReplicationSpecification, bool) error); ok {
		r2 = rf(spec, specMayNotExist)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ManifestsGetter_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type ManifestsGetter_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - spec *metadata.ReplicationSpecification
//   - specMayNotExist bool
func (_e *ManifestsGetter_Expecter) Execute(spec interface{}, specMayNotExist interface{}) *ManifestsGetter_Execute_Call {
	return &ManifestsGetter_Execute_Call{Call: _e.mock.On("Execute", spec, specMayNotExist)}
}

func (_c *ManifestsGetter_Execute_Call) Run(run func(spec *metadata.ReplicationSpecification, specMayNotExist bool)) *ManifestsGetter_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*metadata.ReplicationSpecification), args[1].(bool))
	})
	return _c
}

func (_c *ManifestsGetter_Execute_Call) Return(src *metadata.CollectionsManifest, tgt *metadata.CollectionsManifest, err error) *ManifestsGetter_Execute_Call {
	_c.Call.Return(src, tgt, err)
	return _c
}

func (_c *ManifestsGetter_Execute_Call) RunAndReturn(run func(*metadata.ReplicationSpecification, bool) (*metadata.CollectionsManifest, *metadata.CollectionsManifest, error)) *ManifestsGetter_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewManifestsGetter creates a new instance of ManifestsGetter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewManifestsGetter(t interface {
	mock.TestingT
	Cleanup(func())
}) *ManifestsGetter {
	mock := &ManifestsGetter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
