// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	base "github.com/couchbase/goxdcr/base"
	metadata "github.com/couchbase/goxdcr/metadata"

	mock "github.com/stretchr/testify/mock"

	service_def "github.com/couchbase/goxdcr/service_def"
)

// ReplicationSpecSvc is an autogenerated mock type for the ReplicationSpecSvc type
type ReplicationSpecSvc struct {
	mock.Mock
}

type ReplicationSpecSvc_Expecter struct {
	mock *mock.Mock
}

func (_m *ReplicationSpecSvc) EXPECT() *ReplicationSpecSvc_Expecter {
	return &ReplicationSpecSvc_Expecter{mock: &_m.Mock}
}

// AddReplicationSpec provides a mock function with given fields: spec, additionalInfo
func (_m *ReplicationSpecSvc) AddReplicationSpec(spec *metadata.ReplicationSpecification, additionalInfo string) error {
	ret := _m.Called(spec, additionalInfo)

	if len(ret) == 0 {
		panic("no return value specified for AddReplicationSpec")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*metadata.ReplicationSpecification, string) error); ok {
		r0 = rf(spec, additionalInfo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReplicationSpecSvc_AddReplicationSpec_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddReplicationSpec'
type ReplicationSpecSvc_AddReplicationSpec_Call struct {
	*mock.Call
}

// AddReplicationSpec is a helper method to define mock.On call
//   - spec *metadata.ReplicationSpecification
//   - additionalInfo string
func (_e *ReplicationSpecSvc_Expecter) AddReplicationSpec(spec interface{}, additionalInfo interface{}) *ReplicationSpecSvc_AddReplicationSpec_Call {
	return &ReplicationSpecSvc_AddReplicationSpec_Call{Call: _e.mock.On("AddReplicationSpec", spec, additionalInfo)}
}

func (_c *ReplicationSpecSvc_AddReplicationSpec_Call) Run(run func(spec *metadata.ReplicationSpecification, additionalInfo string)) *ReplicationSpecSvc_AddReplicationSpec_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*metadata.ReplicationSpecification), args[1].(string))
	})
	return _c
}

func (_c *ReplicationSpecSvc_AddReplicationSpec_Call) Return(_a0 error) *ReplicationSpecSvc_AddReplicationSpec_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ReplicationSpecSvc_AddReplicationSpec_Call) RunAndReturn(run func(*metadata.ReplicationSpecification, string) error) *ReplicationSpecSvc_AddReplicationSpec_Call {
	_c.Call.Return(run)
	return _c
}

// AllActiveReplicationSpecsReadOnly provides a mock function with given fields:
func (_m *ReplicationSpecSvc) AllActiveReplicationSpecsReadOnly() (map[string]*metadata.ReplicationSpecification, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for AllActiveReplicationSpecsReadOnly")
	}

	var r0 map[string]*metadata.ReplicationSpecification
	var r1 error
	if rf, ok := ret.Get(0).(func() (map[string]*metadata.ReplicationSpecification, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() map[string]*metadata.ReplicationSpecification); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*metadata.ReplicationSpecification)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReplicationSpecSvc_AllActiveReplicationSpecsReadOnly_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AllActiveReplicationSpecsReadOnly'
type ReplicationSpecSvc_AllActiveReplicationSpecsReadOnly_Call struct {
	*mock.Call
}

// AllActiveReplicationSpecsReadOnly is a helper method to define mock.On call
func (_e *ReplicationSpecSvc_Expecter) AllActiveReplicationSpecsReadOnly() *ReplicationSpecSvc_AllActiveReplicationSpecsReadOnly_Call {
	return &ReplicationSpecSvc_AllActiveReplicationSpecsReadOnly_Call{Call: _e.mock.On("AllActiveReplicationSpecsReadOnly")}
}

func (_c *ReplicationSpecSvc_AllActiveReplicationSpecsReadOnly_Call) Run(run func()) *ReplicationSpecSvc_AllActiveReplicationSpecsReadOnly_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ReplicationSpecSvc_AllActiveReplicationSpecsReadOnly_Call) Return(_a0 map[string]*metadata.ReplicationSpecification, _a1 error) *ReplicationSpecSvc_AllActiveReplicationSpecsReadOnly_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReplicationSpecSvc_AllActiveReplicationSpecsReadOnly_Call) RunAndReturn(run func() (map[string]*metadata.ReplicationSpecification, error)) *ReplicationSpecSvc_AllActiveReplicationSpecsReadOnly_Call {
	_c.Call.Return(run)
	return _c
}

// AllReplicationSpecIds provides a mock function with given fields:
func (_m *ReplicationSpecSvc) AllReplicationSpecIds() ([]string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for AllReplicationSpecIds")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReplicationSpecSvc_AllReplicationSpecIds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AllReplicationSpecIds'
type ReplicationSpecSvc_AllReplicationSpecIds_Call struct {
	*mock.Call
}

// AllReplicationSpecIds is a helper method to define mock.On call
func (_e *ReplicationSpecSvc_Expecter) AllReplicationSpecIds() *ReplicationSpecSvc_AllReplicationSpecIds_Call {
	return &ReplicationSpecSvc_AllReplicationSpecIds_Call{Call: _e.mock.On("AllReplicationSpecIds")}
}

func (_c *ReplicationSpecSvc_AllReplicationSpecIds_Call) Run(run func()) *ReplicationSpecSvc_AllReplicationSpecIds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ReplicationSpecSvc_AllReplicationSpecIds_Call) Return(_a0 []string, _a1 error) *ReplicationSpecSvc_AllReplicationSpecIds_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReplicationSpecSvc_AllReplicationSpecIds_Call) RunAndReturn(run func() ([]string, error)) *ReplicationSpecSvc_AllReplicationSpecIds_Call {
	_c.Call.Return(run)
	return _c
}

// AllReplicationSpecIdsForBucket provides a mock function with given fields: bucket
func (_m *ReplicationSpecSvc) AllReplicationSpecIdsForBucket(bucket string) ([]string, error) {
	ret := _m.Called(bucket)

	if len(ret) == 0 {
		panic("no return value specified for AllReplicationSpecIdsForBucket")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]string, error)); ok {
		return rf(bucket)
	}
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(bucket)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(bucket)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReplicationSpecSvc_AllReplicationSpecIdsForBucket_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AllReplicationSpecIdsForBucket'
type ReplicationSpecSvc_AllReplicationSpecIdsForBucket_Call struct {
	*mock.Call
}

// AllReplicationSpecIdsForBucket is a helper method to define mock.On call
//   - bucket string
func (_e *ReplicationSpecSvc_Expecter) AllReplicationSpecIdsForBucket(bucket interface{}) *ReplicationSpecSvc_AllReplicationSpecIdsForBucket_Call {
	return &ReplicationSpecSvc_AllReplicationSpecIdsForBucket_Call{Call: _e.mock.On("AllReplicationSpecIdsForBucket", bucket)}
}

func (_c *ReplicationSpecSvc_AllReplicationSpecIdsForBucket_Call) Run(run func(bucket string)) *ReplicationSpecSvc_AllReplicationSpecIdsForBucket_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ReplicationSpecSvc_AllReplicationSpecIdsForBucket_Call) Return(_a0 []string, _a1 error) *ReplicationSpecSvc_AllReplicationSpecIdsForBucket_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReplicationSpecSvc_AllReplicationSpecIdsForBucket_Call) RunAndReturn(run func(string) ([]string, error)) *ReplicationSpecSvc_AllReplicationSpecIdsForBucket_Call {
	_c.Call.Return(run)
	return _c
}

// AllReplicationSpecs provides a mock function with given fields:
func (_m *ReplicationSpecSvc) AllReplicationSpecs() (map[string]*metadata.ReplicationSpecification, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for AllReplicationSpecs")
	}

	var r0 map[string]*metadata.ReplicationSpecification
	var r1 error
	if rf, ok := ret.Get(0).(func() (map[string]*metadata.ReplicationSpecification, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() map[string]*metadata.ReplicationSpecification); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*metadata.ReplicationSpecification)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReplicationSpecSvc_AllReplicationSpecs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AllReplicationSpecs'
type ReplicationSpecSvc_AllReplicationSpecs_Call struct {
	*mock.Call
}

// AllReplicationSpecs is a helper method to define mock.On call
func (_e *ReplicationSpecSvc_Expecter) AllReplicationSpecs() *ReplicationSpecSvc_AllReplicationSpecs_Call {
	return &ReplicationSpecSvc_AllReplicationSpecs_Call{Call: _e.mock.On("AllReplicationSpecs")}
}

func (_c *ReplicationSpecSvc_AllReplicationSpecs_Call) Run(run func()) *ReplicationSpecSvc_AllReplicationSpecs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ReplicationSpecSvc_AllReplicationSpecs_Call) Return(_a0 map[string]*metadata.ReplicationSpecification, _a1 error) *ReplicationSpecSvc_AllReplicationSpecs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReplicationSpecSvc_AllReplicationSpecs_Call) RunAndReturn(run func() (map[string]*metadata.ReplicationSpecification, error)) *ReplicationSpecSvc_AllReplicationSpecs_Call {
	_c.Call.Return(run)
	return _c
}

// AllReplicationSpecsWithRemote provides a mock function with given fields: remoteClusterRef
func (_m *ReplicationSpecSvc) AllReplicationSpecsWithRemote(remoteClusterRef *metadata.RemoteClusterReference) ([]*metadata.ReplicationSpecification, error) {
	ret := _m.Called(remoteClusterRef)

	if len(ret) == 0 {
		panic("no return value specified for AllReplicationSpecsWithRemote")
	}

	var r0 []*metadata.ReplicationSpecification
	var r1 error
	if rf, ok := ret.Get(0).(func(*metadata.RemoteClusterReference) ([]*metadata.ReplicationSpecification, error)); ok {
		return rf(remoteClusterRef)
	}
	if rf, ok := ret.Get(0).(func(*metadata.RemoteClusterReference) []*metadata.ReplicationSpecification); ok {
		r0 = rf(remoteClusterRef)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*metadata.ReplicationSpecification)
		}
	}

	if rf, ok := ret.Get(1).(func(*metadata.RemoteClusterReference) error); ok {
		r1 = rf(remoteClusterRef)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReplicationSpecSvc_AllReplicationSpecsWithRemote_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AllReplicationSpecsWithRemote'
type ReplicationSpecSvc_AllReplicationSpecsWithRemote_Call struct {
	*mock.Call
}

// AllReplicationSpecsWithRemote is a helper method to define mock.On call
//   - remoteClusterRef *metadata.RemoteClusterReference
func (_e *ReplicationSpecSvc_Expecter) AllReplicationSpecsWithRemote(remoteClusterRef interface{}) *ReplicationSpecSvc_AllReplicationSpecsWithRemote_Call {
	return &ReplicationSpecSvc_AllReplicationSpecsWithRemote_Call{Call: _e.mock.On("AllReplicationSpecsWithRemote", remoteClusterRef)}
}

func (_c *ReplicationSpecSvc_AllReplicationSpecsWithRemote_Call) Run(run func(remoteClusterRef *metadata.RemoteClusterReference)) *ReplicationSpecSvc_AllReplicationSpecsWithRemote_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*metadata.RemoteClusterReference))
	})
	return _c
}

func (_c *ReplicationSpecSvc_AllReplicationSpecsWithRemote_Call) Return(_a0 []*metadata.ReplicationSpecification, _a1 error) *ReplicationSpecSvc_AllReplicationSpecsWithRemote_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReplicationSpecSvc_AllReplicationSpecsWithRemote_Call) RunAndReturn(run func(*metadata.RemoteClusterReference) ([]*metadata.ReplicationSpecification, error)) *ReplicationSpecSvc_AllReplicationSpecsWithRemote_Call {
	_c.Call.Return(run)
	return _c
}

// ConstructNewReplicationSpec provides a mock function with given fields: sourceBucketName, targetClusterUUID, targetBucketName
func (_m *ReplicationSpecSvc) ConstructNewReplicationSpec(sourceBucketName string, targetClusterUUID string, targetBucketName string) (*metadata.ReplicationSpecification, error) {
	ret := _m.Called(sourceBucketName, targetClusterUUID, targetBucketName)

	if len(ret) == 0 {
		panic("no return value specified for ConstructNewReplicationSpec")
	}

	var r0 *metadata.ReplicationSpecification
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) (*metadata.ReplicationSpecification, error)); ok {
		return rf(sourceBucketName, targetClusterUUID, targetBucketName)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) *metadata.ReplicationSpecification); ok {
		r0 = rf(sourceBucketName, targetClusterUUID, targetBucketName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*metadata.ReplicationSpecification)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(sourceBucketName, targetClusterUUID, targetBucketName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReplicationSpecSvc_ConstructNewReplicationSpec_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConstructNewReplicationSpec'
type ReplicationSpecSvc_ConstructNewReplicationSpec_Call struct {
	*mock.Call
}

// ConstructNewReplicationSpec is a helper method to define mock.On call
//   - sourceBucketName string
//   - targetClusterUUID string
//   - targetBucketName string
func (_e *ReplicationSpecSvc_Expecter) ConstructNewReplicationSpec(sourceBucketName interface{}, targetClusterUUID interface{}, targetBucketName interface{}) *ReplicationSpecSvc_ConstructNewReplicationSpec_Call {
	return &ReplicationSpecSvc_ConstructNewReplicationSpec_Call{Call: _e.mock.On("ConstructNewReplicationSpec", sourceBucketName, targetClusterUUID, targetBucketName)}
}

func (_c *ReplicationSpecSvc_ConstructNewReplicationSpec_Call) Run(run func(sourceBucketName string, targetClusterUUID string, targetBucketName string)) *ReplicationSpecSvc_ConstructNewReplicationSpec_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *ReplicationSpecSvc_ConstructNewReplicationSpec_Call) Return(_a0 *metadata.ReplicationSpecification, _a1 error) *ReplicationSpecSvc_ConstructNewReplicationSpec_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReplicationSpecSvc_ConstructNewReplicationSpec_Call) RunAndReturn(run func(string, string, string) (*metadata.ReplicationSpecification, error)) *ReplicationSpecSvc_ConstructNewReplicationSpec_Call {
	_c.Call.Return(run)
	return _c
}

// DelReplicationSpec provides a mock function with given fields: replicationId
func (_m *ReplicationSpecSvc) DelReplicationSpec(replicationId string) (*metadata.ReplicationSpecification, error) {
	ret := _m.Called(replicationId)

	if len(ret) == 0 {
		panic("no return value specified for DelReplicationSpec")
	}

	var r0 *metadata.ReplicationSpecification
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*metadata.ReplicationSpecification, error)); ok {
		return rf(replicationId)
	}
	if rf, ok := ret.Get(0).(func(string) *metadata.ReplicationSpecification); ok {
		r0 = rf(replicationId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*metadata.ReplicationSpecification)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(replicationId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReplicationSpecSvc_DelReplicationSpec_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DelReplicationSpec'
type ReplicationSpecSvc_DelReplicationSpec_Call struct {
	*mock.Call
}

// DelReplicationSpec is a helper method to define mock.On call
//   - replicationId string
func (_e *ReplicationSpecSvc_Expecter) DelReplicationSpec(replicationId interface{}) *ReplicationSpecSvc_DelReplicationSpec_Call {
	return &ReplicationSpecSvc_DelReplicationSpec_Call{Call: _e.mock.On("DelReplicationSpec", replicationId)}
}

func (_c *ReplicationSpecSvc_DelReplicationSpec_Call) Run(run func(replicationId string)) *ReplicationSpecSvc_DelReplicationSpec_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ReplicationSpecSvc_DelReplicationSpec_Call) Return(_a0 *metadata.ReplicationSpecification, _a1 error) *ReplicationSpecSvc_DelReplicationSpec_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReplicationSpecSvc_DelReplicationSpec_Call) RunAndReturn(run func(string) (*metadata.ReplicationSpecification, error)) *ReplicationSpecSvc_DelReplicationSpec_Call {
	_c.Call.Return(run)
	return _c
}

// DelReplicationSpecWithReason provides a mock function with given fields: replicationId, reason
func (_m *ReplicationSpecSvc) DelReplicationSpecWithReason(replicationId string, reason string) (*metadata.ReplicationSpecification, error) {
	ret := _m.Called(replicationId, reason)

	if len(ret) == 0 {
		panic("no return value specified for DelReplicationSpecWithReason")
	}

	var r0 *metadata.ReplicationSpecification
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*metadata.ReplicationSpecification, error)); ok {
		return rf(replicationId, reason)
	}
	if rf, ok := ret.Get(0).(func(string, string) *metadata.ReplicationSpecification); ok {
		r0 = rf(replicationId, reason)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*metadata.ReplicationSpecification)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(replicationId, reason)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReplicationSpecSvc_DelReplicationSpecWithReason_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DelReplicationSpecWithReason'
type ReplicationSpecSvc_DelReplicationSpecWithReason_Call struct {
	*mock.Call
}

// DelReplicationSpecWithReason is a helper method to define mock.On call
//   - replicationId string
//   - reason string
func (_e *ReplicationSpecSvc_Expecter) DelReplicationSpecWithReason(replicationId interface{}, reason interface{}) *ReplicationSpecSvc_DelReplicationSpecWithReason_Call {
	return &ReplicationSpecSvc_DelReplicationSpecWithReason_Call{Call: _e.mock.On("DelReplicationSpecWithReason", replicationId, reason)}
}

func (_c *ReplicationSpecSvc_DelReplicationSpecWithReason_Call) Run(run func(replicationId string, reason string)) *ReplicationSpecSvc_DelReplicationSpecWithReason_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *ReplicationSpecSvc_DelReplicationSpecWithReason_Call) Return(_a0 *metadata.ReplicationSpecification, _a1 error) *ReplicationSpecSvc_DelReplicationSpecWithReason_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReplicationSpecSvc_DelReplicationSpecWithReason_Call) RunAndReturn(run func(string, string) (*metadata.ReplicationSpecification, error)) *ReplicationSpecSvc_DelReplicationSpecWithReason_Call {
	_c.Call.Return(run)
	return _c
}

// GetDerivedObj provides a mock function with given fields: specId
func (_m *ReplicationSpecSvc) GetDerivedObj(specId string) (interface{}, error) {
	ret := _m.Called(specId)

	if len(ret) == 0 {
		panic("no return value specified for GetDerivedObj")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (interface{}, error)); ok {
		return rf(specId)
	}
	if rf, ok := ret.Get(0).(func(string) interface{}); ok {
		r0 = rf(specId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(specId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReplicationSpecSvc_GetDerivedObj_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDerivedObj'
type ReplicationSpecSvc_GetDerivedObj_Call struct {
	*mock.Call
}

// GetDerivedObj is a helper method to define mock.On call
//   - specId string
func (_e *ReplicationSpecSvc_Expecter) GetDerivedObj(specId interface{}) *ReplicationSpecSvc_GetDerivedObj_Call {
	return &ReplicationSpecSvc_GetDerivedObj_Call{Call: _e.mock.On("GetDerivedObj", specId)}
}

func (_c *ReplicationSpecSvc_GetDerivedObj_Call) Run(run func(specId string)) *ReplicationSpecSvc_GetDerivedObj_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ReplicationSpecSvc_GetDerivedObj_Call) Return(_a0 interface{}, _a1 error) *ReplicationSpecSvc_GetDerivedObj_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReplicationSpecSvc_GetDerivedObj_Call) RunAndReturn(run func(string) (interface{}, error)) *ReplicationSpecSvc_GetDerivedObj_Call {
	_c.Call.Return(run)
	return _c
}

// IsReplicationValidationError provides a mock function with given fields: err
func (_m *ReplicationSpecSvc) IsReplicationValidationError(err error) bool {
	ret := _m.Called(err)

	if len(ret) == 0 {
		panic("no return value specified for IsReplicationValidationError")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(error) bool); ok {
		r0 = rf(err)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ReplicationSpecSvc_IsReplicationValidationError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsReplicationValidationError'
type ReplicationSpecSvc_IsReplicationValidationError_Call struct {
	*mock.Call
}

// IsReplicationValidationError is a helper method to define mock.On call
//   - err error
func (_e *ReplicationSpecSvc_Expecter) IsReplicationValidationError(err interface{}) *ReplicationSpecSvc_IsReplicationValidationError_Call {
	return &ReplicationSpecSvc_IsReplicationValidationError_Call{Call: _e.mock.On("IsReplicationValidationError", err)}
}

func (_c *ReplicationSpecSvc_IsReplicationValidationError_Call) Run(run func(err error)) *ReplicationSpecSvc_IsReplicationValidationError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(error))
	})
	return _c
}

func (_c *ReplicationSpecSvc_IsReplicationValidationError_Call) Return(_a0 bool) *ReplicationSpecSvc_IsReplicationValidationError_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ReplicationSpecSvc_IsReplicationValidationError_Call) RunAndReturn(run func(error) bool) *ReplicationSpecSvc_IsReplicationValidationError_Call {
	_c.Call.Return(run)
	return _c
}

// ReplicationSpec provides a mock function with given fields: replicationId
func (_m *ReplicationSpecSvc) ReplicationSpec(replicationId string) (*metadata.ReplicationSpecification, error) {
	ret := _m.Called(replicationId)

	if len(ret) == 0 {
		panic("no return value specified for ReplicationSpec")
	}

	var r0 *metadata.ReplicationSpecification
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*metadata.ReplicationSpecification, error)); ok {
		return rf(replicationId)
	}
	if rf, ok := ret.Get(0).(func(string) *metadata.ReplicationSpecification); ok {
		r0 = rf(replicationId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*metadata.ReplicationSpecification)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(replicationId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReplicationSpecSvc_ReplicationSpec_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReplicationSpec'
type ReplicationSpecSvc_ReplicationSpec_Call struct {
	*mock.Call
}

// ReplicationSpec is a helper method to define mock.On call
//   - replicationId string
func (_e *ReplicationSpecSvc_Expecter) ReplicationSpec(replicationId interface{}) *ReplicationSpecSvc_ReplicationSpec_Call {
	return &ReplicationSpecSvc_ReplicationSpec_Call{Call: _e.mock.On("ReplicationSpec", replicationId)}
}

func (_c *ReplicationSpecSvc_ReplicationSpec_Call) Run(run func(replicationId string)) *ReplicationSpecSvc_ReplicationSpec_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ReplicationSpecSvc_ReplicationSpec_Call) Return(_a0 *metadata.ReplicationSpecification, _a1 error) *ReplicationSpecSvc_ReplicationSpec_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReplicationSpecSvc_ReplicationSpec_Call) RunAndReturn(run func(string) (*metadata.ReplicationSpecification, error)) *ReplicationSpecSvc_ReplicationSpec_Call {
	_c.Call.Return(run)
	return _c
}

// ReplicationSpecReadOnly provides a mock function with given fields: replicationId
func (_m *ReplicationSpecSvc) ReplicationSpecReadOnly(replicationId string) (*metadata.ReplicationSpecification, error) {
	ret := _m.Called(replicationId)

	if len(ret) == 0 {
		panic("no return value specified for ReplicationSpecReadOnly")
	}

	var r0 *metadata.ReplicationSpecification
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*metadata.ReplicationSpecification, error)); ok {
		return rf(replicationId)
	}
	if rf, ok := ret.Get(0).(func(string) *metadata.ReplicationSpecification); ok {
		r0 = rf(replicationId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*metadata.ReplicationSpecification)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(replicationId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReplicationSpecSvc_ReplicationSpecReadOnly_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReplicationSpecReadOnly'
type ReplicationSpecSvc_ReplicationSpecReadOnly_Call struct {
	*mock.Call
}

// ReplicationSpecReadOnly is a helper method to define mock.On call
//   - replicationId string
func (_e *ReplicationSpecSvc_Expecter) ReplicationSpecReadOnly(replicationId interface{}) *ReplicationSpecSvc_ReplicationSpecReadOnly_Call {
	return &ReplicationSpecSvc_ReplicationSpecReadOnly_Call{Call: _e.mock.On("ReplicationSpecReadOnly", replicationId)}
}

func (_c *ReplicationSpecSvc_ReplicationSpecReadOnly_Call) Run(run func(replicationId string)) *ReplicationSpecSvc_ReplicationSpecReadOnly_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ReplicationSpecSvc_ReplicationSpecReadOnly_Call) Return(_a0 *metadata.ReplicationSpecification, _a1 error) *ReplicationSpecSvc_ReplicationSpecReadOnly_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReplicationSpecSvc_ReplicationSpecReadOnly_Call) RunAndReturn(run func(string) (*metadata.ReplicationSpecification, error)) *ReplicationSpecSvc_ReplicationSpecReadOnly_Call {
	_c.Call.Return(run)
	return _c
}

// ReplicationSpecServiceCallback provides a mock function with given fields: path, value, rev
func (_m *ReplicationSpecSvc) ReplicationSpecServiceCallback(path string, value []byte, rev interface{}) error {
	ret := _m.Called(path, value, rev)

	if len(ret) == 0 {
		panic("no return value specified for ReplicationSpecServiceCallback")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []byte, interface{}) error); ok {
		r0 = rf(path, value, rev)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReplicationSpecSvc_ReplicationSpecServiceCallback_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReplicationSpecServiceCallback'
type ReplicationSpecSvc_ReplicationSpecServiceCallback_Call struct {
	*mock.Call
}

// ReplicationSpecServiceCallback is a helper method to define mock.On call
//   - path string
//   - value []byte
//   - rev interface{}
func (_e *ReplicationSpecSvc_Expecter) ReplicationSpecServiceCallback(path interface{}, value interface{}, rev interface{}) *ReplicationSpecSvc_ReplicationSpecServiceCallback_Call {
	return &ReplicationSpecSvc_ReplicationSpecServiceCallback_Call{Call: _e.mock.On("ReplicationSpecServiceCallback", path, value, rev)}
}

func (_c *ReplicationSpecSvc_ReplicationSpecServiceCallback_Call) Run(run func(path string, value []byte, rev interface{})) *ReplicationSpecSvc_ReplicationSpecServiceCallback_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]byte), args[2].(interface{}))
	})
	return _c
}

func (_c *ReplicationSpecSvc_ReplicationSpecServiceCallback_Call) Return(_a0 error) *ReplicationSpecSvc_ReplicationSpecServiceCallback_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ReplicationSpecSvc_ReplicationSpecServiceCallback_Call) RunAndReturn(run func(string, []byte, interface{}) error) *ReplicationSpecSvc_ReplicationSpecServiceCallback_Call {
	_c.Call.Return(run)
	return _c
}

// SetDerivedObj provides a mock function with given fields: specId, derivedObj
func (_m *ReplicationSpecSvc) SetDerivedObj(specId string, derivedObj interface{}) error {
	ret := _m.Called(specId, derivedObj)

	if len(ret) == 0 {
		panic("no return value specified for SetDerivedObj")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}) error); ok {
		r0 = rf(specId, derivedObj)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReplicationSpecSvc_SetDerivedObj_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetDerivedObj'
type ReplicationSpecSvc_SetDerivedObj_Call struct {
	*mock.Call
}

// SetDerivedObj is a helper method to define mock.On call
//   - specId string
//   - derivedObj interface{}
func (_e *ReplicationSpecSvc_Expecter) SetDerivedObj(specId interface{}, derivedObj interface{}) *ReplicationSpecSvc_SetDerivedObj_Call {
	return &ReplicationSpecSvc_SetDerivedObj_Call{Call: _e.mock.On("SetDerivedObj", specId, derivedObj)}
}

func (_c *ReplicationSpecSvc_SetDerivedObj_Call) Run(run func(specId string, derivedObj interface{})) *ReplicationSpecSvc_SetDerivedObj_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(interface{}))
	})
	return _c
}

func (_c *ReplicationSpecSvc_SetDerivedObj_Call) Return(_a0 error) *ReplicationSpecSvc_SetDerivedObj_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ReplicationSpecSvc_SetDerivedObj_Call) RunAndReturn(run func(string, interface{}) error) *ReplicationSpecSvc_SetDerivedObj_Call {
	_c.Call.Return(run)
	return _c
}

// SetManifestsGetter provides a mock function with given fields: getter
func (_m *ReplicationSpecSvc) SetManifestsGetter(getter service_def.ManifestsGetter) {
	_m.Called(getter)
}

// ReplicationSpecSvc_SetManifestsGetter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetManifestsGetter'
type ReplicationSpecSvc_SetManifestsGetter_Call struct {
	*mock.Call
}

// SetManifestsGetter is a helper method to define mock.On call
//   - getter service_def.ManifestsGetter
func (_e *ReplicationSpecSvc_Expecter) SetManifestsGetter(getter interface{}) *ReplicationSpecSvc_SetManifestsGetter_Call {
	return &ReplicationSpecSvc_SetManifestsGetter_Call{Call: _e.mock.On("SetManifestsGetter", getter)}
}

func (_c *ReplicationSpecSvc_SetManifestsGetter_Call) Run(run func(getter service_def.ManifestsGetter)) *ReplicationSpecSvc_SetManifestsGetter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(service_def.ManifestsGetter))
	})
	return _c
}

func (_c *ReplicationSpecSvc_SetManifestsGetter_Call) Return() *ReplicationSpecSvc_SetManifestsGetter_Call {
	_c.Call.Return()
	return _c
}

func (_c *ReplicationSpecSvc_SetManifestsGetter_Call) RunAndReturn(run func(service_def.ManifestsGetter)) *ReplicationSpecSvc_SetManifestsGetter_Call {
	_c.Call.Return(run)
	return _c
}

// SetMetadataChangeHandlerCallback provides a mock function with given fields: id, callBack, add, del, mod
func (_m *ReplicationSpecSvc) SetMetadataChangeHandlerCallback(id string, callBack base.MetadataChangeHandlerCallbackWithWg, add base.MetadataChangeHandlerPriority, del base.MetadataChangeHandlerPriority, mod base.MetadataChangeHandlerPriority) {
	_m.Called(id, callBack, add, del, mod)
}

// ReplicationSpecSvc_SetMetadataChangeHandlerCallback_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetMetadataChangeHandlerCallback'
type ReplicationSpecSvc_SetMetadataChangeHandlerCallback_Call struct {
	*mock.Call
}

// SetMetadataChangeHandlerCallback is a helper method to define mock.On call
//   - id string
//   - callBack base.MetadataChangeHandlerCallbackWithWg
//   - add base.MetadataChangeHandlerPriority
//   - del base.MetadataChangeHandlerPriority
//   - mod base.MetadataChangeHandlerPriority
func (_e *ReplicationSpecSvc_Expecter) SetMetadataChangeHandlerCallback(id interface{}, callBack interface{}, add interface{}, del interface{}, mod interface{}) *ReplicationSpecSvc_SetMetadataChangeHandlerCallback_Call {
	return &ReplicationSpecSvc_SetMetadataChangeHandlerCallback_Call{Call: _e.mock.On("SetMetadataChangeHandlerCallback", id, callBack, add, del, mod)}
}

func (_c *ReplicationSpecSvc_SetMetadataChangeHandlerCallback_Call) Run(run func(id string, callBack base.MetadataChangeHandlerCallbackWithWg, add base.MetadataChangeHandlerPriority, del base.MetadataChangeHandlerPriority, mod base.MetadataChangeHandlerPriority)) *ReplicationSpecSvc_SetMetadataChangeHandlerCallback_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(base.MetadataChangeHandlerCallbackWithWg), args[2].(base.MetadataChangeHandlerPriority), args[3].(base.MetadataChangeHandlerPriority), args[4].(base.MetadataChangeHandlerPriority))
	})
	return _c
}

func (_c *ReplicationSpecSvc_SetMetadataChangeHandlerCallback_Call) Return() *ReplicationSpecSvc_SetMetadataChangeHandlerCallback_Call {
	_c.Call.Return()
	return _c
}

func (_c *ReplicationSpecSvc_SetMetadataChangeHandlerCallback_Call) RunAndReturn(run func(string, base.MetadataChangeHandlerCallbackWithWg, base.MetadataChangeHandlerPriority, base.MetadataChangeHandlerPriority, base.MetadataChangeHandlerPriority)) *ReplicationSpecSvc_SetMetadataChangeHandlerCallback_Call {
	_c.Call.Return(run)
	return _c
}

// SetReplicationSpec provides a mock function with given fields: spec
func (_m *ReplicationSpecSvc) SetReplicationSpec(spec *metadata.ReplicationSpecification) error {
	ret := _m.Called(spec)

	if len(ret) == 0 {
		panic("no return value specified for SetReplicationSpec")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*metadata.ReplicationSpecification) error); ok {
		r0 = rf(spec)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReplicationSpecSvc_SetReplicationSpec_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetReplicationSpec'
type ReplicationSpecSvc_SetReplicationSpec_Call struct {
	*mock.Call
}

// SetReplicationSpec is a helper method to define mock.On call
//   - spec *metadata.ReplicationSpecification
func (_e *ReplicationSpecSvc_Expecter) SetReplicationSpec(spec interface{}) *ReplicationSpecSvc_SetReplicationSpec_Call {
	return &ReplicationSpecSvc_SetReplicationSpec_Call{Call: _e.mock.On("SetReplicationSpec", spec)}
}

func (_c *ReplicationSpecSvc_SetReplicationSpec_Call) Run(run func(spec *metadata.ReplicationSpecification)) *ReplicationSpecSvc_SetReplicationSpec_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*metadata.ReplicationSpecification))
	})
	return _c
}

func (_c *ReplicationSpecSvc_SetReplicationSpec_Call) Return(_a0 error) *ReplicationSpecSvc_SetReplicationSpec_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ReplicationSpecSvc_SetReplicationSpec_Call) RunAndReturn(run func(*metadata.ReplicationSpecification) error) *ReplicationSpecSvc_SetReplicationSpec_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateAndGC provides a mock function with given fields: spec
func (_m *ReplicationSpecSvc) ValidateAndGC(spec *metadata.ReplicationSpecification) {
	_m.Called(spec)
}

// ReplicationSpecSvc_ValidateAndGC_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateAndGC'
type ReplicationSpecSvc_ValidateAndGC_Call struct {
	*mock.Call
}

// ValidateAndGC is a helper method to define mock.On call
//   - spec *metadata.ReplicationSpecification
func (_e *ReplicationSpecSvc_Expecter) ValidateAndGC(spec interface{}) *ReplicationSpecSvc_ValidateAndGC_Call {
	return &ReplicationSpecSvc_ValidateAndGC_Call{Call: _e.mock.On("ValidateAndGC", spec)}
}

func (_c *ReplicationSpecSvc_ValidateAndGC_Call) Run(run func(spec *metadata.ReplicationSpecification)) *ReplicationSpecSvc_ValidateAndGC_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*metadata.ReplicationSpecification))
	})
	return _c
}

func (_c *ReplicationSpecSvc_ValidateAndGC_Call) Return() *ReplicationSpecSvc_ValidateAndGC_Call {
	_c.Call.Return()
	return _c
}

func (_c *ReplicationSpecSvc_ValidateAndGC_Call) RunAndReturn(run func(*metadata.ReplicationSpecification)) *ReplicationSpecSvc_ValidateAndGC_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateNewReplicationSpec provides a mock function with given fields: sourceBucket, targetCluster, targetBucket, settings, performRemoteValidation
func (_m *ReplicationSpecSvc) ValidateNewReplicationSpec(sourceBucket string, targetCluster string, targetBucket string, settings metadata.ReplicationSettingsMap, performRemoteValidation bool) (string, string, *metadata.RemoteClusterReference, base.ErrorMap, error, service_def.UIWarnings, *metadata.CollectionsManifestPair) {
	ret := _m.Called(sourceBucket, targetCluster, targetBucket, settings, performRemoteValidation)

	if len(ret) == 0 {
		panic("no return value specified for ValidateNewReplicationSpec")
	}

	var r0 string
	var r1 string
	var r2 *metadata.RemoteClusterReference
	var r3 base.ErrorMap
	var r4 error
	var r5 service_def.UIWarnings
	var r6 *metadata.CollectionsManifestPair
	if rf, ok := ret.Get(0).(func(string, string, string, metadata.ReplicationSettingsMap, bool) (string, string, *metadata.RemoteClusterReference, base.ErrorMap, error, service_def.UIWarnings, *metadata.CollectionsManifestPair)); ok {
		return rf(sourceBucket, targetCluster, targetBucket, settings, performRemoteValidation)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, metadata.ReplicationSettingsMap, bool) string); ok {
		r0 = rf(sourceBucket, targetCluster, targetBucket, settings, performRemoteValidation)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string, string, metadata.ReplicationSettingsMap, bool) string); ok {
		r1 = rf(sourceBucket, targetCluster, targetBucket, settings, performRemoteValidation)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(string, string, string, metadata.ReplicationSettingsMap, bool) *metadata.RemoteClusterReference); ok {
		r2 = rf(sourceBucket, targetCluster, targetBucket, settings, performRemoteValidation)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(*metadata.RemoteClusterReference)
		}
	}

	if rf, ok := ret.Get(3).(func(string, string, string, metadata.ReplicationSettingsMap, bool) base.ErrorMap); ok {
		r3 = rf(sourceBucket, targetCluster, targetBucket, settings, performRemoteValidation)
	} else {
		if ret.Get(3) != nil {
			r3 = ret.Get(3).(base.ErrorMap)
		}
	}

	if rf, ok := ret.Get(4).(func(string, string, string, metadata.ReplicationSettingsMap, bool) error); ok {
		r4 = rf(sourceBucket, targetCluster, targetBucket, settings, performRemoteValidation)
	} else {
		r4 = ret.Error(4)
	}

	if rf, ok := ret.Get(5).(func(string, string, string, metadata.ReplicationSettingsMap, bool) service_def.UIWarnings); ok {
		r5 = rf(sourceBucket, targetCluster, targetBucket, settings, performRemoteValidation)
	} else {
		if ret.Get(5) != nil {
			r5 = ret.Get(5).(service_def.UIWarnings)
		}
	}

	if rf, ok := ret.Get(6).(func(string, string, string, metadata.ReplicationSettingsMap, bool) *metadata.CollectionsManifestPair); ok {
		r6 = rf(sourceBucket, targetCluster, targetBucket, settings, performRemoteValidation)
	} else {
		if ret.Get(6) != nil {
			r6 = ret.Get(6).(*metadata.CollectionsManifestPair)
		}
	}

	return r0, r1, r2, r3, r4, r5, r6
}

// ReplicationSpecSvc_ValidateNewReplicationSpec_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateNewReplicationSpec'
type ReplicationSpecSvc_ValidateNewReplicationSpec_Call struct {
	*mock.Call
}

// ValidateNewReplicationSpec is a helper method to define mock.On call
//   - sourceBucket string
//   - targetCluster string
//   - targetBucket string
//   - settings metadata.ReplicationSettingsMap
//   - performRemoteValidation bool
func (_e *ReplicationSpecSvc_Expecter) ValidateNewReplicationSpec(sourceBucket interface{}, targetCluster interface{}, targetBucket interface{}, settings interface{}, performRemoteValidation interface{}) *ReplicationSpecSvc_ValidateNewReplicationSpec_Call {
	return &ReplicationSpecSvc_ValidateNewReplicationSpec_Call{Call: _e.mock.On("ValidateNewReplicationSpec", sourceBucket, targetCluster, targetBucket, settings, performRemoteValidation)}
}

func (_c *ReplicationSpecSvc_ValidateNewReplicationSpec_Call) Run(run func(sourceBucket string, targetCluster string, targetBucket string, settings metadata.ReplicationSettingsMap, performRemoteValidation bool)) *ReplicationSpecSvc_ValidateNewReplicationSpec_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string), args[3].(metadata.ReplicationSettingsMap), args[4].(bool))
	})
	return _c
}

func (_c *ReplicationSpecSvc_ValidateNewReplicationSpec_Call) Return(_a0 string, _a1 string, _a2 *metadata.RemoteClusterReference, _a3 base.ErrorMap, _a4 error, _a5 service_def.UIWarnings, _a6 *metadata.CollectionsManifestPair) *ReplicationSpecSvc_ValidateNewReplicationSpec_Call {
	_c.Call.Return(_a0, _a1, _a2, _a3, _a4, _a5, _a6)
	return _c
}

func (_c *ReplicationSpecSvc_ValidateNewReplicationSpec_Call) RunAndReturn(run func(string, string, string, metadata.ReplicationSettingsMap, bool) (string, string, *metadata.RemoteClusterReference, base.ErrorMap, error, service_def.UIWarnings, *metadata.CollectionsManifestPair)) *ReplicationSpecSvc_ValidateNewReplicationSpec_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateReplicationSettings provides a mock function with given fields: sourceBucket, targetCluster, targetBucket, settings, performRemoteValidation
func (_m *ReplicationSpecSvc) ValidateReplicationSettings(sourceBucket string, targetCluster string, targetBucket string, settings metadata.ReplicationSettingsMap, performRemoteValidation bool) (base.ErrorMap, error, service_def.UIWarnings) {
	ret := _m.Called(sourceBucket, targetCluster, targetBucket, settings, performRemoteValidation)

	if len(ret) == 0 {
		panic("no return value specified for ValidateReplicationSettings")
	}

	var r0 base.ErrorMap
	var r1 error
	var r2 service_def.UIWarnings
	if rf, ok := ret.Get(0).(func(string, string, string, metadata.ReplicationSettingsMap, bool) (base.ErrorMap, error, service_def.UIWarnings)); ok {
		return rf(sourceBucket, targetCluster, targetBucket, settings, performRemoteValidation)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, metadata.ReplicationSettingsMap, bool) base.ErrorMap); ok {
		r0 = rf(sourceBucket, targetCluster, targetBucket, settings, performRemoteValidation)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(base.ErrorMap)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string, metadata.ReplicationSettingsMap, bool) error); ok {
		r1 = rf(sourceBucket, targetCluster, targetBucket, settings, performRemoteValidation)
	} else {
		r1 = ret.Error(1)
	}

	if rf, ok := ret.Get(2).(func(string, string, string, metadata.ReplicationSettingsMap, bool) service_def.UIWarnings); ok {
		r2 = rf(sourceBucket, targetCluster, targetBucket, settings, performRemoteValidation)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(service_def.UIWarnings)
		}
	}

	return r0, r1, r2
}

// ReplicationSpecSvc_ValidateReplicationSettings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateReplicationSettings'
type ReplicationSpecSvc_ValidateReplicationSettings_Call struct {
	*mock.Call
}

// ValidateReplicationSettings is a helper method to define mock.On call
//   - sourceBucket string
//   - targetCluster string
//   - targetBucket string
//   - settings metadata.ReplicationSettingsMap
//   - performRemoteValidation bool
func (_e *ReplicationSpecSvc_Expecter) ValidateReplicationSettings(sourceBucket interface{}, targetCluster interface{}, targetBucket interface{}, settings interface{}, performRemoteValidation interface{}) *ReplicationSpecSvc_ValidateReplicationSettings_Call {
	return &ReplicationSpecSvc_ValidateReplicationSettings_Call{Call: _e.mock.On("ValidateReplicationSettings", sourceBucket, targetCluster, targetBucket, settings, performRemoteValidation)}
}

func (_c *ReplicationSpecSvc_ValidateReplicationSettings_Call) Run(run func(sourceBucket string, targetCluster string, targetBucket string, settings metadata.ReplicationSettingsMap, performRemoteValidation bool)) *ReplicationSpecSvc_ValidateReplicationSettings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string), args[3].(metadata.ReplicationSettingsMap), args[4].(bool))
	})
	return _c
}

func (_c *ReplicationSpecSvc_ValidateReplicationSettings_Call) Return(_a0 base.ErrorMap, _a1 error, _a2 service_def.UIWarnings) *ReplicationSpecSvc_ValidateReplicationSettings_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ReplicationSpecSvc_ValidateReplicationSettings_Call) RunAndReturn(run func(string, string, string, metadata.ReplicationSettingsMap, bool) (base.ErrorMap, error, service_def.UIWarnings)) *ReplicationSpecSvc_ValidateReplicationSettings_Call {
	_c.Call.Return(run)
	return _c
}

// NewReplicationSpecSvc creates a new instance of ReplicationSpecSvc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReplicationSpecSvc(t interface {
	mock.TestingT
	Cleanup(func())
}) *ReplicationSpecSvc {
	mock := &ReplicationSpecSvc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
