// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	metadata "github.com/couchbase/goxdcr/v8/metadata"
	mock "github.com/stretchr/testify/mock"
)

// ReplicationSpecReader is an autogenerated mock type for the ReplicationSpecReader type
type ReplicationSpecReader struct {
	mock.Mock
}

type ReplicationSpecReader_Expecter struct {
	mock *mock.Mock
}

func (_m *ReplicationSpecReader) EXPECT() *ReplicationSpecReader_Expecter {
	return &ReplicationSpecReader_Expecter{mock: &_m.Mock}
}

// AllActiveReplicationSpecsReadOnly provides a mock function with given fields:
func (_m *ReplicationSpecReader) AllActiveReplicationSpecsReadOnly() (map[string]*metadata.ReplicationSpecification, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for AllActiveReplicationSpecsReadOnly")
	}

	var r0 map[string]*metadata.ReplicationSpecification
	var r1 error
	if rf, ok := ret.Get(0).(func() (map[string]*metadata.ReplicationSpecification, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() map[string]*metadata.ReplicationSpecification); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*metadata.ReplicationSpecification)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReplicationSpecReader_AllActiveReplicationSpecsReadOnly_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AllActiveReplicationSpecsReadOnly'
type ReplicationSpecReader_AllActiveReplicationSpecsReadOnly_Call struct {
	*mock.Call
}

// AllActiveReplicationSpecsReadOnly is a helper method to define mock.On call
func (_e *ReplicationSpecReader_Expecter) AllActiveReplicationSpecsReadOnly() *ReplicationSpecReader_AllActiveReplicationSpecsReadOnly_Call {
	return &ReplicationSpecReader_AllActiveReplicationSpecsReadOnly_Call{Call: _e.mock.On("AllActiveReplicationSpecsReadOnly")}
}

func (_c *ReplicationSpecReader_AllActiveReplicationSpecsReadOnly_Call) Run(run func()) *ReplicationSpecReader_AllActiveReplicationSpecsReadOnly_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ReplicationSpecReader_AllActiveReplicationSpecsReadOnly_Call) Return(_a0 map[string]*metadata.ReplicationSpecification, _a1 error) *ReplicationSpecReader_AllActiveReplicationSpecsReadOnly_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReplicationSpecReader_AllActiveReplicationSpecsReadOnly_Call) RunAndReturn(run func() (map[string]*metadata.ReplicationSpecification, error)) *ReplicationSpecReader_AllActiveReplicationSpecsReadOnly_Call {
	_c.Call.Return(run)
	return _c
}

// AllActiveReplicationSpecsWithRemote provides a mock function with given fields: remoteClusterRef
func (_m *ReplicationSpecReader) AllActiveReplicationSpecsWithRemote(remoteClusterRef *metadata.RemoteClusterReference) ([]*metadata.ReplicationSpecification, error) {
	ret := _m.Called(remoteClusterRef)

	if len(ret) == 0 {
		panic("no return value specified for AllActiveReplicationSpecsWithRemote")
	}

	var r0 []*metadata.ReplicationSpecification
	var r1 error
	if rf, ok := ret.Get(0).(func(*metadata.RemoteClusterReference) ([]*metadata.ReplicationSpecification, error)); ok {
		return rf(remoteClusterRef)
	}
	if rf, ok := ret.Get(0).(func(*metadata.RemoteClusterReference) []*metadata.ReplicationSpecification); ok {
		r0 = rf(remoteClusterRef)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*metadata.ReplicationSpecification)
		}
	}

	if rf, ok := ret.Get(1).(func(*metadata.RemoteClusterReference) error); ok {
		r1 = rf(remoteClusterRef)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReplicationSpecReader_AllActiveReplicationSpecsWithRemote_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AllActiveReplicationSpecsWithRemote'
type ReplicationSpecReader_AllActiveReplicationSpecsWithRemote_Call struct {
	*mock.Call
}

// AllActiveReplicationSpecsWithRemote is a helper method to define mock.On call
//   - remoteClusterRef *metadata.RemoteClusterReference
func (_e *ReplicationSpecReader_Expecter) AllActiveReplicationSpecsWithRemote(remoteClusterRef interface{}) *ReplicationSpecReader_AllActiveReplicationSpecsWithRemote_Call {
	return &ReplicationSpecReader_AllActiveReplicationSpecsWithRemote_Call{Call: _e.mock.On("AllActiveReplicationSpecsWithRemote", remoteClusterRef)}
}

func (_c *ReplicationSpecReader_AllActiveReplicationSpecsWithRemote_Call) Run(run func(remoteClusterRef *metadata.RemoteClusterReference)) *ReplicationSpecReader_AllActiveReplicationSpecsWithRemote_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*metadata.RemoteClusterReference))
	})
	return _c
}

func (_c *ReplicationSpecReader_AllActiveReplicationSpecsWithRemote_Call) Return(_a0 []*metadata.ReplicationSpecification, _a1 error) *ReplicationSpecReader_AllActiveReplicationSpecsWithRemote_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReplicationSpecReader_AllActiveReplicationSpecsWithRemote_Call) RunAndReturn(run func(*metadata.RemoteClusterReference) ([]*metadata.ReplicationSpecification, error)) *ReplicationSpecReader_AllActiveReplicationSpecsWithRemote_Call {
	_c.Call.Return(run)
	return _c
}

// AllReplicationSpecIds provides a mock function with given fields:
func (_m *ReplicationSpecReader) AllReplicationSpecIds() ([]string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for AllReplicationSpecIds")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReplicationSpecReader_AllReplicationSpecIds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AllReplicationSpecIds'
type ReplicationSpecReader_AllReplicationSpecIds_Call struct {
	*mock.Call
}

// AllReplicationSpecIds is a helper method to define mock.On call
func (_e *ReplicationSpecReader_Expecter) AllReplicationSpecIds() *ReplicationSpecReader_AllReplicationSpecIds_Call {
	return &ReplicationSpecReader_AllReplicationSpecIds_Call{Call: _e.mock.On("AllReplicationSpecIds")}
}

func (_c *ReplicationSpecReader_AllReplicationSpecIds_Call) Run(run func()) *ReplicationSpecReader_AllReplicationSpecIds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ReplicationSpecReader_AllReplicationSpecIds_Call) Return(_a0 []string, _a1 error) *ReplicationSpecReader_AllReplicationSpecIds_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReplicationSpecReader_AllReplicationSpecIds_Call) RunAndReturn(run func() ([]string, error)) *ReplicationSpecReader_AllReplicationSpecIds_Call {
	_c.Call.Return(run)
	return _c
}

// AllReplicationSpecIdsForBucket provides a mock function with given fields: bucket
func (_m *ReplicationSpecReader) AllReplicationSpecIdsForBucket(bucket string) ([]string, error) {
	ret := _m.Called(bucket)

	if len(ret) == 0 {
		panic("no return value specified for AllReplicationSpecIdsForBucket")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]string, error)); ok {
		return rf(bucket)
	}
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(bucket)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(bucket)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReplicationSpecReader_AllReplicationSpecIdsForBucket_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AllReplicationSpecIdsForBucket'
type ReplicationSpecReader_AllReplicationSpecIdsForBucket_Call struct {
	*mock.Call
}

// AllReplicationSpecIdsForBucket is a helper method to define mock.On call
//   - bucket string
func (_e *ReplicationSpecReader_Expecter) AllReplicationSpecIdsForBucket(bucket interface{}) *ReplicationSpecReader_AllReplicationSpecIdsForBucket_Call {
	return &ReplicationSpecReader_AllReplicationSpecIdsForBucket_Call{Call: _e.mock.On("AllReplicationSpecIdsForBucket", bucket)}
}

func (_c *ReplicationSpecReader_AllReplicationSpecIdsForBucket_Call) Run(run func(bucket string)) *ReplicationSpecReader_AllReplicationSpecIdsForBucket_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ReplicationSpecReader_AllReplicationSpecIdsForBucket_Call) Return(_a0 []string, _a1 error) *ReplicationSpecReader_AllReplicationSpecIdsForBucket_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReplicationSpecReader_AllReplicationSpecIdsForBucket_Call) RunAndReturn(run func(string) ([]string, error)) *ReplicationSpecReader_AllReplicationSpecIdsForBucket_Call {
	_c.Call.Return(run)
	return _c
}

// AllReplicationSpecs provides a mock function with given fields:
func (_m *ReplicationSpecReader) AllReplicationSpecs() (map[string]*metadata.ReplicationSpecification, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for AllReplicationSpecs")
	}

	var r0 map[string]*metadata.ReplicationSpecification
	var r1 error
	if rf, ok := ret.Get(0).(func() (map[string]*metadata.ReplicationSpecification, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() map[string]*metadata.ReplicationSpecification); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*metadata.ReplicationSpecification)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReplicationSpecReader_AllReplicationSpecs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AllReplicationSpecs'
type ReplicationSpecReader_AllReplicationSpecs_Call struct {
	*mock.Call
}

// AllReplicationSpecs is a helper method to define mock.On call
func (_e *ReplicationSpecReader_Expecter) AllReplicationSpecs() *ReplicationSpecReader_AllReplicationSpecs_Call {
	return &ReplicationSpecReader_AllReplicationSpecs_Call{Call: _e.mock.On("AllReplicationSpecs")}
}

func (_c *ReplicationSpecReader_AllReplicationSpecs_Call) Run(run func()) *ReplicationSpecReader_AllReplicationSpecs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ReplicationSpecReader_AllReplicationSpecs_Call) Return(_a0 map[string]*metadata.ReplicationSpecification, _a1 error) *ReplicationSpecReader_AllReplicationSpecs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReplicationSpecReader_AllReplicationSpecs_Call) RunAndReturn(run func() (map[string]*metadata.ReplicationSpecification, error)) *ReplicationSpecReader_AllReplicationSpecs_Call {
	_c.Call.Return(run)
	return _c
}

// AllReplicationSpecsWithRemote provides a mock function with given fields: remoteClusterRef
func (_m *ReplicationSpecReader) AllReplicationSpecsWithRemote(remoteClusterRef *metadata.RemoteClusterReference) ([]*metadata.ReplicationSpecification, error) {
	ret := _m.Called(remoteClusterRef)

	if len(ret) == 0 {
		panic("no return value specified for AllReplicationSpecsWithRemote")
	}

	var r0 []*metadata.ReplicationSpecification
	var r1 error
	if rf, ok := ret.Get(0).(func(*metadata.RemoteClusterReference) ([]*metadata.ReplicationSpecification, error)); ok {
		return rf(remoteClusterRef)
	}
	if rf, ok := ret.Get(0).(func(*metadata.RemoteClusterReference) []*metadata.ReplicationSpecification); ok {
		r0 = rf(remoteClusterRef)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*metadata.ReplicationSpecification)
		}
	}

	if rf, ok := ret.Get(1).(func(*metadata.RemoteClusterReference) error); ok {
		r1 = rf(remoteClusterRef)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReplicationSpecReader_AllReplicationSpecsWithRemote_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AllReplicationSpecsWithRemote'
type ReplicationSpecReader_AllReplicationSpecsWithRemote_Call struct {
	*mock.Call
}

// AllReplicationSpecsWithRemote is a helper method to define mock.On call
//   - remoteClusterRef *metadata.RemoteClusterReference
func (_e *ReplicationSpecReader_Expecter) AllReplicationSpecsWithRemote(remoteClusterRef interface{}) *ReplicationSpecReader_AllReplicationSpecsWithRemote_Call {
	return &ReplicationSpecReader_AllReplicationSpecsWithRemote_Call{Call: _e.mock.On("AllReplicationSpecsWithRemote", remoteClusterRef)}
}

func (_c *ReplicationSpecReader_AllReplicationSpecsWithRemote_Call) Run(run func(remoteClusterRef *metadata.RemoteClusterReference)) *ReplicationSpecReader_AllReplicationSpecsWithRemote_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*metadata.RemoteClusterReference))
	})
	return _c
}

func (_c *ReplicationSpecReader_AllReplicationSpecsWithRemote_Call) Return(_a0 []*metadata.ReplicationSpecification, _a1 error) *ReplicationSpecReader_AllReplicationSpecsWithRemote_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReplicationSpecReader_AllReplicationSpecsWithRemote_Call) RunAndReturn(run func(*metadata.RemoteClusterReference) ([]*metadata.ReplicationSpecification, error)) *ReplicationSpecReader_AllReplicationSpecsWithRemote_Call {
	_c.Call.Return(run)
	return _c
}

// ReplicationSpec provides a mock function with given fields: replicationId
func (_m *ReplicationSpecReader) ReplicationSpec(replicationId string) (*metadata.ReplicationSpecification, error) {
	ret := _m.Called(replicationId)

	if len(ret) == 0 {
		panic("no return value specified for ReplicationSpec")
	}

	var r0 *metadata.ReplicationSpecification
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*metadata.ReplicationSpecification, error)); ok {
		return rf(replicationId)
	}
	if rf, ok := ret.Get(0).(func(string) *metadata.ReplicationSpecification); ok {
		r0 = rf(replicationId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*metadata.ReplicationSpecification)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(replicationId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReplicationSpecReader_ReplicationSpec_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReplicationSpec'
type ReplicationSpecReader_ReplicationSpec_Call struct {
	*mock.Call
}

// ReplicationSpec is a helper method to define mock.On call
//   - replicationId string
func (_e *ReplicationSpecReader_Expecter) ReplicationSpec(replicationId interface{}) *ReplicationSpecReader_ReplicationSpec_Call {
	return &ReplicationSpecReader_ReplicationSpec_Call{Call: _e.mock.On("ReplicationSpec", replicationId)}
}

func (_c *ReplicationSpecReader_ReplicationSpec_Call) Run(run func(replicationId string)) *ReplicationSpecReader_ReplicationSpec_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ReplicationSpecReader_ReplicationSpec_Call) Return(_a0 *metadata.ReplicationSpecification, _a1 error) *ReplicationSpecReader_ReplicationSpec_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReplicationSpecReader_ReplicationSpec_Call) RunAndReturn(run func(string) (*metadata.ReplicationSpecification, error)) *ReplicationSpecReader_ReplicationSpec_Call {
	_c.Call.Return(run)
	return _c
}

// ReplicationSpecReadOnly provides a mock function with given fields: replicationId
func (_m *ReplicationSpecReader) ReplicationSpecReadOnly(replicationId string) (*metadata.ReplicationSpecification, error) {
	ret := _m.Called(replicationId)

	if len(ret) == 0 {
		panic("no return value specified for ReplicationSpecReadOnly")
	}

	var r0 *metadata.ReplicationSpecification
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*metadata.ReplicationSpecification, error)); ok {
		return rf(replicationId)
	}
	if rf, ok := ret.Get(0).(func(string) *metadata.ReplicationSpecification); ok {
		r0 = rf(replicationId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*metadata.ReplicationSpecification)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(replicationId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReplicationSpecReader_ReplicationSpecReadOnly_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReplicationSpecReadOnly'
type ReplicationSpecReader_ReplicationSpecReadOnly_Call struct {
	*mock.Call
}

// ReplicationSpecReadOnly is a helper method to define mock.On call
//   - replicationId string
func (_e *ReplicationSpecReader_Expecter) ReplicationSpecReadOnly(replicationId interface{}) *ReplicationSpecReader_ReplicationSpecReadOnly_Call {
	return &ReplicationSpecReader_ReplicationSpecReadOnly_Call{Call: _e.mock.On("ReplicationSpecReadOnly", replicationId)}
}

func (_c *ReplicationSpecReader_ReplicationSpecReadOnly_Call) Run(run func(replicationId string)) *ReplicationSpecReader_ReplicationSpecReadOnly_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ReplicationSpecReader_ReplicationSpecReadOnly_Call) Return(_a0 *metadata.ReplicationSpecification, _a1 error) *ReplicationSpecReader_ReplicationSpecReadOnly_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReplicationSpecReader_ReplicationSpecReadOnly_Call) RunAndReturn(run func(string) (*metadata.ReplicationSpecification, error)) *ReplicationSpecReader_ReplicationSpecReadOnly_Call {
	_c.Call.Return(run)
	return _c
}

// NewReplicationSpecReader creates a new instance of ReplicationSpecReader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReplicationSpecReader(t interface {
	mock.TestingT
	Cleanup(func())
}) *ReplicationSpecReader {
	mock := &ReplicationSpecReader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
