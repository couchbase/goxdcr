// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	base "github.com/couchbase/goxdcr/base"
	common "github.com/couchbase/goxdcr/common"

	metadata "github.com/couchbase/goxdcr/metadata"

	mock "github.com/stretchr/testify/mock"

	sync "sync"
)

// BackfillMgrIface is an autogenerated mock type for the BackfillMgrIface type
type BackfillMgrIface struct {
	mock.Mock
}

type BackfillMgrIface_Expecter struct {
	mock *mock.Mock
}

func (_m *BackfillMgrIface) EXPECT() *BackfillMgrIface_Expecter {
	return &BackfillMgrIface_Expecter{mock: &_m.Mock}
}

// GetExplicitMappingChangeHandler provides a mock function with given fields: specId, internalSpecId, oldSettings, newSettings
func (_m *BackfillMgrIface) GetExplicitMappingChangeHandler(specId string, internalSpecId string, oldSettings *metadata.ReplicationSettings, newSettings *metadata.ReplicationSettings) (base.StoppedPipelineCallback, base.StoppedPipelineErrCallback) {
	ret := _m.Called(specId, internalSpecId, oldSettings, newSettings)

	if len(ret) == 0 {
		panic("no return value specified for GetExplicitMappingChangeHandler")
	}

	var r0 base.StoppedPipelineCallback
	var r1 base.StoppedPipelineErrCallback
	if rf, ok := ret.Get(0).(func(string, string, *metadata.ReplicationSettings, *metadata.ReplicationSettings) (base.StoppedPipelineCallback, base.StoppedPipelineErrCallback)); ok {
		return rf(specId, internalSpecId, oldSettings, newSettings)
	}
	if rf, ok := ret.Get(0).(func(string, string, *metadata.ReplicationSettings, *metadata.ReplicationSettings) base.StoppedPipelineCallback); ok {
		r0 = rf(specId, internalSpecId, oldSettings, newSettings)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(base.StoppedPipelineCallback)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, *metadata.ReplicationSettings, *metadata.ReplicationSettings) base.StoppedPipelineErrCallback); ok {
		r1 = rf(specId, internalSpecId, oldSettings, newSettings)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(base.StoppedPipelineErrCallback)
		}
	}

	return r0, r1
}

// BackfillMgrIface_GetExplicitMappingChangeHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExplicitMappingChangeHandler'
type BackfillMgrIface_GetExplicitMappingChangeHandler_Call struct {
	*mock.Call
}

// GetExplicitMappingChangeHandler is a helper method to define mock.On call
//   - specId string
//   - internalSpecId string
//   - oldSettings *metadata.ReplicationSettings
//   - newSettings *metadata.ReplicationSettings
func (_e *BackfillMgrIface_Expecter) GetExplicitMappingChangeHandler(specId interface{}, internalSpecId interface{}, oldSettings interface{}, newSettings interface{}) *BackfillMgrIface_GetExplicitMappingChangeHandler_Call {
	return &BackfillMgrIface_GetExplicitMappingChangeHandler_Call{Call: _e.mock.On("GetExplicitMappingChangeHandler", specId, internalSpecId, oldSettings, newSettings)}
}

func (_c *BackfillMgrIface_GetExplicitMappingChangeHandler_Call) Run(run func(specId string, internalSpecId string, oldSettings *metadata.ReplicationSettings, newSettings *metadata.ReplicationSettings)) *BackfillMgrIface_GetExplicitMappingChangeHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(*metadata.ReplicationSettings), args[3].(*metadata.ReplicationSettings))
	})
	return _c
}

func (_c *BackfillMgrIface_GetExplicitMappingChangeHandler_Call) Return(_a0 base.StoppedPipelineCallback, _a1 base.StoppedPipelineErrCallback) *BackfillMgrIface_GetExplicitMappingChangeHandler_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BackfillMgrIface_GetExplicitMappingChangeHandler_Call) RunAndReturn(run func(string, string, *metadata.ReplicationSettings, *metadata.ReplicationSettings) (base.StoppedPipelineCallback, base.StoppedPipelineErrCallback)) *BackfillMgrIface_GetExplicitMappingChangeHandler_Call {
	_c.Call.Return(run)
	return _c
}

// GetLastSuccessfulSourceManifestId provides a mock function with given fields: specId
func (_m *BackfillMgrIface) GetLastSuccessfulSourceManifestId(specId string) (uint64, error) {
	ret := _m.Called(specId)

	if len(ret) == 0 {
		panic("no return value specified for GetLastSuccessfulSourceManifestId")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (uint64, error)); ok {
		return rf(specId)
	}
	if rf, ok := ret.Get(0).(func(string) uint64); ok {
		r0 = rf(specId)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(specId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BackfillMgrIface_GetLastSuccessfulSourceManifestId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLastSuccessfulSourceManifestId'
type BackfillMgrIface_GetLastSuccessfulSourceManifestId_Call struct {
	*mock.Call
}

// GetLastSuccessfulSourceManifestId is a helper method to define mock.On call
//   - specId string
func (_e *BackfillMgrIface_Expecter) GetLastSuccessfulSourceManifestId(specId interface{}) *BackfillMgrIface_GetLastSuccessfulSourceManifestId_Call {
	return &BackfillMgrIface_GetLastSuccessfulSourceManifestId_Call{Call: _e.mock.On("GetLastSuccessfulSourceManifestId", specId)}
}

func (_c *BackfillMgrIface_GetLastSuccessfulSourceManifestId_Call) Run(run func(specId string)) *BackfillMgrIface_GetLastSuccessfulSourceManifestId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *BackfillMgrIface_GetLastSuccessfulSourceManifestId_Call) Return(_a0 uint64, _a1 error) *BackfillMgrIface_GetLastSuccessfulSourceManifestId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BackfillMgrIface_GetLastSuccessfulSourceManifestId_Call) RunAndReturn(run func(string) (uint64, error)) *BackfillMgrIface_GetLastSuccessfulSourceManifestId_Call {
	_c.Call.Return(run)
	return _c
}

// GetPipelineSvc provides a mock function with given fields:
func (_m *BackfillMgrIface) GetPipelineSvc() common.PipelineService {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPipelineSvc")
	}

	var r0 common.PipelineService
	if rf, ok := ret.Get(0).(func() common.PipelineService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.PipelineService)
		}
	}

	return r0
}

// BackfillMgrIface_GetPipelineSvc_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPipelineSvc'
type BackfillMgrIface_GetPipelineSvc_Call struct {
	*mock.Call
}

// GetPipelineSvc is a helper method to define mock.On call
func (_e *BackfillMgrIface_Expecter) GetPipelineSvc() *BackfillMgrIface_GetPipelineSvc_Call {
	return &BackfillMgrIface_GetPipelineSvc_Call{Call: _e.mock.On("GetPipelineSvc")}
}

func (_c *BackfillMgrIface_GetPipelineSvc_Call) Run(run func()) *BackfillMgrIface_GetPipelineSvc_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BackfillMgrIface_GetPipelineSvc_Call) Return(_a0 common.PipelineService) *BackfillMgrIface_GetPipelineSvc_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BackfillMgrIface_GetPipelineSvc_Call) RunAndReturn(run func() common.PipelineService) *BackfillMgrIface_GetPipelineSvc_Call {
	_c.Call.Return(run)
	return _c
}

// GetRouterMappingChangeHandler provides a mock function with given fields: specId, internalSpecId, diff
func (_m *BackfillMgrIface) GetRouterMappingChangeHandler(specId string, internalSpecId string, diff metadata.CollectionNamespaceMappingsDiffPair) (base.StoppedPipelineCallback, base.StoppedPipelineErrCallback) {
	ret := _m.Called(specId, internalSpecId, diff)

	if len(ret) == 0 {
		panic("no return value specified for GetRouterMappingChangeHandler")
	}

	var r0 base.StoppedPipelineCallback
	var r1 base.StoppedPipelineErrCallback
	if rf, ok := ret.Get(0).(func(string, string, metadata.CollectionNamespaceMappingsDiffPair) (base.StoppedPipelineCallback, base.StoppedPipelineErrCallback)); ok {
		return rf(specId, internalSpecId, diff)
	}
	if rf, ok := ret.Get(0).(func(string, string, metadata.CollectionNamespaceMappingsDiffPair) base.StoppedPipelineCallback); ok {
		r0 = rf(specId, internalSpecId, diff)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(base.StoppedPipelineCallback)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, metadata.CollectionNamespaceMappingsDiffPair) base.StoppedPipelineErrCallback); ok {
		r1 = rf(specId, internalSpecId, diff)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(base.StoppedPipelineErrCallback)
		}
	}

	return r0, r1
}

// BackfillMgrIface_GetRouterMappingChangeHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRouterMappingChangeHandler'
type BackfillMgrIface_GetRouterMappingChangeHandler_Call struct {
	*mock.Call
}

// GetRouterMappingChangeHandler is a helper method to define mock.On call
//   - specId string
//   - internalSpecId string
//   - diff metadata.CollectionNamespaceMappingsDiffPair
func (_e *BackfillMgrIface_Expecter) GetRouterMappingChangeHandler(specId interface{}, internalSpecId interface{}, diff interface{}) *BackfillMgrIface_GetRouterMappingChangeHandler_Call {
	return &BackfillMgrIface_GetRouterMappingChangeHandler_Call{Call: _e.mock.On("GetRouterMappingChangeHandler", specId, internalSpecId, diff)}
}

func (_c *BackfillMgrIface_GetRouterMappingChangeHandler_Call) Run(run func(specId string, internalSpecId string, diff metadata.CollectionNamespaceMappingsDiffPair)) *BackfillMgrIface_GetRouterMappingChangeHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(metadata.CollectionNamespaceMappingsDiffPair))
	})
	return _c
}

func (_c *BackfillMgrIface_GetRouterMappingChangeHandler_Call) Return(_a0 base.StoppedPipelineCallback, _a1 base.StoppedPipelineErrCallback) *BackfillMgrIface_GetRouterMappingChangeHandler_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BackfillMgrIface_GetRouterMappingChangeHandler_Call) RunAndReturn(run func(string, string, metadata.CollectionNamespaceMappingsDiffPair) (base.StoppedPipelineCallback, base.StoppedPipelineErrCallback)) *BackfillMgrIface_GetRouterMappingChangeHandler_Call {
	_c.Call.Return(run)
	return _c
}

// ReplicationSpecChangeCallback provides a mock function with given fields: id, oldVal, newVal, wg
func (_m *BackfillMgrIface) ReplicationSpecChangeCallback(id string, oldVal interface{}, newVal interface{}, wg *sync.WaitGroup) error {
	ret := _m.Called(id, oldVal, newVal, wg)

	if len(ret) == 0 {
		panic("no return value specified for ReplicationSpecChangeCallback")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}, interface{}, *sync.WaitGroup) error); ok {
		r0 = rf(id, oldVal, newVal, wg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BackfillMgrIface_ReplicationSpecChangeCallback_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReplicationSpecChangeCallback'
type BackfillMgrIface_ReplicationSpecChangeCallback_Call struct {
	*mock.Call
}

// ReplicationSpecChangeCallback is a helper method to define mock.On call
//   - id string
//   - oldVal interface{}
//   - newVal interface{}
//   - wg *sync.WaitGroup
func (_e *BackfillMgrIface_Expecter) ReplicationSpecChangeCallback(id interface{}, oldVal interface{}, newVal interface{}, wg interface{}) *BackfillMgrIface_ReplicationSpecChangeCallback_Call {
	return &BackfillMgrIface_ReplicationSpecChangeCallback_Call{Call: _e.mock.On("ReplicationSpecChangeCallback", id, oldVal, newVal, wg)}
}

func (_c *BackfillMgrIface_ReplicationSpecChangeCallback_Call) Run(run func(id string, oldVal interface{}, newVal interface{}, wg *sync.WaitGroup)) *BackfillMgrIface_ReplicationSpecChangeCallback_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(interface{}), args[2].(interface{}), args[3].(*sync.WaitGroup))
	})
	return _c
}

func (_c *BackfillMgrIface_ReplicationSpecChangeCallback_Call) Return(_a0 error) *BackfillMgrIface_ReplicationSpecChangeCallback_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BackfillMgrIface_ReplicationSpecChangeCallback_Call) RunAndReturn(run func(string, interface{}, interface{}, *sync.WaitGroup) error) *BackfillMgrIface_ReplicationSpecChangeCallback_Call {
	_c.Call.Return(run)
	return _c
}

// SetLastSuccessfulSourceManifestId provides a mock function with given fields: specId, manifestId, dcpRollbackScenario, finCh
func (_m *BackfillMgrIface) SetLastSuccessfulSourceManifestId(specId string, manifestId uint64, dcpRollbackScenario bool, finCh chan bool) error {
	ret := _m.Called(specId, manifestId, dcpRollbackScenario, finCh)

	if len(ret) == 0 {
		panic("no return value specified for SetLastSuccessfulSourceManifestId")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, uint64, bool, chan bool) error); ok {
		r0 = rf(specId, manifestId, dcpRollbackScenario, finCh)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BackfillMgrIface_SetLastSuccessfulSourceManifestId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetLastSuccessfulSourceManifestId'
type BackfillMgrIface_SetLastSuccessfulSourceManifestId_Call struct {
	*mock.Call
}

// SetLastSuccessfulSourceManifestId is a helper method to define mock.On call
//   - specId string
//   - manifestId uint64
//   - dcpRollbackScenario bool
//   - finCh chan bool
func (_e *BackfillMgrIface_Expecter) SetLastSuccessfulSourceManifestId(specId interface{}, manifestId interface{}, dcpRollbackScenario interface{}, finCh interface{}) *BackfillMgrIface_SetLastSuccessfulSourceManifestId_Call {
	return &BackfillMgrIface_SetLastSuccessfulSourceManifestId_Call{Call: _e.mock.On("SetLastSuccessfulSourceManifestId", specId, manifestId, dcpRollbackScenario, finCh)}
}

func (_c *BackfillMgrIface_SetLastSuccessfulSourceManifestId_Call) Run(run func(specId string, manifestId uint64, dcpRollbackScenario bool, finCh chan bool)) *BackfillMgrIface_SetLastSuccessfulSourceManifestId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(uint64), args[2].(bool), args[3].(chan bool))
	})
	return _c
}

func (_c *BackfillMgrIface_SetLastSuccessfulSourceManifestId_Call) Return(_a0 error) *BackfillMgrIface_SetLastSuccessfulSourceManifestId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BackfillMgrIface_SetLastSuccessfulSourceManifestId_Call) RunAndReturn(run func(string, uint64, bool, chan bool) error) *BackfillMgrIface_SetLastSuccessfulSourceManifestId_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with given fields:
func (_m *BackfillMgrIface) Start() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BackfillMgrIface_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type BackfillMgrIface_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
func (_e *BackfillMgrIface_Expecter) Start() *BackfillMgrIface_Start_Call {
	return &BackfillMgrIface_Start_Call{Call: _e.mock.On("Start")}
}

func (_c *BackfillMgrIface_Start_Call) Run(run func()) *BackfillMgrIface_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BackfillMgrIface_Start_Call) Return(_a0 error) *BackfillMgrIface_Start_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BackfillMgrIface_Start_Call) RunAndReturn(run func() error) *BackfillMgrIface_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function with given fields:
func (_m *BackfillMgrIface) Stop() {
	_m.Called()
}

// BackfillMgrIface_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type BackfillMgrIface_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *BackfillMgrIface_Expecter) Stop() *BackfillMgrIface_Stop_Call {
	return &BackfillMgrIface_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *BackfillMgrIface_Stop_Call) Run(run func()) *BackfillMgrIface_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BackfillMgrIface_Stop_Call) Return() *BackfillMgrIface_Stop_Call {
	_c.Call.Return()
	return _c
}

func (_c *BackfillMgrIface_Stop_Call) RunAndReturn(run func()) *BackfillMgrIface_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// NewBackfillMgrIface creates a new instance of BackfillMgrIface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBackfillMgrIface(t interface {
	mock.TestingT
	Cleanup(func())
}) *BackfillMgrIface {
	mock := &BackfillMgrIface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
