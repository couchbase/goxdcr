// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	base "github.com/couchbase/goxdcr/base"
	mock "github.com/stretchr/testify/mock"
)

// ConflictManagerIface is an autogenerated mock type for the ConflictManagerIface type
type ConflictManagerIface struct {
	mock.Mock
}

// ResolveConflict provides a mock function with given fields: source, target, sourceId, targetId, recycler
func (_m *ConflictManagerIface) ResolveConflict(source *base.WrappedMCRequest, target *base.SubdocLookupResponse, sourceId []byte, targetId []byte, recycler func(*base.WrappedMCRequest)) error {
	ret := _m.Called(source, target, sourceId, targetId, recycler)

	var r0 error
	if rf, ok := ret.Get(0).(func(*base.WrappedMCRequest, *base.SubdocLookupResponse, []byte, []byte, func(*base.WrappedMCRequest)) error); ok {
		r0 = rf(source, target, sourceId, targetId, recycler)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetBackToSource provides a mock function with given fields: source, target, sourceId, targetId, recycler
func (_m *ConflictManagerIface) SetBackToSource(source *base.WrappedMCRequest, target *base.SubdocLookupResponse, sourceId []byte, targetId []byte, recycler func(*base.WrappedMCRequest)) error {
	ret := _m.Called(source, target, sourceId, targetId, recycler)

	var r0 error
	if rf, ok := ret.Get(0).(func(*base.WrappedMCRequest, *base.SubdocLookupResponse, []byte, []byte, func(*base.WrappedMCRequest)) error); ok {
		r0 = rf(source, target, sourceId, targetId, recycler)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewConflictManagerIface interface {
	mock.TestingT
	Cleanup(func())
}

// NewConflictManagerIface creates a new instance of ConflictManagerIface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewConflictManagerIface(t mockConstructorTestingTNewConflictManagerIface) *ConflictManagerIface {
	mock := &ConflictManagerIface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
