// Code generated by mockery. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// EncryptionSettingIface is an autogenerated mock type for the EncryptionSettingIface type
type EncryptionSettingIface struct {
	mock.Mock
}

type EncryptionSettingIface_Expecter struct {
	mock *mock.Mock
}

func (_m *EncryptionSettingIface) EXPECT() *EncryptionSettingIface_Expecter {
	return &EncryptionSettingIface_Expecter{mock: &_m.Mock}
}

// IsStrictEncryption provides a mock function with given fields:
func (_m *EncryptionSettingIface) IsStrictEncryption() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsStrictEncryption")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// EncryptionSettingIface_IsStrictEncryption_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsStrictEncryption'
type EncryptionSettingIface_IsStrictEncryption_Call struct {
	*mock.Call
}

// IsStrictEncryption is a helper method to define mock.On call
func (_e *EncryptionSettingIface_Expecter) IsStrictEncryption() *EncryptionSettingIface_IsStrictEncryption_Call {
	return &EncryptionSettingIface_IsStrictEncryption_Call{Call: _e.mock.On("IsStrictEncryption")}
}

func (_c *EncryptionSettingIface_IsStrictEncryption_Call) Run(run func()) *EncryptionSettingIface_IsStrictEncryption_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EncryptionSettingIface_IsStrictEncryption_Call) Return(_a0 bool) *EncryptionSettingIface_IsStrictEncryption_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EncryptionSettingIface_IsStrictEncryption_Call) RunAndReturn(run func() bool) *EncryptionSettingIface_IsStrictEncryption_Call {
	_c.Call.Return(run)
	return _c
}

// NewEncryptionSettingIface creates a new instance of EncryptionSettingIface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEncryptionSettingIface(t interface {
	mock.TestingT
	Cleanup(func())
}) *EncryptionSettingIface {
	mock := &EncryptionSettingIface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
