package mocks

import base "github.com/couchbase/goxdcr/base"
import metadata "github.com/couchbase/goxdcr/metadata"
import mock "github.com/stretchr/testify/mock"

// CollectionsManifestSvc is an autogenerated mock type for the CollectionsManifestSvc type
type CollectionsManifestSvc struct {
	mock.Mock
}

// CollectionManifestGetter provides a mock function with given fields: bucketName
func (_m *CollectionsManifestSvc) CollectionManifestGetter(bucketName string) (*metadata.CollectionsManifest, error) {
	ret := _m.Called(bucketName)

	var r0 *metadata.CollectionsManifest
	if rf, ok := ret.Get(0).(func(string) *metadata.CollectionsManifest); ok {
		r0 = rf(bucketName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*metadata.CollectionsManifest)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(bucketName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetManifests provides a mock function with given fields: spec
func (_m *CollectionsManifestSvc) GetLatestManifests(spec *metadata.ReplicationSpecification) (*metadata.CollectionsManifest, *metadata.CollectionsManifest, error) {
	ret := _m.Called(spec)

	var r0 *metadata.CollectionsManifest
	if rf, ok := ret.Get(0).(func(*metadata.ReplicationSpecification) *metadata.CollectionsManifest); ok {
		r0 = rf(spec)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*metadata.CollectionsManifest)
		}
	}

	var r1 *metadata.CollectionsManifest
	if rf, ok := ret.Get(1).(func(*metadata.ReplicationSpecification) *metadata.CollectionsManifest); ok {
		r1 = rf(spec)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*metadata.CollectionsManifest)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(*metadata.ReplicationSpecification) error); ok {
		r2 = rf(spec)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// PersistNeededManifests provides a mock function with given fields: spec
func (_m *CollectionsManifestSvc) PersistNeededManifests(spec *metadata.ReplicationSpecification) error {
	ret := _m.Called(spec)

	var r0 error
	if rf, ok := ret.Get(0).(func(*metadata.ReplicationSpecification) error); ok {
		r0 = rf(spec)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReplicationSpecChangeCallback provides a mock function with given fields: id, oldVal, newVal
func (_m *CollectionsManifestSvc) ReplicationSpecChangeCallback(id string, oldVal interface{}, newVal interface{}) error {
	ret := _m.Called(id, oldVal, newVal)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}, interface{}) error); ok {
		r0 = rf(id, oldVal, newVal)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetMetadataChangeHandlerCallback provides a mock function with given fields: callBack
func (_m *CollectionsManifestSvc) SetMetadataChangeHandlerCallback(callBack base.MetadataChangeHandlerCallback) {
	_m.Called(callBack)
}
