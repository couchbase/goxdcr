// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	base "github.com/couchbase/goxdcr/base"
	mock "github.com/stretchr/testify/mock"
)

// ResolverSvcIface is an autogenerated mock type for the ResolverSvcIface type
type ResolverSvcIface struct {
	mock.Mock
}

// CheckMergeFunction provides a mock function with given fields: fname
func (_m *ResolverSvcIface) CheckMergeFunction(fname string) error {
	ret := _m.Called(fname)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(fname)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InitDefaultFunc provides a mock function with given fields:
func (_m *ResolverSvcIface) InitDefaultFunc() {
	_m.Called()
}

// ResolveAsync provides a mock function with given fields: params, finish_ch
func (_m *ResolverSvcIface) ResolveAsync(params *base.ConflictParams, finish_ch chan bool) {
	_m.Called(params, finish_ch)
}

// Start provides a mock function with given fields: sourceKVHost, xdcrRestPort
func (_m *ResolverSvcIface) Start(sourceKVHost string, xdcrRestPort uint16) {
	_m.Called(sourceKVHost, xdcrRestPort)
}

// Started provides a mock function with given fields:
func (_m *ResolverSvcIface) Started() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

type mockConstructorTestingTNewResolverSvcIface interface {
	mock.TestingT
	Cleanup(func())
}

// NewResolverSvcIface creates a new instance of ResolverSvcIface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewResolverSvcIface(t mockConstructorTestingTNewResolverSvcIface) *ResolverSvcIface {
	mock := &ResolverSvcIface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
