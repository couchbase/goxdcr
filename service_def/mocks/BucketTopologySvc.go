// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	metadata "github.com/couchbase/goxdcr/metadata"
	mock "github.com/stretchr/testify/mock"

	service_def "github.com/couchbase/goxdcr/service_def"

	sync "sync"

	time "time"
)

// BucketTopologySvc is an autogenerated mock type for the BucketTopologySvc type
type BucketTopologySvc struct {
	mock.Mock
}

// RegisterGarbageCollect provides a mock function with given fields: specId, srcBucketName, vbno, requestId, gcFunc, timeToFire
func (_m *BucketTopologySvc) RegisterGarbageCollect(specId string, srcBucketName string, vbno uint16, requestId string, gcFunc func() error, timeToFire time.Duration) error {
	ret := _m.Called(specId, srcBucketName, vbno, requestId, gcFunc, timeToFire)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, uint16, string, func() error, time.Duration) error); ok {
		r0 = rf(specId, srcBucketName, vbno, requestId, gcFunc, timeToFire)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReplicationSpecChangeCallback provides a mock function with given fields: id, oldVal, newVal, wg
func (_m *BucketTopologySvc) ReplicationSpecChangeCallback(id string, oldVal interface{}, newVal interface{}, wg *sync.WaitGroup) error {
	ret := _m.Called(id, oldVal, newVal, wg)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}, interface{}, *sync.WaitGroup) error); ok {
		r0 = rf(id, oldVal, newVal, wg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SubscribeToLocalBucketDcpStatsFeed provides a mock function with given fields: spec, subscriberId
func (_m *BucketTopologySvc) SubscribeToLocalBucketDcpStatsFeed(spec *metadata.ReplicationSpecification, subscriberId string) (chan service_def.SourceNotification, error) {
	ret := _m.Called(spec, subscriberId)

	var r0 chan service_def.SourceNotification
	var r1 error
	if rf, ok := ret.Get(0).(func(*metadata.ReplicationSpecification, string) (chan service_def.SourceNotification, error)); ok {
		return rf(spec, subscriberId)
	}
	if rf, ok := ret.Get(0).(func(*metadata.ReplicationSpecification, string) chan service_def.SourceNotification); ok {
		r0 = rf(spec, subscriberId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan service_def.SourceNotification)
		}
	}

	if rf, ok := ret.Get(1).(func(*metadata.ReplicationSpecification, string) error); ok {
		r1 = rf(spec, subscriberId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubscribeToLocalBucketDcpStatsLegacyFeed provides a mock function with given fields: spec, subscriberId
func (_m *BucketTopologySvc) SubscribeToLocalBucketDcpStatsLegacyFeed(spec *metadata.ReplicationSpecification, subscriberId string) (chan service_def.SourceNotification, error) {
	ret := _m.Called(spec, subscriberId)

	var r0 chan service_def.SourceNotification
	var r1 error
	if rf, ok := ret.Get(0).(func(*metadata.ReplicationSpecification, string) (chan service_def.SourceNotification, error)); ok {
		return rf(spec, subscriberId)
	}
	if rf, ok := ret.Get(0).(func(*metadata.ReplicationSpecification, string) chan service_def.SourceNotification); ok {
		r0 = rf(spec, subscriberId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan service_def.SourceNotification)
		}
	}

	if rf, ok := ret.Get(1).(func(*metadata.ReplicationSpecification, string) error); ok {
		r1 = rf(spec, subscriberId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubscribeToLocalBucketFeed provides a mock function with given fields: spec, subscriberId
func (_m *BucketTopologySvc) SubscribeToLocalBucketFeed(spec *metadata.ReplicationSpecification, subscriberId string) (chan service_def.SourceNotification, error) {
	ret := _m.Called(spec, subscriberId)

	var r0 chan service_def.SourceNotification
	var r1 error
	if rf, ok := ret.Get(0).(func(*metadata.ReplicationSpecification, string) (chan service_def.SourceNotification, error)); ok {
		return rf(spec, subscriberId)
	}
	if rf, ok := ret.Get(0).(func(*metadata.ReplicationSpecification, string) chan service_def.SourceNotification); ok {
		r0 = rf(spec, subscriberId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan service_def.SourceNotification)
		}
	}

	if rf, ok := ret.Get(1).(func(*metadata.ReplicationSpecification, string) error); ok {
		r1 = rf(spec, subscriberId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubscribeToLocalBucketHighSeqnosFeed provides a mock function with given fields: spec, subscriberId, requestedInterval
func (_m *BucketTopologySvc) SubscribeToLocalBucketHighSeqnosFeed(spec *metadata.ReplicationSpecification, subscriberId string, requestedInterval time.Duration) (chan service_def.SourceNotification, func(time.Duration), error) {
	ret := _m.Called(spec, subscriberId, requestedInterval)

	var r0 chan service_def.SourceNotification
	var r1 func(time.Duration)
	var r2 error
	if rf, ok := ret.Get(0).(func(*metadata.ReplicationSpecification, string, time.Duration) (chan service_def.SourceNotification, func(time.Duration), error)); ok {
		return rf(spec, subscriberId, requestedInterval)
	}
	if rf, ok := ret.Get(0).(func(*metadata.ReplicationSpecification, string, time.Duration) chan service_def.SourceNotification); ok {
		r0 = rf(spec, subscriberId, requestedInterval)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan service_def.SourceNotification)
		}
	}

	if rf, ok := ret.Get(1).(func(*metadata.ReplicationSpecification, string, time.Duration) func(time.Duration)); ok {
		r1 = rf(spec, subscriberId, requestedInterval)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(func(time.Duration))
		}
	}

	if rf, ok := ret.Get(2).(func(*metadata.ReplicationSpecification, string, time.Duration) error); ok {
		r2 = rf(spec, subscriberId, requestedInterval)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SubscribeToLocalBucketHighSeqnosLegacyFeed provides a mock function with given fields: spec, subscriberId, requestedInterval
func (_m *BucketTopologySvc) SubscribeToLocalBucketHighSeqnosLegacyFeed(spec *metadata.ReplicationSpecification, subscriberId string, requestedInterval time.Duration) (chan service_def.SourceNotification, func(time.Duration), error) {
	ret := _m.Called(spec, subscriberId, requestedInterval)

	var r0 chan service_def.SourceNotification
	var r1 func(time.Duration)
	var r2 error
	if rf, ok := ret.Get(0).(func(*metadata.ReplicationSpecification, string, time.Duration) (chan service_def.SourceNotification, func(time.Duration), error)); ok {
		return rf(spec, subscriberId, requestedInterval)
	}
	if rf, ok := ret.Get(0).(func(*metadata.ReplicationSpecification, string, time.Duration) chan service_def.SourceNotification); ok {
		r0 = rf(spec, subscriberId, requestedInterval)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan service_def.SourceNotification)
		}
	}

	if rf, ok := ret.Get(1).(func(*metadata.ReplicationSpecification, string, time.Duration) func(time.Duration)); ok {
		r1 = rf(spec, subscriberId, requestedInterval)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(func(time.Duration))
		}
	}

	if rf, ok := ret.Get(2).(func(*metadata.ReplicationSpecification, string, time.Duration) error); ok {
		r2 = rf(spec, subscriberId, requestedInterval)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SubscribeToRemoteBucketFeed provides a mock function with given fields: spec, subscriberId
func (_m *BucketTopologySvc) SubscribeToRemoteBucketFeed(spec *metadata.ReplicationSpecification, subscriberId string) (chan service_def.TargetNotification, error) {
	ret := _m.Called(spec, subscriberId)

	var r0 chan service_def.TargetNotification
	var r1 error
	if rf, ok := ret.Get(0).(func(*metadata.ReplicationSpecification, string) (chan service_def.TargetNotification, error)); ok {
		return rf(spec, subscriberId)
	}
	if rf, ok := ret.Get(0).(func(*metadata.ReplicationSpecification, string) chan service_def.TargetNotification); ok {
		r0 = rf(spec, subscriberId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan service_def.TargetNotification)
		}
	}

	if rf, ok := ret.Get(1).(func(*metadata.ReplicationSpecification, string) error); ok {
		r1 = rf(spec, subscriberId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UnSubscribeLocalBucketFeed provides a mock function with given fields: spec, subscriberId
func (_m *BucketTopologySvc) UnSubscribeLocalBucketFeed(spec *metadata.ReplicationSpecification, subscriberId string) error {
	ret := _m.Called(spec, subscriberId)

	var r0 error
	if rf, ok := ret.Get(0).(func(*metadata.ReplicationSpecification, string) error); ok {
		r0 = rf(spec, subscriberId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UnSubscribeRemoteBucketFeed provides a mock function with given fields: spec, subscriberId
func (_m *BucketTopologySvc) UnSubscribeRemoteBucketFeed(spec *metadata.ReplicationSpecification, subscriberId string) error {
	ret := _m.Called(spec, subscriberId)

	var r0 error
	if rf, ok := ret.Get(0).(func(*metadata.ReplicationSpecification, string) error); ok {
		r0 = rf(spec, subscriberId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UnSubscribeToLocalBucketDcpStatsFeed provides a mock function with given fields: spec, subscriberId
func (_m *BucketTopologySvc) UnSubscribeToLocalBucketDcpStatsFeed(spec *metadata.ReplicationSpecification, subscriberId string) error {
	ret := _m.Called(spec, subscriberId)

	var r0 error
	if rf, ok := ret.Get(0).(func(*metadata.ReplicationSpecification, string) error); ok {
		r0 = rf(spec, subscriberId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UnSubscribeToLocalBucketDcpStatsLegacyFeed provides a mock function with given fields: spec, subscriberId
func (_m *BucketTopologySvc) UnSubscribeToLocalBucketDcpStatsLegacyFeed(spec *metadata.ReplicationSpecification, subscriberId string) error {
	ret := _m.Called(spec, subscriberId)

	var r0 error
	if rf, ok := ret.Get(0).(func(*metadata.ReplicationSpecification, string) error); ok {
		r0 = rf(spec, subscriberId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UnSubscribeToLocalBucketHighSeqnosFeed provides a mock function with given fields: spec, subscriberId
func (_m *BucketTopologySvc) UnSubscribeToLocalBucketHighSeqnosFeed(spec *metadata.ReplicationSpecification, subscriberId string) error {
	ret := _m.Called(spec, subscriberId)

	var r0 error
	if rf, ok := ret.Get(0).(func(*metadata.ReplicationSpecification, string) error); ok {
		r0 = rf(spec, subscriberId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UnSubscribeToLocalBucketHighSeqnosLegacyFeed provides a mock function with given fields: spec, subscriberId
func (_m *BucketTopologySvc) UnSubscribeToLocalBucketHighSeqnosLegacyFeed(spec *metadata.ReplicationSpecification, subscriberId string) error {
	ret := _m.Called(spec, subscriberId)

	var r0 error
	if rf, ok := ret.Get(0).(func(*metadata.ReplicationSpecification, string) error); ok {
		r0 = rf(spec, subscriberId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewBucketTopologySvc interface {
	mock.TestingT
	Cleanup(func())
}

// NewBucketTopologySvc creates a new instance of BucketTopologySvc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBucketTopologySvc(t mockConstructorTestingTNewBucketTopologySvc) *BucketTopologySvc {
	mock := &BucketTopologySvc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
