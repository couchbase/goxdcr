// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	base "github.com/couchbase/goxdcr/base"
	metadata "github.com/couchbase/goxdcr/metadata"

	mock "github.com/stretchr/testify/mock"
)

// ManifestsSender is an autogenerated mock type for the ManifestsSender type
type ManifestsSender struct {
	mock.Mock
}

type ManifestsSender_Expecter struct {
	mock *mock.Mock
}

func (_m *ManifestsSender) EXPECT() *ManifestsSender_Expecter {
	return &ManifestsSender_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: spec, manifests
func (_m *ManifestsSender) Execute(spec *metadata.ReplicationSpecification, manifests *metadata.CollectionsManifestPair) base.ErrorMap {
	ret := _m.Called(spec, manifests)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 base.ErrorMap
	if rf, ok := ret.Get(0).(func(*metadata.ReplicationSpecification, *metadata.CollectionsManifestPair) base.ErrorMap); ok {
		r0 = rf(spec, manifests)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(base.ErrorMap)
		}
	}

	return r0
}

// ManifestsSender_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type ManifestsSender_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - spec *metadata.ReplicationSpecification
//   - manifests *metadata.CollectionsManifestPair
func (_e *ManifestsSender_Expecter) Execute(spec interface{}, manifests interface{}) *ManifestsSender_Execute_Call {
	return &ManifestsSender_Execute_Call{Call: _e.mock.On("Execute", spec, manifests)}
}

func (_c *ManifestsSender_Execute_Call) Run(run func(spec *metadata.ReplicationSpecification, manifests *metadata.CollectionsManifestPair)) *ManifestsSender_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*metadata.ReplicationSpecification), args[1].(*metadata.CollectionsManifestPair))
	})
	return _c
}

func (_c *ManifestsSender_Execute_Call) Return(_a0 base.ErrorMap) *ManifestsSender_Execute_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ManifestsSender_Execute_Call) RunAndReturn(run func(*metadata.ReplicationSpecification, *metadata.CollectionsManifestPair) base.ErrorMap) *ManifestsSender_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewManifestsSender creates a new instance of ManifestsSender. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewManifestsSender(t interface {
	mock.TestingT
	Cleanup(func())
}) *ManifestsSender {
	mock := &ManifestsSender{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
