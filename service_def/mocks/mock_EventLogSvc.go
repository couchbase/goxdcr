// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	service_def "github.com/couchbase/goxdcr/v8/service_def"
	mock "github.com/stretchr/testify/mock"
)

// EventLogSvc is an autogenerated mock type for the EventLogSvc type
type EventLogSvc struct {
	mock.Mock
}

type EventLogSvc_Expecter struct {
	mock *mock.Mock
}

func (_m *EventLogSvc) EXPECT() *EventLogSvc_Expecter {
	return &EventLogSvc_Expecter{mock: &_m.Mock}
}

// WriteEvent provides a mock function with given fields: eventId, args
func (_m *EventLogSvc) WriteEvent(eventId service_def.EventIdType, args map[string]string) {
	_m.Called(eventId, args)
}

// EventLogSvc_WriteEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteEvent'
type EventLogSvc_WriteEvent_Call struct {
	*mock.Call
}

// WriteEvent is a helper method to define mock.On call
//   - eventId service_def.EventIdType
//   - args map[string]string
func (_e *EventLogSvc_Expecter) WriteEvent(eventId interface{}, args interface{}) *EventLogSvc_WriteEvent_Call {
	return &EventLogSvc_WriteEvent_Call{Call: _e.mock.On("WriteEvent", eventId, args)}
}

func (_c *EventLogSvc_WriteEvent_Call) Run(run func(eventId service_def.EventIdType, args map[string]string)) *EventLogSvc_WriteEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(service_def.EventIdType), args[1].(map[string]string))
	})
	return _c
}

func (_c *EventLogSvc_WriteEvent_Call) Return() *EventLogSvc_WriteEvent_Call {
	_c.Call.Return()
	return _c
}

func (_c *EventLogSvc_WriteEvent_Call) RunAndReturn(run func(service_def.EventIdType, map[string]string)) *EventLogSvc_WriteEvent_Call {
	_c.Call.Return(run)
	return _c
}

// NewEventLogSvc creates a new instance of EventLogSvc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEventLogSvc(t interface {
	mock.TestingT
	Cleanup(func())
}) *EventLogSvc {
	mock := &EventLogSvc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
