// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	base "github.com/couchbase/goxdcr/base"
	log "github.com/couchbase/goxdcr/log"

	metadata "github.com/couchbase/goxdcr/metadata"

	mock "github.com/stretchr/testify/mock"

	service_def "github.com/couchbase/goxdcr/service_def"
)

// RemoteClusterSvc is an autogenerated mock type for the RemoteClusterSvc type
type RemoteClusterSvc struct {
	mock.Mock
}

type RemoteClusterSvc_Expecter struct {
	mock *mock.Mock
}

func (_m *RemoteClusterSvc) EXPECT() *RemoteClusterSvc_Expecter {
	return &RemoteClusterSvc_Expecter{mock: &_m.Mock}
}

// AddRemoteCluster provides a mock function with given fields: ref, skipConnectivityValidation
func (_m *RemoteClusterSvc) AddRemoteCluster(ref *metadata.RemoteClusterReference, skipConnectivityValidation bool) error {
	ret := _m.Called(ref, skipConnectivityValidation)

	if len(ret) == 0 {
		panic("no return value specified for AddRemoteCluster")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*metadata.RemoteClusterReference, bool) error); ok {
		r0 = rf(ref, skipConnectivityValidation)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoteClusterSvc_AddRemoteCluster_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddRemoteCluster'
type RemoteClusterSvc_AddRemoteCluster_Call struct {
	*mock.Call
}

// AddRemoteCluster is a helper method to define mock.On call
//   - ref *metadata.RemoteClusterReference
//   - skipConnectivityValidation bool
func (_e *RemoteClusterSvc_Expecter) AddRemoteCluster(ref interface{}, skipConnectivityValidation interface{}) *RemoteClusterSvc_AddRemoteCluster_Call {
	return &RemoteClusterSvc_AddRemoteCluster_Call{Call: _e.mock.On("AddRemoteCluster", ref, skipConnectivityValidation)}
}

func (_c *RemoteClusterSvc_AddRemoteCluster_Call) Run(run func(ref *metadata.RemoteClusterReference, skipConnectivityValidation bool)) *RemoteClusterSvc_AddRemoteCluster_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*metadata.RemoteClusterReference), args[1].(bool))
	})
	return _c
}

func (_c *RemoteClusterSvc_AddRemoteCluster_Call) Return(_a0 error) *RemoteClusterSvc_AddRemoteCluster_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RemoteClusterSvc_AddRemoteCluster_Call) RunAndReturn(run func(*metadata.RemoteClusterReference, bool) error) *RemoteClusterSvc_AddRemoteCluster_Call {
	_c.Call.Return(run)
	return _c
}

// CheckAndUnwrapRemoteClusterError provides a mock function with given fields: err
func (_m *RemoteClusterSvc) CheckAndUnwrapRemoteClusterError(err error) (bool, error) {
	ret := _m.Called(err)

	if len(ret) == 0 {
		panic("no return value specified for CheckAndUnwrapRemoteClusterError")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(error) (bool, error)); ok {
		return rf(err)
	}
	if rf, ok := ret.Get(0).(func(error) bool); ok {
		r0 = rf(err)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(error) error); ok {
		r1 = rf(err)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoteClusterSvc_CheckAndUnwrapRemoteClusterError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckAndUnwrapRemoteClusterError'
type RemoteClusterSvc_CheckAndUnwrapRemoteClusterError_Call struct {
	*mock.Call
}

// CheckAndUnwrapRemoteClusterError is a helper method to define mock.On call
//   - err error
func (_e *RemoteClusterSvc_Expecter) CheckAndUnwrapRemoteClusterError(err interface{}) *RemoteClusterSvc_CheckAndUnwrapRemoteClusterError_Call {
	return &RemoteClusterSvc_CheckAndUnwrapRemoteClusterError_Call{Call: _e.mock.On("CheckAndUnwrapRemoteClusterError", err)}
}

func (_c *RemoteClusterSvc_CheckAndUnwrapRemoteClusterError_Call) Run(run func(err error)) *RemoteClusterSvc_CheckAndUnwrapRemoteClusterError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(error))
	})
	return _c
}

func (_c *RemoteClusterSvc_CheckAndUnwrapRemoteClusterError_Call) Return(_a0 bool, _a1 error) *RemoteClusterSvc_CheckAndUnwrapRemoteClusterError_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RemoteClusterSvc_CheckAndUnwrapRemoteClusterError_Call) RunAndReturn(run func(error) (bool, error)) *RemoteClusterSvc_CheckAndUnwrapRemoteClusterError_Call {
	_c.Call.Return(run)
	return _c
}

// DelRemoteCluster provides a mock function with given fields: refName
func (_m *RemoteClusterSvc) DelRemoteCluster(refName string) (*metadata.RemoteClusterReference, error) {
	ret := _m.Called(refName)

	if len(ret) == 0 {
		panic("no return value specified for DelRemoteCluster")
	}

	var r0 *metadata.RemoteClusterReference
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*metadata.RemoteClusterReference, error)); ok {
		return rf(refName)
	}
	if rf, ok := ret.Get(0).(func(string) *metadata.RemoteClusterReference); ok {
		r0 = rf(refName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*metadata.RemoteClusterReference)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(refName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoteClusterSvc_DelRemoteCluster_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DelRemoteCluster'
type RemoteClusterSvc_DelRemoteCluster_Call struct {
	*mock.Call
}

// DelRemoteCluster is a helper method to define mock.On call
//   - refName string
func (_e *RemoteClusterSvc_Expecter) DelRemoteCluster(refName interface{}) *RemoteClusterSvc_DelRemoteCluster_Call {
	return &RemoteClusterSvc_DelRemoteCluster_Call{Call: _e.mock.On("DelRemoteCluster", refName)}
}

func (_c *RemoteClusterSvc_DelRemoteCluster_Call) Run(run func(refName string)) *RemoteClusterSvc_DelRemoteCluster_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *RemoteClusterSvc_DelRemoteCluster_Call) Return(_a0 *metadata.RemoteClusterReference, _a1 error) *RemoteClusterSvc_DelRemoteCluster_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RemoteClusterSvc_DelRemoteCluster_Call) RunAndReturn(run func(string) (*metadata.RemoteClusterReference, error)) *RemoteClusterSvc_DelRemoteCluster_Call {
	_c.Call.Return(run)
	return _c
}

// GetBucketInfoGetter provides a mock function with given fields: ref, bucketName
func (_m *RemoteClusterSvc) GetBucketInfoGetter(ref *metadata.RemoteClusterReference, bucketName string) (service_def.BucketInfoGetter, error) {
	ret := _m.Called(ref, bucketName)

	if len(ret) == 0 {
		panic("no return value specified for GetBucketInfoGetter")
	}

	var r0 service_def.BucketInfoGetter
	var r1 error
	if rf, ok := ret.Get(0).(func(*metadata.RemoteClusterReference, string) (service_def.BucketInfoGetter, error)); ok {
		return rf(ref, bucketName)
	}
	if rf, ok := ret.Get(0).(func(*metadata.RemoteClusterReference, string) service_def.BucketInfoGetter); ok {
		r0 = rf(ref, bucketName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(service_def.BucketInfoGetter)
		}
	}

	if rf, ok := ret.Get(1).(func(*metadata.RemoteClusterReference, string) error); ok {
		r1 = rf(ref, bucketName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoteClusterSvc_GetBucketInfoGetter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBucketInfoGetter'
type RemoteClusterSvc_GetBucketInfoGetter_Call struct {
	*mock.Call
}

// GetBucketInfoGetter is a helper method to define mock.On call
//   - ref *metadata.RemoteClusterReference
//   - bucketName string
func (_e *RemoteClusterSvc_Expecter) GetBucketInfoGetter(ref interface{}, bucketName interface{}) *RemoteClusterSvc_GetBucketInfoGetter_Call {
	return &RemoteClusterSvc_GetBucketInfoGetter_Call{Call: _e.mock.On("GetBucketInfoGetter", ref, bucketName)}
}

func (_c *RemoteClusterSvc_GetBucketInfoGetter_Call) Run(run func(ref *metadata.RemoteClusterReference, bucketName string)) *RemoteClusterSvc_GetBucketInfoGetter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*metadata.RemoteClusterReference), args[1].(string))
	})
	return _c
}

func (_c *RemoteClusterSvc_GetBucketInfoGetter_Call) Return(_a0 service_def.BucketInfoGetter, _a1 error) *RemoteClusterSvc_GetBucketInfoGetter_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RemoteClusterSvc_GetBucketInfoGetter_Call) RunAndReturn(run func(*metadata.RemoteClusterReference, string) (service_def.BucketInfoGetter, error)) *RemoteClusterSvc_GetBucketInfoGetter_Call {
	_c.Call.Return(run)
	return _c
}

// GetCapability provides a mock function with given fields: ref
func (_m *RemoteClusterSvc) GetCapability(ref *metadata.RemoteClusterReference) (metadata.Capability, error) {
	ret := _m.Called(ref)

	if len(ret) == 0 {
		panic("no return value specified for GetCapability")
	}

	var r0 metadata.Capability
	var r1 error
	if rf, ok := ret.Get(0).(func(*metadata.RemoteClusterReference) (metadata.Capability, error)); ok {
		return rf(ref)
	}
	if rf, ok := ret.Get(0).(func(*metadata.RemoteClusterReference) metadata.Capability); ok {
		r0 = rf(ref)
	} else {
		r0 = ret.Get(0).(metadata.Capability)
	}

	if rf, ok := ret.Get(1).(func(*metadata.RemoteClusterReference) error); ok {
		r1 = rf(ref)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoteClusterSvc_GetCapability_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCapability'
type RemoteClusterSvc_GetCapability_Call struct {
	*mock.Call
}

// GetCapability is a helper method to define mock.On call
//   - ref *metadata.RemoteClusterReference
func (_e *RemoteClusterSvc_Expecter) GetCapability(ref interface{}) *RemoteClusterSvc_GetCapability_Call {
	return &RemoteClusterSvc_GetCapability_Call{Call: _e.mock.On("GetCapability", ref)}
}

func (_c *RemoteClusterSvc_GetCapability_Call) Run(run func(ref *metadata.RemoteClusterReference)) *RemoteClusterSvc_GetCapability_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*metadata.RemoteClusterReference))
	})
	return _c
}

func (_c *RemoteClusterSvc_GetCapability_Call) Return(_a0 metadata.Capability, _a1 error) *RemoteClusterSvc_GetCapability_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RemoteClusterSvc_GetCapability_Call) RunAndReturn(run func(*metadata.RemoteClusterReference) (metadata.Capability, error)) *RemoteClusterSvc_GetCapability_Call {
	_c.Call.Return(run)
	return _c
}

// GetConnectionStringForRemoteCluster provides a mock function with given fields: ref, isCapiReplication
func (_m *RemoteClusterSvc) GetConnectionStringForRemoteCluster(ref *metadata.RemoteClusterReference, isCapiReplication bool) (string, error) {
	ret := _m.Called(ref, isCapiReplication)

	if len(ret) == 0 {
		panic("no return value specified for GetConnectionStringForRemoteCluster")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(*metadata.RemoteClusterReference, bool) (string, error)); ok {
		return rf(ref, isCapiReplication)
	}
	if rf, ok := ret.Get(0).(func(*metadata.RemoteClusterReference, bool) string); ok {
		r0 = rf(ref, isCapiReplication)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*metadata.RemoteClusterReference, bool) error); ok {
		r1 = rf(ref, isCapiReplication)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoteClusterSvc_GetConnectionStringForRemoteCluster_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConnectionStringForRemoteCluster'
type RemoteClusterSvc_GetConnectionStringForRemoteCluster_Call struct {
	*mock.Call
}

// GetConnectionStringForRemoteCluster is a helper method to define mock.On call
//   - ref *metadata.RemoteClusterReference
//   - isCapiReplication bool
func (_e *RemoteClusterSvc_Expecter) GetConnectionStringForRemoteCluster(ref interface{}, isCapiReplication interface{}) *RemoteClusterSvc_GetConnectionStringForRemoteCluster_Call {
	return &RemoteClusterSvc_GetConnectionStringForRemoteCluster_Call{Call: _e.mock.On("GetConnectionStringForRemoteCluster", ref, isCapiReplication)}
}

func (_c *RemoteClusterSvc_GetConnectionStringForRemoteCluster_Call) Run(run func(ref *metadata.RemoteClusterReference, isCapiReplication bool)) *RemoteClusterSvc_GetConnectionStringForRemoteCluster_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*metadata.RemoteClusterReference), args[1].(bool))
	})
	return _c
}

func (_c *RemoteClusterSvc_GetConnectionStringForRemoteCluster_Call) Return(_a0 string, _a1 error) *RemoteClusterSvc_GetConnectionStringForRemoteCluster_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RemoteClusterSvc_GetConnectionStringForRemoteCluster_Call) RunAndReturn(run func(*metadata.RemoteClusterReference, bool) (string, error)) *RemoteClusterSvc_GetConnectionStringForRemoteCluster_Call {
	_c.Call.Return(run)
	return _c
}

// GetConnectivityStatus provides a mock function with given fields: ref
func (_m *RemoteClusterSvc) GetConnectivityStatus(ref *metadata.RemoteClusterReference) (metadata.ConnectivityStatus, error) {
	ret := _m.Called(ref)

	if len(ret) == 0 {
		panic("no return value specified for GetConnectivityStatus")
	}

	var r0 metadata.ConnectivityStatus
	var r1 error
	if rf, ok := ret.Get(0).(func(*metadata.RemoteClusterReference) (metadata.ConnectivityStatus, error)); ok {
		return rf(ref)
	}
	if rf, ok := ret.Get(0).(func(*metadata.RemoteClusterReference) metadata.ConnectivityStatus); ok {
		r0 = rf(ref)
	} else {
		r0 = ret.Get(0).(metadata.ConnectivityStatus)
	}

	if rf, ok := ret.Get(1).(func(*metadata.RemoteClusterReference) error); ok {
		r1 = rf(ref)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoteClusterSvc_GetConnectivityStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConnectivityStatus'
type RemoteClusterSvc_GetConnectivityStatus_Call struct {
	*mock.Call
}

// GetConnectivityStatus is a helper method to define mock.On call
//   - ref *metadata.RemoteClusterReference
func (_e *RemoteClusterSvc_Expecter) GetConnectivityStatus(ref interface{}) *RemoteClusterSvc_GetConnectivityStatus_Call {
	return &RemoteClusterSvc_GetConnectivityStatus_Call{Call: _e.mock.On("GetConnectivityStatus", ref)}
}

func (_c *RemoteClusterSvc_GetConnectivityStatus_Call) Run(run func(ref *metadata.RemoteClusterReference)) *RemoteClusterSvc_GetConnectivityStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*metadata.RemoteClusterReference))
	})
	return _c
}

func (_c *RemoteClusterSvc_GetConnectivityStatus_Call) Return(_a0 metadata.ConnectivityStatus, _a1 error) *RemoteClusterSvc_GetConnectivityStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RemoteClusterSvc_GetConnectivityStatus_Call) RunAndReturn(run func(*metadata.RemoteClusterReference) (metadata.ConnectivityStatus, error)) *RemoteClusterSvc_GetConnectivityStatus_Call {
	_c.Call.Return(run)
	return _c
}

// GetManifestByUuid provides a mock function with given fields: uuid, bucketName, forceRefresh, restAPIQuery
func (_m *RemoteClusterSvc) GetManifestByUuid(uuid string, bucketName string, forceRefresh bool, restAPIQuery bool) (*metadata.CollectionsManifest, error) {
	ret := _m.Called(uuid, bucketName, forceRefresh, restAPIQuery)

	if len(ret) == 0 {
		panic("no return value specified for GetManifestByUuid")
	}

	var r0 *metadata.CollectionsManifest
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, bool, bool) (*metadata.CollectionsManifest, error)); ok {
		return rf(uuid, bucketName, forceRefresh, restAPIQuery)
	}
	if rf, ok := ret.Get(0).(func(string, string, bool, bool) *metadata.CollectionsManifest); ok {
		r0 = rf(uuid, bucketName, forceRefresh, restAPIQuery)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*metadata.CollectionsManifest)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, bool, bool) error); ok {
		r1 = rf(uuid, bucketName, forceRefresh, restAPIQuery)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoteClusterSvc_GetManifestByUuid_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetManifestByUuid'
type RemoteClusterSvc_GetManifestByUuid_Call struct {
	*mock.Call
}

// GetManifestByUuid is a helper method to define mock.On call
//   - uuid string
//   - bucketName string
//   - forceRefresh bool
//   - restAPIQuery bool
func (_e *RemoteClusterSvc_Expecter) GetManifestByUuid(uuid interface{}, bucketName interface{}, forceRefresh interface{}, restAPIQuery interface{}) *RemoteClusterSvc_GetManifestByUuid_Call {
	return &RemoteClusterSvc_GetManifestByUuid_Call{Call: _e.mock.On("GetManifestByUuid", uuid, bucketName, forceRefresh, restAPIQuery)}
}

func (_c *RemoteClusterSvc_GetManifestByUuid_Call) Run(run func(uuid string, bucketName string, forceRefresh bool, restAPIQuery bool)) *RemoteClusterSvc_GetManifestByUuid_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(bool), args[3].(bool))
	})
	return _c
}

func (_c *RemoteClusterSvc_GetManifestByUuid_Call) Return(manifest *metadata.CollectionsManifest, err error) *RemoteClusterSvc_GetManifestByUuid_Call {
	_c.Call.Return(manifest, err)
	return _c
}

func (_c *RemoteClusterSvc_GetManifestByUuid_Call) RunAndReturn(run func(string, string, bool, bool) (*metadata.CollectionsManifest, error)) *RemoteClusterSvc_GetManifestByUuid_Call {
	_c.Call.Return(run)
	return _c
}

// GetMaxVBStatsGetter provides a mock function with given fields: ref, bucketName
func (_m *RemoteClusterSvc) GetMaxVBStatsGetter(ref *metadata.RemoteClusterReference, bucketName string) (service_def.MaxVBCasStatsGetter, error) {
	ret := _m.Called(ref, bucketName)

	if len(ret) == 0 {
		panic("no return value specified for GetMaxVBStatsGetter")
	}

	var r0 service_def.MaxVBCasStatsGetter
	var r1 error
	if rf, ok := ret.Get(0).(func(*metadata.RemoteClusterReference, string) (service_def.MaxVBCasStatsGetter, error)); ok {
		return rf(ref, bucketName)
	}
	if rf, ok := ret.Get(0).(func(*metadata.RemoteClusterReference, string) service_def.MaxVBCasStatsGetter); ok {
		r0 = rf(ref, bucketName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(service_def.MaxVBCasStatsGetter)
		}
	}

	if rf, ok := ret.Get(1).(func(*metadata.RemoteClusterReference, string) error); ok {
		r1 = rf(ref, bucketName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoteClusterSvc_GetMaxVBStatsGetter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMaxVBStatsGetter'
type RemoteClusterSvc_GetMaxVBStatsGetter_Call struct {
	*mock.Call
}

// GetMaxVBStatsGetter is a helper method to define mock.On call
//   - ref *metadata.RemoteClusterReference
//   - bucketName string
func (_e *RemoteClusterSvc_Expecter) GetMaxVBStatsGetter(ref interface{}, bucketName interface{}) *RemoteClusterSvc_GetMaxVBStatsGetter_Call {
	return &RemoteClusterSvc_GetMaxVBStatsGetter_Call{Call: _e.mock.On("GetMaxVBStatsGetter", ref, bucketName)}
}

func (_c *RemoteClusterSvc_GetMaxVBStatsGetter_Call) Run(run func(ref *metadata.RemoteClusterReference, bucketName string)) *RemoteClusterSvc_GetMaxVBStatsGetter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*metadata.RemoteClusterReference), args[1].(string))
	})
	return _c
}

func (_c *RemoteClusterSvc_GetMaxVBStatsGetter_Call) Return(_a0 service_def.MaxVBCasStatsGetter, _a1 error) *RemoteClusterSvc_GetMaxVBStatsGetter_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RemoteClusterSvc_GetMaxVBStatsGetter_Call) RunAndReturn(run func(*metadata.RemoteClusterReference, string) (service_def.MaxVBCasStatsGetter, error)) *RemoteClusterSvc_GetMaxVBStatsGetter_Call {
	_c.Call.Return(run)
	return _c
}

// GetRefListForFirstTimeBadAuths provides a mock function with given fields:
func (_m *RemoteClusterSvc) GetRefListForFirstTimeBadAuths() ([]*metadata.RemoteClusterReference, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetRefListForFirstTimeBadAuths")
	}

	var r0 []*metadata.RemoteClusterReference
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*metadata.RemoteClusterReference, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*metadata.RemoteClusterReference); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*metadata.RemoteClusterReference)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoteClusterSvc_GetRefListForFirstTimeBadAuths_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRefListForFirstTimeBadAuths'
type RemoteClusterSvc_GetRefListForFirstTimeBadAuths_Call struct {
	*mock.Call
}

// GetRefListForFirstTimeBadAuths is a helper method to define mock.On call
func (_e *RemoteClusterSvc_Expecter) GetRefListForFirstTimeBadAuths() *RemoteClusterSvc_GetRefListForFirstTimeBadAuths_Call {
	return &RemoteClusterSvc_GetRefListForFirstTimeBadAuths_Call{Call: _e.mock.On("GetRefListForFirstTimeBadAuths")}
}

func (_c *RemoteClusterSvc_GetRefListForFirstTimeBadAuths_Call) Run(run func()) *RemoteClusterSvc_GetRefListForFirstTimeBadAuths_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RemoteClusterSvc_GetRefListForFirstTimeBadAuths_Call) Return(_a0 []*metadata.RemoteClusterReference, _a1 error) *RemoteClusterSvc_GetRefListForFirstTimeBadAuths_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RemoteClusterSvc_GetRefListForFirstTimeBadAuths_Call) RunAndReturn(run func() ([]*metadata.RemoteClusterReference, error)) *RemoteClusterSvc_GetRefListForFirstTimeBadAuths_Call {
	_c.Call.Return(run)
	return _c
}

// GetRefListForRestartAndClearState provides a mock function with given fields:
func (_m *RemoteClusterSvc) GetRefListForRestartAndClearState() ([]*metadata.RemoteClusterReference, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetRefListForRestartAndClearState")
	}

	var r0 []*metadata.RemoteClusterReference
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*metadata.RemoteClusterReference, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*metadata.RemoteClusterReference); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*metadata.RemoteClusterReference)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoteClusterSvc_GetRefListForRestartAndClearState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRefListForRestartAndClearState'
type RemoteClusterSvc_GetRefListForRestartAndClearState_Call struct {
	*mock.Call
}

// GetRefListForRestartAndClearState is a helper method to define mock.On call
func (_e *RemoteClusterSvc_Expecter) GetRefListForRestartAndClearState() *RemoteClusterSvc_GetRefListForRestartAndClearState_Call {
	return &RemoteClusterSvc_GetRefListForRestartAndClearState_Call{Call: _e.mock.On("GetRefListForRestartAndClearState")}
}

func (_c *RemoteClusterSvc_GetRefListForRestartAndClearState_Call) Run(run func()) *RemoteClusterSvc_GetRefListForRestartAndClearState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RemoteClusterSvc_GetRefListForRestartAndClearState_Call) Return(_a0 []*metadata.RemoteClusterReference, _a1 error) *RemoteClusterSvc_GetRefListForRestartAndClearState_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RemoteClusterSvc_GetRefListForRestartAndClearState_Call) RunAndReturn(run func() ([]*metadata.RemoteClusterReference, error)) *RemoteClusterSvc_GetRefListForRestartAndClearState_Call {
	_c.Call.Return(run)
	return _c
}

// GetRemoteClusterNameFromClusterUuid provides a mock function with given fields: uuid
func (_m *RemoteClusterSvc) GetRemoteClusterNameFromClusterUuid(uuid string) string {
	ret := _m.Called(uuid)

	if len(ret) == 0 {
		panic("no return value specified for GetRemoteClusterNameFromClusterUuid")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(uuid)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// RemoteClusterSvc_GetRemoteClusterNameFromClusterUuid_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRemoteClusterNameFromClusterUuid'
type RemoteClusterSvc_GetRemoteClusterNameFromClusterUuid_Call struct {
	*mock.Call
}

// GetRemoteClusterNameFromClusterUuid is a helper method to define mock.On call
//   - uuid string
func (_e *RemoteClusterSvc_Expecter) GetRemoteClusterNameFromClusterUuid(uuid interface{}) *RemoteClusterSvc_GetRemoteClusterNameFromClusterUuid_Call {
	return &RemoteClusterSvc_GetRemoteClusterNameFromClusterUuid_Call{Call: _e.mock.On("GetRemoteClusterNameFromClusterUuid", uuid)}
}

func (_c *RemoteClusterSvc_GetRemoteClusterNameFromClusterUuid_Call) Run(run func(uuid string)) *RemoteClusterSvc_GetRemoteClusterNameFromClusterUuid_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *RemoteClusterSvc_GetRemoteClusterNameFromClusterUuid_Call) Return(_a0 string) *RemoteClusterSvc_GetRemoteClusterNameFromClusterUuid_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RemoteClusterSvc_GetRemoteClusterNameFromClusterUuid_Call) RunAndReturn(run func(string) string) *RemoteClusterSvc_GetRemoteClusterNameFromClusterUuid_Call {
	_c.Call.Return(run)
	return _c
}

// InitRemoteClusterReference provides a mock function with given fields: logger, ref
func (_m *RemoteClusterSvc) InitRemoteClusterReference(logger *log.CommonLogger, ref *metadata.RemoteClusterReference) error {
	ret := _m.Called(logger, ref)

	if len(ret) == 0 {
		panic("no return value specified for InitRemoteClusterReference")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*log.CommonLogger, *metadata.RemoteClusterReference) error); ok {
		r0 = rf(logger, ref)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoteClusterSvc_InitRemoteClusterReference_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InitRemoteClusterReference'
type RemoteClusterSvc_InitRemoteClusterReference_Call struct {
	*mock.Call
}

// InitRemoteClusterReference is a helper method to define mock.On call
//   - logger *log.CommonLogger
//   - ref *metadata.RemoteClusterReference
func (_e *RemoteClusterSvc_Expecter) InitRemoteClusterReference(logger interface{}, ref interface{}) *RemoteClusterSvc_InitRemoteClusterReference_Call {
	return &RemoteClusterSvc_InitRemoteClusterReference_Call{Call: _e.mock.On("InitRemoteClusterReference", logger, ref)}
}

func (_c *RemoteClusterSvc_InitRemoteClusterReference_Call) Run(run func(logger *log.CommonLogger, ref *metadata.RemoteClusterReference)) *RemoteClusterSvc_InitRemoteClusterReference_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*log.CommonLogger), args[1].(*metadata.RemoteClusterReference))
	})
	return _c
}

func (_c *RemoteClusterSvc_InitRemoteClusterReference_Call) Return(_a0 error) *RemoteClusterSvc_InitRemoteClusterReference_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RemoteClusterSvc_InitRemoteClusterReference_Call) RunAndReturn(run func(*log.CommonLogger, *metadata.RemoteClusterReference) error) *RemoteClusterSvc_InitRemoteClusterReference_Call {
	_c.Call.Return(run)
	return _c
}

// RemoteClusterByRefId provides a mock function with given fields: refId, refresh
func (_m *RemoteClusterSvc) RemoteClusterByRefId(refId string, refresh bool) (*metadata.RemoteClusterReference, error) {
	ret := _m.Called(refId, refresh)

	if len(ret) == 0 {
		panic("no return value specified for RemoteClusterByRefId")
	}

	var r0 *metadata.RemoteClusterReference
	var r1 error
	if rf, ok := ret.Get(0).(func(string, bool) (*metadata.RemoteClusterReference, error)); ok {
		return rf(refId, refresh)
	}
	if rf, ok := ret.Get(0).(func(string, bool) *metadata.RemoteClusterReference); ok {
		r0 = rf(refId, refresh)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*metadata.RemoteClusterReference)
		}
	}

	if rf, ok := ret.Get(1).(func(string, bool) error); ok {
		r1 = rf(refId, refresh)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoteClusterSvc_RemoteClusterByRefId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoteClusterByRefId'
type RemoteClusterSvc_RemoteClusterByRefId_Call struct {
	*mock.Call
}

// RemoteClusterByRefId is a helper method to define mock.On call
//   - refId string
//   - refresh bool
func (_e *RemoteClusterSvc_Expecter) RemoteClusterByRefId(refId interface{}, refresh interface{}) *RemoteClusterSvc_RemoteClusterByRefId_Call {
	return &RemoteClusterSvc_RemoteClusterByRefId_Call{Call: _e.mock.On("RemoteClusterByRefId", refId, refresh)}
}

func (_c *RemoteClusterSvc_RemoteClusterByRefId_Call) Run(run func(refId string, refresh bool)) *RemoteClusterSvc_RemoteClusterByRefId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(bool))
	})
	return _c
}

func (_c *RemoteClusterSvc_RemoteClusterByRefId_Call) Return(_a0 *metadata.RemoteClusterReference, _a1 error) *RemoteClusterSvc_RemoteClusterByRefId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RemoteClusterSvc_RemoteClusterByRefId_Call) RunAndReturn(run func(string, bool) (*metadata.RemoteClusterReference, error)) *RemoteClusterSvc_RemoteClusterByRefId_Call {
	_c.Call.Return(run)
	return _c
}

// RemoteClusterByRefName provides a mock function with given fields: refName, refresh
func (_m *RemoteClusterSvc) RemoteClusterByRefName(refName string, refresh bool) (*metadata.RemoteClusterReference, error) {
	ret := _m.Called(refName, refresh)

	if len(ret) == 0 {
		panic("no return value specified for RemoteClusterByRefName")
	}

	var r0 *metadata.RemoteClusterReference
	var r1 error
	if rf, ok := ret.Get(0).(func(string, bool) (*metadata.RemoteClusterReference, error)); ok {
		return rf(refName, refresh)
	}
	if rf, ok := ret.Get(0).(func(string, bool) *metadata.RemoteClusterReference); ok {
		r0 = rf(refName, refresh)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*metadata.RemoteClusterReference)
		}
	}

	if rf, ok := ret.Get(1).(func(string, bool) error); ok {
		r1 = rf(refName, refresh)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoteClusterSvc_RemoteClusterByRefName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoteClusterByRefName'
type RemoteClusterSvc_RemoteClusterByRefName_Call struct {
	*mock.Call
}

// RemoteClusterByRefName is a helper method to define mock.On call
//   - refName string
//   - refresh bool
func (_e *RemoteClusterSvc_Expecter) RemoteClusterByRefName(refName interface{}, refresh interface{}) *RemoteClusterSvc_RemoteClusterByRefName_Call {
	return &RemoteClusterSvc_RemoteClusterByRefName_Call{Call: _e.mock.On("RemoteClusterByRefName", refName, refresh)}
}

func (_c *RemoteClusterSvc_RemoteClusterByRefName_Call) Run(run func(refName string, refresh bool)) *RemoteClusterSvc_RemoteClusterByRefName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(bool))
	})
	return _c
}

func (_c *RemoteClusterSvc_RemoteClusterByRefName_Call) Return(_a0 *metadata.RemoteClusterReference, _a1 error) *RemoteClusterSvc_RemoteClusterByRefName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RemoteClusterSvc_RemoteClusterByRefName_Call) RunAndReturn(run func(string, bool) (*metadata.RemoteClusterReference, error)) *RemoteClusterSvc_RemoteClusterByRefName_Call {
	_c.Call.Return(run)
	return _c
}

// RemoteClusterByUuid provides a mock function with given fields: uuid, refresh
func (_m *RemoteClusterSvc) RemoteClusterByUuid(uuid string, refresh bool) (*metadata.RemoteClusterReference, error) {
	ret := _m.Called(uuid, refresh)

	if len(ret) == 0 {
		panic("no return value specified for RemoteClusterByUuid")
	}

	var r0 *metadata.RemoteClusterReference
	var r1 error
	if rf, ok := ret.Get(0).(func(string, bool) (*metadata.RemoteClusterReference, error)); ok {
		return rf(uuid, refresh)
	}
	if rf, ok := ret.Get(0).(func(string, bool) *metadata.RemoteClusterReference); ok {
		r0 = rf(uuid, refresh)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*metadata.RemoteClusterReference)
		}
	}

	if rf, ok := ret.Get(1).(func(string, bool) error); ok {
		r1 = rf(uuid, refresh)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoteClusterSvc_RemoteClusterByUuid_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoteClusterByUuid'
type RemoteClusterSvc_RemoteClusterByUuid_Call struct {
	*mock.Call
}

// RemoteClusterByUuid is a helper method to define mock.On call
//   - uuid string
//   - refresh bool
func (_e *RemoteClusterSvc_Expecter) RemoteClusterByUuid(uuid interface{}, refresh interface{}) *RemoteClusterSvc_RemoteClusterByUuid_Call {
	return &RemoteClusterSvc_RemoteClusterByUuid_Call{Call: _e.mock.On("RemoteClusterByUuid", uuid, refresh)}
}

func (_c *RemoteClusterSvc_RemoteClusterByUuid_Call) Run(run func(uuid string, refresh bool)) *RemoteClusterSvc_RemoteClusterByUuid_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(bool))
	})
	return _c
}

func (_c *RemoteClusterSvc_RemoteClusterByUuid_Call) Return(_a0 *metadata.RemoteClusterReference, _a1 error) *RemoteClusterSvc_RemoteClusterByUuid_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RemoteClusterSvc_RemoteClusterByUuid_Call) RunAndReturn(run func(string, bool) (*metadata.RemoteClusterReference, error)) *RemoteClusterSvc_RemoteClusterByUuid_Call {
	_c.Call.Return(run)
	return _c
}

// RemoteClusterServiceCallback provides a mock function with given fields: path, value, rev
func (_m *RemoteClusterSvc) RemoteClusterServiceCallback(path string, value []byte, rev interface{}) error {
	ret := _m.Called(path, value, rev)

	if len(ret) == 0 {
		panic("no return value specified for RemoteClusterServiceCallback")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []byte, interface{}) error); ok {
		r0 = rf(path, value, rev)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoteClusterSvc_RemoteClusterServiceCallback_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoteClusterServiceCallback'
type RemoteClusterSvc_RemoteClusterServiceCallback_Call struct {
	*mock.Call
}

// RemoteClusterServiceCallback is a helper method to define mock.On call
//   - path string
//   - value []byte
//   - rev interface{}
func (_e *RemoteClusterSvc_Expecter) RemoteClusterServiceCallback(path interface{}, value interface{}, rev interface{}) *RemoteClusterSvc_RemoteClusterServiceCallback_Call {
	return &RemoteClusterSvc_RemoteClusterServiceCallback_Call{Call: _e.mock.On("RemoteClusterServiceCallback", path, value, rev)}
}

func (_c *RemoteClusterSvc_RemoteClusterServiceCallback_Call) Run(run func(path string, value []byte, rev interface{})) *RemoteClusterSvc_RemoteClusterServiceCallback_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]byte), args[2].(interface{}))
	})
	return _c
}

func (_c *RemoteClusterSvc_RemoteClusterServiceCallback_Call) Return(_a0 error) *RemoteClusterSvc_RemoteClusterServiceCallback_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RemoteClusterSvc_RemoteClusterServiceCallback_Call) RunAndReturn(run func(string, []byte, interface{}) error) *RemoteClusterSvc_RemoteClusterServiceCallback_Call {
	_c.Call.Return(run)
	return _c
}

// RemoteClusters provides a mock function with given fields:
func (_m *RemoteClusterSvc) RemoteClusters() (map[string]*metadata.RemoteClusterReference, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for RemoteClusters")
	}

	var r0 map[string]*metadata.RemoteClusterReference
	var r1 error
	if rf, ok := ret.Get(0).(func() (map[string]*metadata.RemoteClusterReference, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() map[string]*metadata.RemoteClusterReference); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*metadata.RemoteClusterReference)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoteClusterSvc_RemoteClusters_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoteClusters'
type RemoteClusterSvc_RemoteClusters_Call struct {
	*mock.Call
}

// RemoteClusters is a helper method to define mock.On call
func (_e *RemoteClusterSvc_Expecter) RemoteClusters() *RemoteClusterSvc_RemoteClusters_Call {
	return &RemoteClusterSvc_RemoteClusters_Call{Call: _e.mock.On("RemoteClusters")}
}

func (_c *RemoteClusterSvc_RemoteClusters_Call) Run(run func()) *RemoteClusterSvc_RemoteClusters_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RemoteClusterSvc_RemoteClusters_Call) Return(_a0 map[string]*metadata.RemoteClusterReference, _a1 error) *RemoteClusterSvc_RemoteClusters_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RemoteClusterSvc_RemoteClusters_Call) RunAndReturn(run func() (map[string]*metadata.RemoteClusterReference, error)) *RemoteClusterSvc_RemoteClusters_Call {
	_c.Call.Return(run)
	return _c
}

// RequestRemoteMonitoring provides a mock function with given fields: spec
func (_m *RemoteClusterSvc) RequestRemoteMonitoring(spec *metadata.ReplicationSpecification) error {
	ret := _m.Called(spec)

	if len(ret) == 0 {
		panic("no return value specified for RequestRemoteMonitoring")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*metadata.ReplicationSpecification) error); ok {
		r0 = rf(spec)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoteClusterSvc_RequestRemoteMonitoring_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RequestRemoteMonitoring'
type RemoteClusterSvc_RequestRemoteMonitoring_Call struct {
	*mock.Call
}

// RequestRemoteMonitoring is a helper method to define mock.On call
//   - spec *metadata.ReplicationSpecification
func (_e *RemoteClusterSvc_Expecter) RequestRemoteMonitoring(spec interface{}) *RemoteClusterSvc_RequestRemoteMonitoring_Call {
	return &RemoteClusterSvc_RequestRemoteMonitoring_Call{Call: _e.mock.On("RequestRemoteMonitoring", spec)}
}

func (_c *RemoteClusterSvc_RequestRemoteMonitoring_Call) Run(run func(spec *metadata.ReplicationSpecification)) *RemoteClusterSvc_RequestRemoteMonitoring_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*metadata.ReplicationSpecification))
	})
	return _c
}

func (_c *RemoteClusterSvc_RequestRemoteMonitoring_Call) Return(_a0 error) *RemoteClusterSvc_RequestRemoteMonitoring_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RemoteClusterSvc_RequestRemoteMonitoring_Call) RunAndReturn(run func(*metadata.ReplicationSpecification) error) *RemoteClusterSvc_RequestRemoteMonitoring_Call {
	_c.Call.Return(run)
	return _c
}

// SetBucketTopologySvc provides a mock function with given fields: svc
func (_m *RemoteClusterSvc) SetBucketTopologySvc(svc service_def.BucketTopologySvc) {
	_m.Called(svc)
}

// RemoteClusterSvc_SetBucketTopologySvc_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetBucketTopologySvc'
type RemoteClusterSvc_SetBucketTopologySvc_Call struct {
	*mock.Call
}

// SetBucketTopologySvc is a helper method to define mock.On call
//   - svc service_def.BucketTopologySvc
func (_e *RemoteClusterSvc_Expecter) SetBucketTopologySvc(svc interface{}) *RemoteClusterSvc_SetBucketTopologySvc_Call {
	return &RemoteClusterSvc_SetBucketTopologySvc_Call{Call: _e.mock.On("SetBucketTopologySvc", svc)}
}

func (_c *RemoteClusterSvc_SetBucketTopologySvc_Call) Run(run func(svc service_def.BucketTopologySvc)) *RemoteClusterSvc_SetBucketTopologySvc_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(service_def.BucketTopologySvc))
	})
	return _c
}

func (_c *RemoteClusterSvc_SetBucketTopologySvc_Call) Return() *RemoteClusterSvc_SetBucketTopologySvc_Call {
	_c.Call.Return()
	return _c
}

func (_c *RemoteClusterSvc_SetBucketTopologySvc_Call) RunAndReturn(run func(service_def.BucketTopologySvc)) *RemoteClusterSvc_SetBucketTopologySvc_Call {
	_c.Call.Return(run)
	return _c
}

// SetMetadataChangeHandlerCallback provides a mock function with given fields: callBack
func (_m *RemoteClusterSvc) SetMetadataChangeHandlerCallback(callBack base.MetadataChangeHandlerCallback) {
	_m.Called(callBack)
}

// RemoteClusterSvc_SetMetadataChangeHandlerCallback_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetMetadataChangeHandlerCallback'
type RemoteClusterSvc_SetMetadataChangeHandlerCallback_Call struct {
	*mock.Call
}

// SetMetadataChangeHandlerCallback is a helper method to define mock.On call
//   - callBack base.MetadataChangeHandlerCallback
func (_e *RemoteClusterSvc_Expecter) SetMetadataChangeHandlerCallback(callBack interface{}) *RemoteClusterSvc_SetMetadataChangeHandlerCallback_Call {
	return &RemoteClusterSvc_SetMetadataChangeHandlerCallback_Call{Call: _e.mock.On("SetMetadataChangeHandlerCallback", callBack)}
}

func (_c *RemoteClusterSvc_SetMetadataChangeHandlerCallback_Call) Run(run func(callBack base.MetadataChangeHandlerCallback)) *RemoteClusterSvc_SetMetadataChangeHandlerCallback_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(base.MetadataChangeHandlerCallback))
	})
	return _c
}

func (_c *RemoteClusterSvc_SetMetadataChangeHandlerCallback_Call) Return() *RemoteClusterSvc_SetMetadataChangeHandlerCallback_Call {
	_c.Call.Return()
	return _c
}

func (_c *RemoteClusterSvc_SetMetadataChangeHandlerCallback_Call) RunAndReturn(run func(base.MetadataChangeHandlerCallback)) *RemoteClusterSvc_SetMetadataChangeHandlerCallback_Call {
	_c.Call.Return(run)
	return _c
}

// SetRemoteCluster provides a mock function with given fields: refName, ref
func (_m *RemoteClusterSvc) SetRemoteCluster(refName string, ref *metadata.RemoteClusterReference) error {
	ret := _m.Called(refName, ref)

	if len(ret) == 0 {
		panic("no return value specified for SetRemoteCluster")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *metadata.RemoteClusterReference) error); ok {
		r0 = rf(refName, ref)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoteClusterSvc_SetRemoteCluster_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetRemoteCluster'
type RemoteClusterSvc_SetRemoteCluster_Call struct {
	*mock.Call
}

// SetRemoteCluster is a helper method to define mock.On call
//   - refName string
//   - ref *metadata.RemoteClusterReference
func (_e *RemoteClusterSvc_Expecter) SetRemoteCluster(refName interface{}, ref interface{}) *RemoteClusterSvc_SetRemoteCluster_Call {
	return &RemoteClusterSvc_SetRemoteCluster_Call{Call: _e.mock.On("SetRemoteCluster", refName, ref)}
}

func (_c *RemoteClusterSvc_SetRemoteCluster_Call) Run(run func(refName string, ref *metadata.RemoteClusterReference)) *RemoteClusterSvc_SetRemoteCluster_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*metadata.RemoteClusterReference))
	})
	return _c
}

func (_c *RemoteClusterSvc_SetRemoteCluster_Call) Return(_a0 error) *RemoteClusterSvc_SetRemoteCluster_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RemoteClusterSvc_SetRemoteCluster_Call) RunAndReturn(run func(string, *metadata.RemoteClusterReference) error) *RemoteClusterSvc_SetRemoteCluster_Call {
	_c.Call.Return(run)
	return _c
}

// ShouldUseAlternateAddress provides a mock function with given fields: ref
func (_m *RemoteClusterSvc) ShouldUseAlternateAddress(ref *metadata.RemoteClusterReference) (bool, error) {
	ret := _m.Called(ref)

	if len(ret) == 0 {
		panic("no return value specified for ShouldUseAlternateAddress")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(*metadata.RemoteClusterReference) (bool, error)); ok {
		return rf(ref)
	}
	if rf, ok := ret.Get(0).(func(*metadata.RemoteClusterReference) bool); ok {
		r0 = rf(ref)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(*metadata.RemoteClusterReference) error); ok {
		r1 = rf(ref)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoteClusterSvc_ShouldUseAlternateAddress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ShouldUseAlternateAddress'
type RemoteClusterSvc_ShouldUseAlternateAddress_Call struct {
	*mock.Call
}

// ShouldUseAlternateAddress is a helper method to define mock.On call
//   - ref *metadata.RemoteClusterReference
func (_e *RemoteClusterSvc_Expecter) ShouldUseAlternateAddress(ref interface{}) *RemoteClusterSvc_ShouldUseAlternateAddress_Call {
	return &RemoteClusterSvc_ShouldUseAlternateAddress_Call{Call: _e.mock.On("ShouldUseAlternateAddress", ref)}
}

func (_c *RemoteClusterSvc_ShouldUseAlternateAddress_Call) Run(run func(ref *metadata.RemoteClusterReference)) *RemoteClusterSvc_ShouldUseAlternateAddress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*metadata.RemoteClusterReference))
	})
	return _c
}

func (_c *RemoteClusterSvc_ShouldUseAlternateAddress_Call) Return(_a0 bool, _a1 error) *RemoteClusterSvc_ShouldUseAlternateAddress_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RemoteClusterSvc_ShouldUseAlternateAddress_Call) RunAndReturn(run func(*metadata.RemoteClusterReference) (bool, error)) *RemoteClusterSvc_ShouldUseAlternateAddress_Call {
	_c.Call.Return(run)
	return _c
}

// UnRequestRemoteMonitoring provides a mock function with given fields: spec
func (_m *RemoteClusterSvc) UnRequestRemoteMonitoring(spec *metadata.ReplicationSpecification) error {
	ret := _m.Called(spec)

	if len(ret) == 0 {
		panic("no return value specified for UnRequestRemoteMonitoring")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*metadata.ReplicationSpecification) error); ok {
		r0 = rf(spec)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoteClusterSvc_UnRequestRemoteMonitoring_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnRequestRemoteMonitoring'
type RemoteClusterSvc_UnRequestRemoteMonitoring_Call struct {
	*mock.Call
}

// UnRequestRemoteMonitoring is a helper method to define mock.On call
//   - spec *metadata.ReplicationSpecification
func (_e *RemoteClusterSvc_Expecter) UnRequestRemoteMonitoring(spec interface{}) *RemoteClusterSvc_UnRequestRemoteMonitoring_Call {
	return &RemoteClusterSvc_UnRequestRemoteMonitoring_Call{Call: _e.mock.On("UnRequestRemoteMonitoring", spec)}
}

func (_c *RemoteClusterSvc_UnRequestRemoteMonitoring_Call) Run(run func(spec *metadata.ReplicationSpecification)) *RemoteClusterSvc_UnRequestRemoteMonitoring_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*metadata.ReplicationSpecification))
	})
	return _c
}

func (_c *RemoteClusterSvc_UnRequestRemoteMonitoring_Call) Return(_a0 error) *RemoteClusterSvc_UnRequestRemoteMonitoring_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RemoteClusterSvc_UnRequestRemoteMonitoring_Call) RunAndReturn(run func(*metadata.ReplicationSpecification) error) *RemoteClusterSvc_UnRequestRemoteMonitoring_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateAddRemoteCluster provides a mock function with given fields: ref
func (_m *RemoteClusterSvc) ValidateAddRemoteCluster(ref *metadata.RemoteClusterReference) error {
	ret := _m.Called(ref)

	if len(ret) == 0 {
		panic("no return value specified for ValidateAddRemoteCluster")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*metadata.RemoteClusterReference) error); ok {
		r0 = rf(ref)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoteClusterSvc_ValidateAddRemoteCluster_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateAddRemoteCluster'
type RemoteClusterSvc_ValidateAddRemoteCluster_Call struct {
	*mock.Call
}

// ValidateAddRemoteCluster is a helper method to define mock.On call
//   - ref *metadata.RemoteClusterReference
func (_e *RemoteClusterSvc_Expecter) ValidateAddRemoteCluster(ref interface{}) *RemoteClusterSvc_ValidateAddRemoteCluster_Call {
	return &RemoteClusterSvc_ValidateAddRemoteCluster_Call{Call: _e.mock.On("ValidateAddRemoteCluster", ref)}
}

func (_c *RemoteClusterSvc_ValidateAddRemoteCluster_Call) Run(run func(ref *metadata.RemoteClusterReference)) *RemoteClusterSvc_ValidateAddRemoteCluster_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*metadata.RemoteClusterReference))
	})
	return _c
}

func (_c *RemoteClusterSvc_ValidateAddRemoteCluster_Call) Return(_a0 error) *RemoteClusterSvc_ValidateAddRemoteCluster_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RemoteClusterSvc_ValidateAddRemoteCluster_Call) RunAndReturn(run func(*metadata.RemoteClusterReference) error) *RemoteClusterSvc_ValidateAddRemoteCluster_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateRemoteCluster provides a mock function with given fields: ref
func (_m *RemoteClusterSvc) ValidateRemoteCluster(ref *metadata.RemoteClusterReference) error {
	ret := _m.Called(ref)

	if len(ret) == 0 {
		panic("no return value specified for ValidateRemoteCluster")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*metadata.RemoteClusterReference) error); ok {
		r0 = rf(ref)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoteClusterSvc_ValidateRemoteCluster_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateRemoteCluster'
type RemoteClusterSvc_ValidateRemoteCluster_Call struct {
	*mock.Call
}

// ValidateRemoteCluster is a helper method to define mock.On call
//   - ref *metadata.RemoteClusterReference
func (_e *RemoteClusterSvc_Expecter) ValidateRemoteCluster(ref interface{}) *RemoteClusterSvc_ValidateRemoteCluster_Call {
	return &RemoteClusterSvc_ValidateRemoteCluster_Call{Call: _e.mock.On("ValidateRemoteCluster", ref)}
}

func (_c *RemoteClusterSvc_ValidateRemoteCluster_Call) Run(run func(ref *metadata.RemoteClusterReference)) *RemoteClusterSvc_ValidateRemoteCluster_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*metadata.RemoteClusterReference))
	})
	return _c
}

func (_c *RemoteClusterSvc_ValidateRemoteCluster_Call) Return(_a0 error) *RemoteClusterSvc_ValidateRemoteCluster_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RemoteClusterSvc_ValidateRemoteCluster_Call) RunAndReturn(run func(*metadata.RemoteClusterReference) error) *RemoteClusterSvc_ValidateRemoteCluster_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateSetRemoteCluster provides a mock function with given fields: refName, ref
func (_m *RemoteClusterSvc) ValidateSetRemoteCluster(refName string, ref *metadata.RemoteClusterReference) error {
	ret := _m.Called(refName, ref)

	if len(ret) == 0 {
		panic("no return value specified for ValidateSetRemoteCluster")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *metadata.RemoteClusterReference) error); ok {
		r0 = rf(refName, ref)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoteClusterSvc_ValidateSetRemoteCluster_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateSetRemoteCluster'
type RemoteClusterSvc_ValidateSetRemoteCluster_Call struct {
	*mock.Call
}

// ValidateSetRemoteCluster is a helper method to define mock.On call
//   - refName string
//   - ref *metadata.RemoteClusterReference
func (_e *RemoteClusterSvc_Expecter) ValidateSetRemoteCluster(refName interface{}, ref interface{}) *RemoteClusterSvc_ValidateSetRemoteCluster_Call {
	return &RemoteClusterSvc_ValidateSetRemoteCluster_Call{Call: _e.mock.On("ValidateSetRemoteCluster", refName, ref)}
}

func (_c *RemoteClusterSvc_ValidateSetRemoteCluster_Call) Run(run func(refName string, ref *metadata.RemoteClusterReference)) *RemoteClusterSvc_ValidateSetRemoteCluster_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*metadata.RemoteClusterReference))
	})
	return _c
}

func (_c *RemoteClusterSvc_ValidateSetRemoteCluster_Call) Return(_a0 error) *RemoteClusterSvc_ValidateSetRemoteCluster_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RemoteClusterSvc_ValidateSetRemoteCluster_Call) RunAndReturn(run func(string, *metadata.RemoteClusterReference) error) *RemoteClusterSvc_ValidateSetRemoteCluster_Call {
	_c.Call.Return(run)
	return _c
}

// NewRemoteClusterSvc creates a new instance of RemoteClusterSvc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRemoteClusterSvc(t interface {
	mock.TestingT
	Cleanup(func())
}) *RemoteClusterSvc {
	mock := &RemoteClusterSvc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
