package mocks

import (
	base "github.com/couchbase/goxdcr/base"
	metadata "github.com/couchbase/goxdcr/metadata"

	mock "github.com/stretchr/testify/mock"
)

// BucketSettingsSvc is an autogenerated mock type for the BucketSettingsSvc type
type BucketSettingsSvc struct {
	mock.Mock
}

// BucketSettings provides a mock function with given fields: bucketName
func (_m *BucketSettingsSvc) BucketSettings(bucketName string) (*metadata.BucketSettings, error) {
	ret := _m.Called(bucketName)

	var r0 *metadata.BucketSettings
	if rf, ok := ret.Get(0).(func(string) *metadata.BucketSettings); ok {
		r0 = rf(bucketName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*metadata.BucketSettings)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(bucketName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BucketSettingsServiceCallback provides a mock function with given fields: path, value, rev
func (_m *BucketSettingsSvc) BucketSettingsServiceCallback(path string, value []byte, rev interface{}) error {
	ret := _m.Called(path, value, rev)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []byte, interface{}) error); ok {
		r0 = rf(path, value, rev)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetBucketSettings provides a mock function with given fields: bucketName, bucketSettings
func (_m *BucketSettingsSvc) SetBucketSettings(bucketName string, bucketSettings *metadata.BucketSettings) error {
	ret := _m.Called(bucketName, bucketSettings)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *metadata.BucketSettings) error); ok {
		r0 = rf(bucketName, bucketSettings)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetMetadataChangeHandlerCallback provides a mock function with given fields: callBack
func (_m *BucketSettingsSvc) SetMetadataChangeHandlerCallback(callBack base.MetadataChangeHandlerCallback) {
	_m.Called(callBack)
}
