package mocks

import (
	metadata "github.com/couchbase/goxdcr/metadata"
	mock "github.com/stretchr/testify/mock"
)

// BackfillReplSvc is an autogenerated mock type for the BackfillReplSvc type
type BackfillReplSvc struct {
	mock.Mock
}

// AddReplicationSpec provides a mock function with given fields: spec
func (_m *BackfillReplSvc) AddReplicationSpec(spec *metadata.BackfillReplicationSpec) error {
	ret := _m.Called(spec)

	var r0 error
	if rf, ok := ret.Get(0).(func(*metadata.BackfillReplicationSpec) error); ok {
		r0 = rf(spec)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReplicationSpec provides a mock function with given fields: replicationId
func (_m *BackfillReplSvc) ReplicationSpec(replicationId string) (*metadata.BackfillReplicationSpec, error) {
	ret := _m.Called(replicationId)

	var r0 *metadata.BackfillReplicationSpec
	if rf, ok := ret.Get(0).(func(string) *metadata.BackfillReplicationSpec); ok {
		r0 = rf(replicationId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*metadata.BackfillReplicationSpec)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(replicationId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetReplicationSpec provides a mock function with given fields: spec
func (_m *BackfillReplSvc) SetReplicationSpec(spec *metadata.BackfillReplicationSpec) error {
	ret := _m.Called(spec)

	var r0 error
	if rf, ok := ret.Get(0).(func(*metadata.BackfillReplicationSpec) error); ok {
		r0 = rf(spec)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
