// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	metadata "github.com/couchbase/goxdcr/metadata"
	mock "github.com/stretchr/testify/mock"

	service_def "github.com/couchbase/goxdcr/service_def"
)

// CAPIService is an autogenerated mock type for the CAPIService type
type CAPIService struct {
	mock.Mock
}

type CAPIService_Expecter struct {
	mock *mock.Mock
}

func (_m *CAPIService) EXPECT() *CAPIService_Expecter {
	return &CAPIService_Expecter{mock: &_m.Mock}
}

// CommitForCheckpoint provides a mock function with given fields: remoteBucket, remoteVBOpaque, vbno
func (_m *CAPIService) CommitForCheckpoint(remoteBucket *service_def.RemoteBucketInfo, remoteVBOpaque metadata.TargetVBOpaque, vbno uint16) (uint64, metadata.TargetVBOpaque, error) {
	ret := _m.Called(remoteBucket, remoteVBOpaque, vbno)

	if len(ret) == 0 {
		panic("no return value specified for CommitForCheckpoint")
	}

	var r0 uint64
	var r1 metadata.TargetVBOpaque
	var r2 error
	if rf, ok := ret.Get(0).(func(*service_def.RemoteBucketInfo, metadata.TargetVBOpaque, uint16) (uint64, metadata.TargetVBOpaque, error)); ok {
		return rf(remoteBucket, remoteVBOpaque, vbno)
	}
	if rf, ok := ret.Get(0).(func(*service_def.RemoteBucketInfo, metadata.TargetVBOpaque, uint16) uint64); ok {
		r0 = rf(remoteBucket, remoteVBOpaque, vbno)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(*service_def.RemoteBucketInfo, metadata.TargetVBOpaque, uint16) metadata.TargetVBOpaque); ok {
		r1 = rf(remoteBucket, remoteVBOpaque, vbno)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(metadata.TargetVBOpaque)
		}
	}

	if rf, ok := ret.Get(2).(func(*service_def.RemoteBucketInfo, metadata.TargetVBOpaque, uint16) error); ok {
		r2 = rf(remoteBucket, remoteVBOpaque, vbno)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CAPIService_CommitForCheckpoint_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CommitForCheckpoint'
type CAPIService_CommitForCheckpoint_Call struct {
	*mock.Call
}

// CommitForCheckpoint is a helper method to define mock.On call
//   - remoteBucket *service_def.RemoteBucketInfo
//   - remoteVBOpaque metadata.TargetVBOpaque
//   - vbno uint16
func (_e *CAPIService_Expecter) CommitForCheckpoint(remoteBucket interface{}, remoteVBOpaque interface{}, vbno interface{}) *CAPIService_CommitForCheckpoint_Call {
	return &CAPIService_CommitForCheckpoint_Call{Call: _e.mock.On("CommitForCheckpoint", remoteBucket, remoteVBOpaque, vbno)}
}

func (_c *CAPIService_CommitForCheckpoint_Call) Run(run func(remoteBucket *service_def.RemoteBucketInfo, remoteVBOpaque metadata.TargetVBOpaque, vbno uint16)) *CAPIService_CommitForCheckpoint_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*service_def.RemoteBucketInfo), args[1].(metadata.TargetVBOpaque), args[2].(uint16))
	})
	return _c
}

func (_c *CAPIService_CommitForCheckpoint_Call) Return(remote_seqno uint64, vbOpaque metadata.TargetVBOpaque, err error) *CAPIService_CommitForCheckpoint_Call {
	_c.Call.Return(remote_seqno, vbOpaque, err)
	return _c
}

func (_c *CAPIService_CommitForCheckpoint_Call) RunAndReturn(run func(*service_def.RemoteBucketInfo, metadata.TargetVBOpaque, uint16) (uint64, metadata.TargetVBOpaque, error)) *CAPIService_CommitForCheckpoint_Call {
	_c.Call.Return(run)
	return _c
}

// PreReplicate provides a mock function with given fields: remoteBucket, knownRemoteVBStatus, xdcrCheckpointingCapbility
func (_m *CAPIService) PreReplicate(remoteBucket *service_def.RemoteBucketInfo, knownRemoteVBStatus *service_def.RemoteVBReplicationStatus, xdcrCheckpointingCapbility bool) (bool, metadata.TargetVBOpaque, error) {
	ret := _m.Called(remoteBucket, knownRemoteVBStatus, xdcrCheckpointingCapbility)

	if len(ret) == 0 {
		panic("no return value specified for PreReplicate")
	}

	var r0 bool
	var r1 metadata.TargetVBOpaque
	var r2 error
	if rf, ok := ret.Get(0).(func(*service_def.RemoteBucketInfo, *service_def.RemoteVBReplicationStatus, bool) (bool, metadata.TargetVBOpaque, error)); ok {
		return rf(remoteBucket, knownRemoteVBStatus, xdcrCheckpointingCapbility)
	}
	if rf, ok := ret.Get(0).(func(*service_def.RemoteBucketInfo, *service_def.RemoteVBReplicationStatus, bool) bool); ok {
		r0 = rf(remoteBucket, knownRemoteVBStatus, xdcrCheckpointingCapbility)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(*service_def.RemoteBucketInfo, *service_def.RemoteVBReplicationStatus, bool) metadata.TargetVBOpaque); ok {
		r1 = rf(remoteBucket, knownRemoteVBStatus, xdcrCheckpointingCapbility)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(metadata.TargetVBOpaque)
		}
	}

	if rf, ok := ret.Get(2).(func(*service_def.RemoteBucketInfo, *service_def.RemoteVBReplicationStatus, bool) error); ok {
		r2 = rf(remoteBucket, knownRemoteVBStatus, xdcrCheckpointingCapbility)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CAPIService_PreReplicate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PreReplicate'
type CAPIService_PreReplicate_Call struct {
	*mock.Call
}

// PreReplicate is a helper method to define mock.On call
//   - remoteBucket *service_def.RemoteBucketInfo
//   - knownRemoteVBStatus *service_def.RemoteVBReplicationStatus
//   - xdcrCheckpointingCapbility bool
func (_e *CAPIService_Expecter) PreReplicate(remoteBucket interface{}, knownRemoteVBStatus interface{}, xdcrCheckpointingCapbility interface{}) *CAPIService_PreReplicate_Call {
	return &CAPIService_PreReplicate_Call{Call: _e.mock.On("PreReplicate", remoteBucket, knownRemoteVBStatus, xdcrCheckpointingCapbility)}
}

func (_c *CAPIService_PreReplicate_Call) Run(run func(remoteBucket *service_def.RemoteBucketInfo, knownRemoteVBStatus *service_def.RemoteVBReplicationStatus, xdcrCheckpointingCapbility bool)) *CAPIService_PreReplicate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*service_def.RemoteBucketInfo), args[1].(*service_def.RemoteVBReplicationStatus), args[2].(bool))
	})
	return _c
}

func (_c *CAPIService_PreReplicate_Call) Return(bVBMatch bool, current_remoteVBOpaque metadata.TargetVBOpaque, err error) *CAPIService_PreReplicate_Call {
	_c.Call.Return(bVBMatch, current_remoteVBOpaque, err)
	return _c
}

func (_c *CAPIService_PreReplicate_Call) RunAndReturn(run func(*service_def.RemoteBucketInfo, *service_def.RemoteVBReplicationStatus, bool) (bool, metadata.TargetVBOpaque, error)) *CAPIService_PreReplicate_Call {
	_c.Call.Return(run)
	return _c
}

// NewCAPIService creates a new instance of CAPIService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCAPIService(t interface {
	mock.TestingT
	Cleanup(func())
}) *CAPIService {
	mock := &CAPIService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
