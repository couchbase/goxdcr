// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	common "github.com/couchbase/goxdcr/common"
	metadata "github.com/couchbase/goxdcr/metadata"

	mock "github.com/stretchr/testify/mock"
)

// Supervisor is an autogenerated mock type for the Supervisor type
type Supervisor struct {
	mock.Mock
}

// AddChild provides a mock function with given fields: child
func (_m *Supervisor) AddChild(child common.Supervisable) error {
	ret := _m.Called(child)

	var r0 error
	if rf, ok := ret.Get(0).(func(common.Supervisable) error); ok {
		r0 = rf(child)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Child provides a mock function with given fields: childId
func (_m *Supervisor) Child(childId string) (common.Supervisable, error) {
	ret := _m.Called(childId)

	var r0 common.Supervisable
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (common.Supervisable, error)); ok {
		return rf(childId)
	}
	if rf, ok := ret.Get(0).(func(string) common.Supervisable); ok {
		r0 = rf(childId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Supervisable)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(childId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Id provides a mock function with given fields:
func (_m *Supervisor) Id() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// RemoveChild provides a mock function with given fields: childId
func (_m *Supervisor) RemoveChild(childId string) error {
	ret := _m.Called(childId)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(childId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReportFailure provides a mock function with given fields: errors
func (_m *Supervisor) ReportFailure(errors map[string]error) {
	_m.Called(errors)
}

// Start provides a mock function with given fields: settings
func (_m *Supervisor) Start(settings metadata.ReplicationSettingsMap) error {
	ret := _m.Called(settings)

	var r0 error
	if rf, ok := ret.Get(0).(func(metadata.ReplicationSettingsMap) error); ok {
		r0 = rf(settings)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Stop provides a mock function with given fields:
func (_m *Supervisor) Stop() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewSupervisor interface {
	mock.TestingT
	Cleanup(func())
}

// NewSupervisor creates a new instance of Supervisor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSupervisor(t mockConstructorTestingTNewSupervisor) *Supervisor {
	mock := &Supervisor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
