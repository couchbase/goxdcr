// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	base "github.com/couchbase/goxdcr/base"

	mock "github.com/stretchr/testify/mock"
)

// PipelineEventsProducer is an autogenerated mock type for the PipelineEventsProducer type
type PipelineEventsProducer struct {
	mock.Mock
}

// AddEvent provides a mock function with given fields: eventType, eventDesc, eventExtras, hint
func (_m *PipelineEventsProducer) AddEvent(eventType base.EventInfoType, eventDesc string, eventExtras base.EventsMap, hint interface{}) int64 {
	ret := _m.Called(eventType, eventDesc, eventExtras, hint)

	if len(ret) == 0 {
		panic("no return value specified for AddEvent")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func(base.EventInfoType, string, base.EventsMap, interface{}) int64); ok {
		r0 = rf(eventType, eventDesc, eventExtras, hint)
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// DismissEvent provides a mock function with given fields: eventId
func (_m *PipelineEventsProducer) DismissEvent(eventId int) error {
	ret := _m.Called(eventId)

	if len(ret) == 0 {
		panic("no return value specified for DismissEvent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(eventId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateEvent provides a mock function with given fields: oldEventId, newEventDesc, newEventExtras
func (_m *PipelineEventsProducer) UpdateEvent(oldEventId int64, newEventDesc string, newEventExtras *base.EventsMap) error {
	ret := _m.Called(oldEventId, newEventDesc, newEventExtras)

	if len(ret) == 0 {
		panic("no return value specified for UpdateEvent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, string, *base.EventsMap) error); ok {
		r0 = rf(oldEventId, newEventDesc, newEventExtras)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewPipelineEventsProducer creates a new instance of PipelineEventsProducer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPipelineEventsProducer(t interface {
	mock.TestingT
	Cleanup(func())
}) *PipelineEventsProducer {
	mock := &PipelineEventsProducer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
