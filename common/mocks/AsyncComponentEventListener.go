// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	common "github.com/couchbase/goxdcr/common"
	mock "github.com/stretchr/testify/mock"
)

// AsyncComponentEventListener is an autogenerated mock type for the AsyncComponentEventListener type
type AsyncComponentEventListener struct {
	mock.Mock
}

// Id provides a mock function with given fields:
func (_m *AsyncComponentEventListener) Id() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// OnEvent provides a mock function with given fields: event
func (_m *AsyncComponentEventListener) OnEvent(event *common.Event) {
	_m.Called(event)
}

// RegisterComponentEventHandler provides a mock function with given fields: handler
func (_m *AsyncComponentEventListener) RegisterComponentEventHandler(handler common.AsyncComponentEventHandler) {
	_m.Called(handler)
}

// Start provides a mock function with given fields:
func (_m *AsyncComponentEventListener) Start() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Stop provides a mock function with given fields:
func (_m *AsyncComponentEventListener) Stop() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewAsyncComponentEventListener interface {
	mock.TestingT
	Cleanup(func())
}

// NewAsyncComponentEventListener creates a new instance of AsyncComponentEventListener. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAsyncComponentEventListener(t mockConstructorTestingTNewAsyncComponentEventListener) *AsyncComponentEventListener {
	mock := &AsyncComponentEventListener{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
