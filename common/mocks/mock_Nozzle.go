// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	common "github.com/couchbase/goxdcr/common"
	metadata "github.com/couchbase/goxdcr/metadata"

	mock "github.com/stretchr/testify/mock"
)

// Nozzle is an autogenerated mock type for the Nozzle type
type Nozzle struct {
	mock.Mock
}

type Nozzle_Expecter struct {
	mock *mock.Mock
}

func (_m *Nozzle) EXPECT() *Nozzle_Expecter {
	return &Nozzle_Expecter{mock: &_m.Mock}
}

// AsyncComponentEventListeners provides a mock function with given fields:
func (_m *Nozzle) AsyncComponentEventListeners() map[string]common.AsyncComponentEventListener {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for AsyncComponentEventListeners")
	}

	var r0 map[string]common.AsyncComponentEventListener
	if rf, ok := ret.Get(0).(func() map[string]common.AsyncComponentEventListener); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]common.AsyncComponentEventListener)
		}
	}

	return r0
}

// Nozzle_AsyncComponentEventListeners_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AsyncComponentEventListeners'
type Nozzle_AsyncComponentEventListeners_Call struct {
	*mock.Call
}

// AsyncComponentEventListeners is a helper method to define mock.On call
func (_e *Nozzle_Expecter) AsyncComponentEventListeners() *Nozzle_AsyncComponentEventListeners_Call {
	return &Nozzle_AsyncComponentEventListeners_Call{Call: _e.mock.On("AsyncComponentEventListeners")}
}

func (_c *Nozzle_AsyncComponentEventListeners_Call) Run(run func()) *Nozzle_AsyncComponentEventListeners_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Nozzle_AsyncComponentEventListeners_Call) Return(_a0 map[string]common.AsyncComponentEventListener) *Nozzle_AsyncComponentEventListeners_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Nozzle_AsyncComponentEventListeners_Call) RunAndReturn(run func() map[string]common.AsyncComponentEventListener) *Nozzle_AsyncComponentEventListeners_Call {
	_c.Call.Return(run)
	return _c
}

// Close provides a mock function with given fields:
func (_m *Nozzle) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Nozzle_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type Nozzle_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *Nozzle_Expecter) Close() *Nozzle_Close_Call {
	return &Nozzle_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *Nozzle_Close_Call) Run(run func()) *Nozzle_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Nozzle_Close_Call) Return(_a0 error) *Nozzle_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Nozzle_Close_Call) RunAndReturn(run func() error) *Nozzle_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Connector provides a mock function with given fields:
func (_m *Nozzle) Connector() common.Connector {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Connector")
	}

	var r0 common.Connector
	if rf, ok := ret.Get(0).(func() common.Connector); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Connector)
		}
	}

	return r0
}

// Nozzle_Connector_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Connector'
type Nozzle_Connector_Call struct {
	*mock.Call
}

// Connector is a helper method to define mock.On call
func (_e *Nozzle_Expecter) Connector() *Nozzle_Connector_Call {
	return &Nozzle_Connector_Call{Call: _e.mock.On("Connector")}
}

func (_c *Nozzle_Connector_Call) Run(run func()) *Nozzle_Connector_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Nozzle_Connector_Call) Return(_a0 common.Connector) *Nozzle_Connector_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Nozzle_Connector_Call) RunAndReturn(run func() common.Connector) *Nozzle_Connector_Call {
	_c.Call.Return(run)
	return _c
}

// Id provides a mock function with given fields:
func (_m *Nozzle) Id() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Id")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Nozzle_Id_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Id'
type Nozzle_Id_Call struct {
	*mock.Call
}

// Id is a helper method to define mock.On call
func (_e *Nozzle_Expecter) Id() *Nozzle_Id_Call {
	return &Nozzle_Id_Call{Call: _e.mock.On("Id")}
}

func (_c *Nozzle_Id_Call) Run(run func()) *Nozzle_Id_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Nozzle_Id_Call) Return(_a0 string) *Nozzle_Id_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Nozzle_Id_Call) RunAndReturn(run func() string) *Nozzle_Id_Call {
	_c.Call.Return(run)
	return _c
}

// IsOpen provides a mock function with given fields:
func (_m *Nozzle) IsOpen() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsOpen")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Nozzle_IsOpen_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsOpen'
type Nozzle_IsOpen_Call struct {
	*mock.Call
}

// IsOpen is a helper method to define mock.On call
func (_e *Nozzle_Expecter) IsOpen() *Nozzle_IsOpen_Call {
	return &Nozzle_IsOpen_Call{Call: _e.mock.On("IsOpen")}
}

func (_c *Nozzle_IsOpen_Call) Run(run func()) *Nozzle_IsOpen_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Nozzle_IsOpen_Call) Return(_a0 bool) *Nozzle_IsOpen_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Nozzle_IsOpen_Call) RunAndReturn(run func() bool) *Nozzle_IsOpen_Call {
	_c.Call.Return(run)
	return _c
}

// Open provides a mock function with given fields:
func (_m *Nozzle) Open() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Open")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Nozzle_Open_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Open'
type Nozzle_Open_Call struct {
	*mock.Call
}

// Open is a helper method to define mock.On call
func (_e *Nozzle_Expecter) Open() *Nozzle_Open_Call {
	return &Nozzle_Open_Call{Call: _e.mock.On("Open")}
}

func (_c *Nozzle_Open_Call) Run(run func()) *Nozzle_Open_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Nozzle_Open_Call) Return(_a0 error) *Nozzle_Open_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Nozzle_Open_Call) RunAndReturn(run func() error) *Nozzle_Open_Call {
	_c.Call.Return(run)
	return _c
}

// RaiseEvent provides a mock function with given fields: event
func (_m *Nozzle) RaiseEvent(event *common.Event) {
	_m.Called(event)
}

// Nozzle_RaiseEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RaiseEvent'
type Nozzle_RaiseEvent_Call struct {
	*mock.Call
}

// RaiseEvent is a helper method to define mock.On call
//   - event *common.Event
func (_e *Nozzle_Expecter) RaiseEvent(event interface{}) *Nozzle_RaiseEvent_Call {
	return &Nozzle_RaiseEvent_Call{Call: _e.mock.On("RaiseEvent", event)}
}

func (_c *Nozzle_RaiseEvent_Call) Run(run func(event *common.Event)) *Nozzle_RaiseEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*common.Event))
	})
	return _c
}

func (_c *Nozzle_RaiseEvent_Call) Return() *Nozzle_RaiseEvent_Call {
	_c.Call.Return()
	return _c
}

func (_c *Nozzle_RaiseEvent_Call) RunAndReturn(run func(*common.Event)) *Nozzle_RaiseEvent_Call {
	_c.Call.Return(run)
	return _c
}

// Receive provides a mock function with given fields: data
func (_m *Nozzle) Receive(data interface{}) error {
	ret := _m.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for Receive")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Nozzle_Receive_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Receive'
type Nozzle_Receive_Call struct {
	*mock.Call
}

// Receive is a helper method to define mock.On call
//   - data interface{}
func (_e *Nozzle_Expecter) Receive(data interface{}) *Nozzle_Receive_Call {
	return &Nozzle_Receive_Call{Call: _e.mock.On("Receive", data)}
}

func (_c *Nozzle_Receive_Call) Run(run func(data interface{})) *Nozzle_Receive_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *Nozzle_Receive_Call) Return(_a0 error) *Nozzle_Receive_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Nozzle_Receive_Call) RunAndReturn(run func(interface{}) error) *Nozzle_Receive_Call {
	_c.Call.Return(run)
	return _c
}

// RecycleDataObj provides a mock function with given fields: obj
func (_m *Nozzle) RecycleDataObj(obj interface{}) {
	_m.Called(obj)
}

// Nozzle_RecycleDataObj_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RecycleDataObj'
type Nozzle_RecycleDataObj_Call struct {
	*mock.Call
}

// RecycleDataObj is a helper method to define mock.On call
//   - obj interface{}
func (_e *Nozzle_Expecter) RecycleDataObj(obj interface{}) *Nozzle_RecycleDataObj_Call {
	return &Nozzle_RecycleDataObj_Call{Call: _e.mock.On("RecycleDataObj", obj)}
}

func (_c *Nozzle_RecycleDataObj_Call) Run(run func(obj interface{})) *Nozzle_RecycleDataObj_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *Nozzle_RecycleDataObj_Call) Return() *Nozzle_RecycleDataObj_Call {
	_c.Call.Return()
	return _c
}

func (_c *Nozzle_RecycleDataObj_Call) RunAndReturn(run func(interface{})) *Nozzle_RecycleDataObj_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterComponentEventListener provides a mock function with given fields: eventType, listener
func (_m *Nozzle) RegisterComponentEventListener(eventType common.ComponentEventType, listener common.ComponentEventListener) error {
	ret := _m.Called(eventType, listener)

	if len(ret) == 0 {
		panic("no return value specified for RegisterComponentEventListener")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(common.ComponentEventType, common.ComponentEventListener) error); ok {
		r0 = rf(eventType, listener)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Nozzle_RegisterComponentEventListener_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterComponentEventListener'
type Nozzle_RegisterComponentEventListener_Call struct {
	*mock.Call
}

// RegisterComponentEventListener is a helper method to define mock.On call
//   - eventType common.ComponentEventType
//   - listener common.ComponentEventListener
func (_e *Nozzle_Expecter) RegisterComponentEventListener(eventType interface{}, listener interface{}) *Nozzle_RegisterComponentEventListener_Call {
	return &Nozzle_RegisterComponentEventListener_Call{Call: _e.mock.On("RegisterComponentEventListener", eventType, listener)}
}

func (_c *Nozzle_RegisterComponentEventListener_Call) Run(run func(eventType common.ComponentEventType, listener common.ComponentEventListener)) *Nozzle_RegisterComponentEventListener_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.ComponentEventType), args[1].(common.ComponentEventListener))
	})
	return _c
}

func (_c *Nozzle_RegisterComponentEventListener_Call) Return(_a0 error) *Nozzle_RegisterComponentEventListener_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Nozzle_RegisterComponentEventListener_Call) RunAndReturn(run func(common.ComponentEventType, common.ComponentEventListener) error) *Nozzle_RegisterComponentEventListener_Call {
	_c.Call.Return(run)
	return _c
}

// ResponsibleVBs provides a mock function with given fields:
func (_m *Nozzle) ResponsibleVBs() []uint16 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ResponsibleVBs")
	}

	var r0 []uint16
	if rf, ok := ret.Get(0).(func() []uint16); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]uint16)
		}
	}

	return r0
}

// Nozzle_ResponsibleVBs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResponsibleVBs'
type Nozzle_ResponsibleVBs_Call struct {
	*mock.Call
}

// ResponsibleVBs is a helper method to define mock.On call
func (_e *Nozzle_Expecter) ResponsibleVBs() *Nozzle_ResponsibleVBs_Call {
	return &Nozzle_ResponsibleVBs_Call{Call: _e.mock.On("ResponsibleVBs")}
}

func (_c *Nozzle_ResponsibleVBs_Call) Run(run func()) *Nozzle_ResponsibleVBs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Nozzle_ResponsibleVBs_Call) Return(_a0 []uint16) *Nozzle_ResponsibleVBs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Nozzle_ResponsibleVBs_Call) RunAndReturn(run func() []uint16) *Nozzle_ResponsibleVBs_Call {
	_c.Call.Return(run)
	return _c
}

// SetConnector provides a mock function with given fields: connector
func (_m *Nozzle) SetConnector(connector common.Connector) error {
	ret := _m.Called(connector)

	if len(ret) == 0 {
		panic("no return value specified for SetConnector")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(common.Connector) error); ok {
		r0 = rf(connector)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Nozzle_SetConnector_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetConnector'
type Nozzle_SetConnector_Call struct {
	*mock.Call
}

// SetConnector is a helper method to define mock.On call
//   - connector common.Connector
func (_e *Nozzle_Expecter) SetConnector(connector interface{}) *Nozzle_SetConnector_Call {
	return &Nozzle_SetConnector_Call{Call: _e.mock.On("SetConnector", connector)}
}

func (_c *Nozzle_SetConnector_Call) Run(run func(connector common.Connector)) *Nozzle_SetConnector_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.Connector))
	})
	return _c
}

func (_c *Nozzle_SetConnector_Call) Return(_a0 error) *Nozzle_SetConnector_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Nozzle_SetConnector_Call) RunAndReturn(run func(common.Connector) error) *Nozzle_SetConnector_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with given fields: settings
func (_m *Nozzle) Start(settings metadata.ReplicationSettingsMap) error {
	ret := _m.Called(settings)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(metadata.ReplicationSettingsMap) error); ok {
		r0 = rf(settings)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Nozzle_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type Nozzle_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - settings metadata.ReplicationSettingsMap
func (_e *Nozzle_Expecter) Start(settings interface{}) *Nozzle_Start_Call {
	return &Nozzle_Start_Call{Call: _e.mock.On("Start", settings)}
}

func (_c *Nozzle_Start_Call) Run(run func(settings metadata.ReplicationSettingsMap)) *Nozzle_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(metadata.ReplicationSettingsMap))
	})
	return _c
}

func (_c *Nozzle_Start_Call) Return(_a0 error) *Nozzle_Start_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Nozzle_Start_Call) RunAndReturn(run func(metadata.ReplicationSettingsMap) error) *Nozzle_Start_Call {
	_c.Call.Return(run)
	return _c
}

// State provides a mock function with given fields:
func (_m *Nozzle) State() common.PartState {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for State")
	}

	var r0 common.PartState
	if rf, ok := ret.Get(0).(func() common.PartState); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(common.PartState)
	}

	return r0
}

// Nozzle_State_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'State'
type Nozzle_State_Call struct {
	*mock.Call
}

// State is a helper method to define mock.On call
func (_e *Nozzle_Expecter) State() *Nozzle_State_Call {
	return &Nozzle_State_Call{Call: _e.mock.On("State")}
}

func (_c *Nozzle_State_Call) Run(run func()) *Nozzle_State_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Nozzle_State_Call) Return(_a0 common.PartState) *Nozzle_State_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Nozzle_State_Call) RunAndReturn(run func() common.PartState) *Nozzle_State_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function with given fields:
func (_m *Nozzle) Stop() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Nozzle_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type Nozzle_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *Nozzle_Expecter) Stop() *Nozzle_Stop_Call {
	return &Nozzle_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *Nozzle_Stop_Call) Run(run func()) *Nozzle_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Nozzle_Stop_Call) Return(_a0 error) *Nozzle_Stop_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Nozzle_Stop_Call) RunAndReturn(run func() error) *Nozzle_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// UnRegisterComponentEventListener provides a mock function with given fields: eventType, listener
func (_m *Nozzle) UnRegisterComponentEventListener(eventType common.ComponentEventType, listener common.ComponentEventListener) error {
	ret := _m.Called(eventType, listener)

	if len(ret) == 0 {
		panic("no return value specified for UnRegisterComponentEventListener")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(common.ComponentEventType, common.ComponentEventListener) error); ok {
		r0 = rf(eventType, listener)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Nozzle_UnRegisterComponentEventListener_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnRegisterComponentEventListener'
type Nozzle_UnRegisterComponentEventListener_Call struct {
	*mock.Call
}

// UnRegisterComponentEventListener is a helper method to define mock.On call
//   - eventType common.ComponentEventType
//   - listener common.ComponentEventListener
func (_e *Nozzle_Expecter) UnRegisterComponentEventListener(eventType interface{}, listener interface{}) *Nozzle_UnRegisterComponentEventListener_Call {
	return &Nozzle_UnRegisterComponentEventListener_Call{Call: _e.mock.On("UnRegisterComponentEventListener", eventType, listener)}
}

func (_c *Nozzle_UnRegisterComponentEventListener_Call) Run(run func(eventType common.ComponentEventType, listener common.ComponentEventListener)) *Nozzle_UnRegisterComponentEventListener_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.ComponentEventType), args[1].(common.ComponentEventListener))
	})
	return _c
}

func (_c *Nozzle_UnRegisterComponentEventListener_Call) Return(_a0 error) *Nozzle_UnRegisterComponentEventListener_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Nozzle_UnRegisterComponentEventListener_Call) RunAndReturn(run func(common.ComponentEventType, common.ComponentEventListener) error) *Nozzle_UnRegisterComponentEventListener_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateSettings provides a mock function with given fields: settings
func (_m *Nozzle) UpdateSettings(settings metadata.ReplicationSettingsMap) error {
	ret := _m.Called(settings)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSettings")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(metadata.ReplicationSettingsMap) error); ok {
		r0 = rf(settings)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Nozzle_UpdateSettings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateSettings'
type Nozzle_UpdateSettings_Call struct {
	*mock.Call
}

// UpdateSettings is a helper method to define mock.On call
//   - settings metadata.ReplicationSettingsMap
func (_e *Nozzle_Expecter) UpdateSettings(settings interface{}) *Nozzle_UpdateSettings_Call {
	return &Nozzle_UpdateSettings_Call{Call: _e.mock.On("UpdateSettings", settings)}
}

func (_c *Nozzle_UpdateSettings_Call) Run(run func(settings metadata.ReplicationSettingsMap)) *Nozzle_UpdateSettings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(metadata.ReplicationSettingsMap))
	})
	return _c
}

func (_c *Nozzle_UpdateSettings_Call) Return(_a0 error) *Nozzle_UpdateSettings_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Nozzle_UpdateSettings_Call) RunAndReturn(run func(metadata.ReplicationSettingsMap) error) *Nozzle_UpdateSettings_Call {
	_c.Call.Return(run)
	return _c
}

// NewNozzle creates a new instance of Nozzle. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNozzle(t interface {
	mock.TestingT
	Cleanup(func())
}) *Nozzle {
	mock := &Nozzle{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
