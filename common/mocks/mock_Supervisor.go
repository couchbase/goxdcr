// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	common "github.com/couchbase/goxdcr/common"
	metadata "github.com/couchbase/goxdcr/metadata"

	mock "github.com/stretchr/testify/mock"
)

// Supervisor is an autogenerated mock type for the Supervisor type
type Supervisor struct {
	mock.Mock
}

type Supervisor_Expecter struct {
	mock *mock.Mock
}

func (_m *Supervisor) EXPECT() *Supervisor_Expecter {
	return &Supervisor_Expecter{mock: &_m.Mock}
}

// AddChild provides a mock function with given fields: child
func (_m *Supervisor) AddChild(child common.Supervisable) error {
	ret := _m.Called(child)

	if len(ret) == 0 {
		panic("no return value specified for AddChild")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(common.Supervisable) error); ok {
		r0 = rf(child)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Supervisor_AddChild_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddChild'
type Supervisor_AddChild_Call struct {
	*mock.Call
}

// AddChild is a helper method to define mock.On call
//   - child common.Supervisable
func (_e *Supervisor_Expecter) AddChild(child interface{}) *Supervisor_AddChild_Call {
	return &Supervisor_AddChild_Call{Call: _e.mock.On("AddChild", child)}
}

func (_c *Supervisor_AddChild_Call) Run(run func(child common.Supervisable)) *Supervisor_AddChild_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.Supervisable))
	})
	return _c
}

func (_c *Supervisor_AddChild_Call) Return(_a0 error) *Supervisor_AddChild_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Supervisor_AddChild_Call) RunAndReturn(run func(common.Supervisable) error) *Supervisor_AddChild_Call {
	_c.Call.Return(run)
	return _c
}

// Child provides a mock function with given fields: childId
func (_m *Supervisor) Child(childId string) (common.Supervisable, error) {
	ret := _m.Called(childId)

	if len(ret) == 0 {
		panic("no return value specified for Child")
	}

	var r0 common.Supervisable
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (common.Supervisable, error)); ok {
		return rf(childId)
	}
	if rf, ok := ret.Get(0).(func(string) common.Supervisable); ok {
		r0 = rf(childId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Supervisable)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(childId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Supervisor_Child_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Child'
type Supervisor_Child_Call struct {
	*mock.Call
}

// Child is a helper method to define mock.On call
//   - childId string
func (_e *Supervisor_Expecter) Child(childId interface{}) *Supervisor_Child_Call {
	return &Supervisor_Child_Call{Call: _e.mock.On("Child", childId)}
}

func (_c *Supervisor_Child_Call) Run(run func(childId string)) *Supervisor_Child_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Supervisor_Child_Call) Return(_a0 common.Supervisable, _a1 error) *Supervisor_Child_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Supervisor_Child_Call) RunAndReturn(run func(string) (common.Supervisable, error)) *Supervisor_Child_Call {
	_c.Call.Return(run)
	return _c
}

// Id provides a mock function with given fields:
func (_m *Supervisor) Id() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Id")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Supervisor_Id_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Id'
type Supervisor_Id_Call struct {
	*mock.Call
}

// Id is a helper method to define mock.On call
func (_e *Supervisor_Expecter) Id() *Supervisor_Id_Call {
	return &Supervisor_Id_Call{Call: _e.mock.On("Id")}
}

func (_c *Supervisor_Id_Call) Run(run func()) *Supervisor_Id_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Supervisor_Id_Call) Return(_a0 string) *Supervisor_Id_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Supervisor_Id_Call) RunAndReturn(run func() string) *Supervisor_Id_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveChild provides a mock function with given fields: childId
func (_m *Supervisor) RemoveChild(childId string) error {
	ret := _m.Called(childId)

	if len(ret) == 0 {
		panic("no return value specified for RemoveChild")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(childId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Supervisor_RemoveChild_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveChild'
type Supervisor_RemoveChild_Call struct {
	*mock.Call
}

// RemoveChild is a helper method to define mock.On call
//   - childId string
func (_e *Supervisor_Expecter) RemoveChild(childId interface{}) *Supervisor_RemoveChild_Call {
	return &Supervisor_RemoveChild_Call{Call: _e.mock.On("RemoveChild", childId)}
}

func (_c *Supervisor_RemoveChild_Call) Run(run func(childId string)) *Supervisor_RemoveChild_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Supervisor_RemoveChild_Call) Return(_a0 error) *Supervisor_RemoveChild_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Supervisor_RemoveChild_Call) RunAndReturn(run func(string) error) *Supervisor_RemoveChild_Call {
	_c.Call.Return(run)
	return _c
}

// ReportFailure provides a mock function with given fields: errors
func (_m *Supervisor) ReportFailure(errors map[string]error) {
	_m.Called(errors)
}

// Supervisor_ReportFailure_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReportFailure'
type Supervisor_ReportFailure_Call struct {
	*mock.Call
}

// ReportFailure is a helper method to define mock.On call
//   - errors map[string]error
func (_e *Supervisor_Expecter) ReportFailure(errors interface{}) *Supervisor_ReportFailure_Call {
	return &Supervisor_ReportFailure_Call{Call: _e.mock.On("ReportFailure", errors)}
}

func (_c *Supervisor_ReportFailure_Call) Run(run func(errors map[string]error)) *Supervisor_ReportFailure_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(map[string]error))
	})
	return _c
}

func (_c *Supervisor_ReportFailure_Call) Return() *Supervisor_ReportFailure_Call {
	_c.Call.Return()
	return _c
}

func (_c *Supervisor_ReportFailure_Call) RunAndReturn(run func(map[string]error)) *Supervisor_ReportFailure_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with given fields: settings
func (_m *Supervisor) Start(settings metadata.ReplicationSettingsMap) error {
	ret := _m.Called(settings)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(metadata.ReplicationSettingsMap) error); ok {
		r0 = rf(settings)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Supervisor_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type Supervisor_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - settings metadata.ReplicationSettingsMap
func (_e *Supervisor_Expecter) Start(settings interface{}) *Supervisor_Start_Call {
	return &Supervisor_Start_Call{Call: _e.mock.On("Start", settings)}
}

func (_c *Supervisor_Start_Call) Run(run func(settings metadata.ReplicationSettingsMap)) *Supervisor_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(metadata.ReplicationSettingsMap))
	})
	return _c
}

func (_c *Supervisor_Start_Call) Return(_a0 error) *Supervisor_Start_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Supervisor_Start_Call) RunAndReturn(run func(metadata.ReplicationSettingsMap) error) *Supervisor_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function with given fields:
func (_m *Supervisor) Stop() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Supervisor_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type Supervisor_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *Supervisor_Expecter) Stop() *Supervisor_Stop_Call {
	return &Supervisor_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *Supervisor_Stop_Call) Run(run func()) *Supervisor_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Supervisor_Stop_Call) Return(_a0 error) *Supervisor_Stop_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Supervisor_Stop_Call) RunAndReturn(run func() error) *Supervisor_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// NewSupervisor creates a new instance of Supervisor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSupervisor(t interface {
	mock.TestingT
	Cleanup(func())
}) *Supervisor {
	mock := &Supervisor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
