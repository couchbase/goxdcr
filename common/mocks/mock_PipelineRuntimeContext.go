// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	base "github.com/couchbase/goxdcr/base"
	common "github.com/couchbase/goxdcr/common"

	metadata "github.com/couchbase/goxdcr/metadata"

	mock "github.com/stretchr/testify/mock"
)

// PipelineRuntimeContext is an autogenerated mock type for the PipelineRuntimeContext type
type PipelineRuntimeContext struct {
	mock.Mock
}

type PipelineRuntimeContext_Expecter struct {
	mock *mock.Mock
}

func (_m *PipelineRuntimeContext) EXPECT() *PipelineRuntimeContext_Expecter {
	return &PipelineRuntimeContext_Expecter{mock: &_m.Mock}
}

// Pipeline provides a mock function with given fields:
func (_m *PipelineRuntimeContext) Pipeline() common.Pipeline {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Pipeline")
	}

	var r0 common.Pipeline
	if rf, ok := ret.Get(0).(func() common.Pipeline); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Pipeline)
		}
	}

	return r0
}

// PipelineRuntimeContext_Pipeline_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Pipeline'
type PipelineRuntimeContext_Pipeline_Call struct {
	*mock.Call
}

// Pipeline is a helper method to define mock.On call
func (_e *PipelineRuntimeContext_Expecter) Pipeline() *PipelineRuntimeContext_Pipeline_Call {
	return &PipelineRuntimeContext_Pipeline_Call{Call: _e.mock.On("Pipeline")}
}

func (_c *PipelineRuntimeContext_Pipeline_Call) Run(run func()) *PipelineRuntimeContext_Pipeline_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *PipelineRuntimeContext_Pipeline_Call) Return(_a0 common.Pipeline) *PipelineRuntimeContext_Pipeline_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PipelineRuntimeContext_Pipeline_Call) RunAndReturn(run func() common.Pipeline) *PipelineRuntimeContext_Pipeline_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterService provides a mock function with given fields: svc_name, svc
func (_m *PipelineRuntimeContext) RegisterService(svc_name string, svc common.PipelineService) error {
	ret := _m.Called(svc_name, svc)

	if len(ret) == 0 {
		panic("no return value specified for RegisterService")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, common.PipelineService) error); ok {
		r0 = rf(svc_name, svc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PipelineRuntimeContext_RegisterService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterService'
type PipelineRuntimeContext_RegisterService_Call struct {
	*mock.Call
}

// RegisterService is a helper method to define mock.On call
//   - svc_name string
//   - svc common.PipelineService
func (_e *PipelineRuntimeContext_Expecter) RegisterService(svc_name interface{}, svc interface{}) *PipelineRuntimeContext_RegisterService_Call {
	return &PipelineRuntimeContext_RegisterService_Call{Call: _e.mock.On("RegisterService", svc_name, svc)}
}

func (_c *PipelineRuntimeContext_RegisterService_Call) Run(run func(svc_name string, svc common.PipelineService)) *PipelineRuntimeContext_RegisterService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(common.PipelineService))
	})
	return _c
}

func (_c *PipelineRuntimeContext_RegisterService_Call) Return(_a0 error) *PipelineRuntimeContext_RegisterService_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PipelineRuntimeContext_RegisterService_Call) RunAndReturn(run func(string, common.PipelineService) error) *PipelineRuntimeContext_RegisterService_Call {
	_c.Call.Return(run)
	return _c
}

// Service provides a mock function with given fields: svc_name
func (_m *PipelineRuntimeContext) Service(svc_name string) common.PipelineService {
	ret := _m.Called(svc_name)

	if len(ret) == 0 {
		panic("no return value specified for Service")
	}

	var r0 common.PipelineService
	if rf, ok := ret.Get(0).(func(string) common.PipelineService); ok {
		r0 = rf(svc_name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.PipelineService)
		}
	}

	return r0
}

// PipelineRuntimeContext_Service_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Service'
type PipelineRuntimeContext_Service_Call struct {
	*mock.Call
}

// Service is a helper method to define mock.On call
//   - svc_name string
func (_e *PipelineRuntimeContext_Expecter) Service(svc_name interface{}) *PipelineRuntimeContext_Service_Call {
	return &PipelineRuntimeContext_Service_Call{Call: _e.mock.On("Service", svc_name)}
}

func (_c *PipelineRuntimeContext_Service_Call) Run(run func(svc_name string)) *PipelineRuntimeContext_Service_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *PipelineRuntimeContext_Service_Call) Return(_a0 common.PipelineService) *PipelineRuntimeContext_Service_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PipelineRuntimeContext_Service_Call) RunAndReturn(run func(string) common.PipelineService) *PipelineRuntimeContext_Service_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with given fields: _a0
func (_m *PipelineRuntimeContext) Start(_a0 metadata.ReplicationSettingsMap) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(metadata.ReplicationSettingsMap) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PipelineRuntimeContext_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type PipelineRuntimeContext_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - _a0 metadata.ReplicationSettingsMap
func (_e *PipelineRuntimeContext_Expecter) Start(_a0 interface{}) *PipelineRuntimeContext_Start_Call {
	return &PipelineRuntimeContext_Start_Call{Call: _e.mock.On("Start", _a0)}
}

func (_c *PipelineRuntimeContext_Start_Call) Run(run func(_a0 metadata.ReplicationSettingsMap)) *PipelineRuntimeContext_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(metadata.ReplicationSettingsMap))
	})
	return _c
}

func (_c *PipelineRuntimeContext_Start_Call) Return(_a0 error) *PipelineRuntimeContext_Start_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PipelineRuntimeContext_Start_Call) RunAndReturn(run func(metadata.ReplicationSettingsMap) error) *PipelineRuntimeContext_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function with given fields:
func (_m *PipelineRuntimeContext) Stop() base.ErrorMap {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 base.ErrorMap
	if rf, ok := ret.Get(0).(func() base.ErrorMap); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(base.ErrorMap)
		}
	}

	return r0
}

// PipelineRuntimeContext_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type PipelineRuntimeContext_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *PipelineRuntimeContext_Expecter) Stop() *PipelineRuntimeContext_Stop_Call {
	return &PipelineRuntimeContext_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *PipelineRuntimeContext_Stop_Call) Run(run func()) *PipelineRuntimeContext_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *PipelineRuntimeContext_Stop_Call) Return(_a0 base.ErrorMap) *PipelineRuntimeContext_Stop_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PipelineRuntimeContext_Stop_Call) RunAndReturn(run func() base.ErrorMap) *PipelineRuntimeContext_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// UnregisterService provides a mock function with given fields: srv_name
func (_m *PipelineRuntimeContext) UnregisterService(srv_name string) error {
	ret := _m.Called(srv_name)

	if len(ret) == 0 {
		panic("no return value specified for UnregisterService")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(srv_name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PipelineRuntimeContext_UnregisterService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnregisterService'
type PipelineRuntimeContext_UnregisterService_Call struct {
	*mock.Call
}

// UnregisterService is a helper method to define mock.On call
//   - srv_name string
func (_e *PipelineRuntimeContext_Expecter) UnregisterService(srv_name interface{}) *PipelineRuntimeContext_UnregisterService_Call {
	return &PipelineRuntimeContext_UnregisterService_Call{Call: _e.mock.On("UnregisterService", srv_name)}
}

func (_c *PipelineRuntimeContext_UnregisterService_Call) Run(run func(srv_name string)) *PipelineRuntimeContext_UnregisterService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *PipelineRuntimeContext_UnregisterService_Call) Return(_a0 error) *PipelineRuntimeContext_UnregisterService_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PipelineRuntimeContext_UnregisterService_Call) RunAndReturn(run func(string) error) *PipelineRuntimeContext_UnregisterService_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateSettings provides a mock function with given fields: settings
func (_m *PipelineRuntimeContext) UpdateSettings(settings metadata.ReplicationSettingsMap) error {
	ret := _m.Called(settings)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSettings")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(metadata.ReplicationSettingsMap) error); ok {
		r0 = rf(settings)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PipelineRuntimeContext_UpdateSettings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateSettings'
type PipelineRuntimeContext_UpdateSettings_Call struct {
	*mock.Call
}

// UpdateSettings is a helper method to define mock.On call
//   - settings metadata.ReplicationSettingsMap
func (_e *PipelineRuntimeContext_Expecter) UpdateSettings(settings interface{}) *PipelineRuntimeContext_UpdateSettings_Call {
	return &PipelineRuntimeContext_UpdateSettings_Call{Call: _e.mock.On("UpdateSettings", settings)}
}

func (_c *PipelineRuntimeContext_UpdateSettings_Call) Run(run func(settings metadata.ReplicationSettingsMap)) *PipelineRuntimeContext_UpdateSettings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(metadata.ReplicationSettingsMap))
	})
	return _c
}

func (_c *PipelineRuntimeContext_UpdateSettings_Call) Return(_a0 error) *PipelineRuntimeContext_UpdateSettings_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PipelineRuntimeContext_UpdateSettings_Call) RunAndReturn(run func(metadata.ReplicationSettingsMap) error) *PipelineRuntimeContext_UpdateSettings_Call {
	_c.Call.Return(run)
	return _c
}

// NewPipelineRuntimeContext creates a new instance of PipelineRuntimeContext. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPipelineRuntimeContext(t interface {
	mock.TestingT
	Cleanup(func())
}) *PipelineRuntimeContext {
	mock := &PipelineRuntimeContext{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
