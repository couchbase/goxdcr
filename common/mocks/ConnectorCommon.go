package mocks

import (
	common "github.com/couchbase/goxdcr/common"
	metadata "github.com/couchbase/goxdcr/metadata"

	mock "github.com/stretchr/testify/mock"
)

// ConnectorCommon is an autogenerated mock type for the ConnectorCommon type
type ConnectorCommon struct {
	mock.Mock
}

// AddDownStream provides a mock function with given fields: partId, part
func (_m *ConnectorCommon) AddDownStream(partId string, part common.Part) error {
	ret := _m.Called(partId, part)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, common.Part) error); ok {
		r0 = rf(partId, part)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DownStreams provides a mock function with given fields:
func (_m *ConnectorCommon) DownStreams() map[string]common.Part {
	ret := _m.Called()

	var r0 map[string]common.Part
	if rf, ok := ret.Get(0).(func() map[string]common.Part); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]common.Part)
		}
	}

	return r0
}

// Forward provides a mock function with given fields: data
func (_m *ConnectorCommon) Forward(data interface{}) error {
	ret := _m.Called(data)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateSettings provides a mock function with given fields: settings
func (_m *ConnectorCommon) UpdateSettings(settings metadata.ReplicationSettingsMap) error {
	ret := _m.Called(settings)

	var r0 error
	if rf, ok := ret.Get(0).(func(metadata.ReplicationSettingsMap) error); ok {
		r0 = rf(settings)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
