// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	base "github.com/couchbase/goxdcr/base"

	mock "github.com/stretchr/testify/mock"
)

// PipelineEventsProducer is an autogenerated mock type for the PipelineEventsProducer type
type PipelineEventsProducer struct {
	mock.Mock
}

type PipelineEventsProducer_Expecter struct {
	mock *mock.Mock
}

func (_m *PipelineEventsProducer) EXPECT() *PipelineEventsProducer_Expecter {
	return &PipelineEventsProducer_Expecter{mock: &_m.Mock}
}

// AddEvent provides a mock function with given fields: eventType, eventDesc, eventExtras, hint
func (_m *PipelineEventsProducer) AddEvent(eventType base.EventInfoType, eventDesc string, eventExtras base.EventsMap, hint interface{}) int64 {
	ret := _m.Called(eventType, eventDesc, eventExtras, hint)

	if len(ret) == 0 {
		panic("no return value specified for AddEvent")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func(base.EventInfoType, string, base.EventsMap, interface{}) int64); ok {
		r0 = rf(eventType, eventDesc, eventExtras, hint)
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// PipelineEventsProducer_AddEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddEvent'
type PipelineEventsProducer_AddEvent_Call struct {
	*mock.Call
}

// AddEvent is a helper method to define mock.On call
//   - eventType base.EventInfoType
//   - eventDesc string
//   - eventExtras base.EventsMap
//   - hint interface{}
func (_e *PipelineEventsProducer_Expecter) AddEvent(eventType interface{}, eventDesc interface{}, eventExtras interface{}, hint interface{}) *PipelineEventsProducer_AddEvent_Call {
	return &PipelineEventsProducer_AddEvent_Call{Call: _e.mock.On("AddEvent", eventType, eventDesc, eventExtras, hint)}
}

func (_c *PipelineEventsProducer_AddEvent_Call) Run(run func(eventType base.EventInfoType, eventDesc string, eventExtras base.EventsMap, hint interface{})) *PipelineEventsProducer_AddEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(base.EventInfoType), args[1].(string), args[2].(base.EventsMap), args[3].(interface{}))
	})
	return _c
}

func (_c *PipelineEventsProducer_AddEvent_Call) Return(eventId int64) *PipelineEventsProducer_AddEvent_Call {
	_c.Call.Return(eventId)
	return _c
}

func (_c *PipelineEventsProducer_AddEvent_Call) RunAndReturn(run func(base.EventInfoType, string, base.EventsMap, interface{}) int64) *PipelineEventsProducer_AddEvent_Call {
	_c.Call.Return(run)
	return _c
}

// DismissEvent provides a mock function with given fields: eventId
func (_m *PipelineEventsProducer) DismissEvent(eventId int) error {
	ret := _m.Called(eventId)

	if len(ret) == 0 {
		panic("no return value specified for DismissEvent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(eventId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PipelineEventsProducer_DismissEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DismissEvent'
type PipelineEventsProducer_DismissEvent_Call struct {
	*mock.Call
}

// DismissEvent is a helper method to define mock.On call
//   - eventId int
func (_e *PipelineEventsProducer_Expecter) DismissEvent(eventId interface{}) *PipelineEventsProducer_DismissEvent_Call {
	return &PipelineEventsProducer_DismissEvent_Call{Call: _e.mock.On("DismissEvent", eventId)}
}

func (_c *PipelineEventsProducer_DismissEvent_Call) Run(run func(eventId int)) *PipelineEventsProducer_DismissEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *PipelineEventsProducer_DismissEvent_Call) Return(_a0 error) *PipelineEventsProducer_DismissEvent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PipelineEventsProducer_DismissEvent_Call) RunAndReturn(run func(int) error) *PipelineEventsProducer_DismissEvent_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateEvent provides a mock function with given fields: oldEventId, newEventDesc, newEventExtras
func (_m *PipelineEventsProducer) UpdateEvent(oldEventId int64, newEventDesc string, newEventExtras *base.EventsMap) error {
	ret := _m.Called(oldEventId, newEventDesc, newEventExtras)

	if len(ret) == 0 {
		panic("no return value specified for UpdateEvent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, string, *base.EventsMap) error); ok {
		r0 = rf(oldEventId, newEventDesc, newEventExtras)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PipelineEventsProducer_UpdateEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateEvent'
type PipelineEventsProducer_UpdateEvent_Call struct {
	*mock.Call
}

// UpdateEvent is a helper method to define mock.On call
//   - oldEventId int64
//   - newEventDesc string
//   - newEventExtras *base.EventsMap
func (_e *PipelineEventsProducer_Expecter) UpdateEvent(oldEventId interface{}, newEventDesc interface{}, newEventExtras interface{}) *PipelineEventsProducer_UpdateEvent_Call {
	return &PipelineEventsProducer_UpdateEvent_Call{Call: _e.mock.On("UpdateEvent", oldEventId, newEventDesc, newEventExtras)}
}

func (_c *PipelineEventsProducer_UpdateEvent_Call) Run(run func(oldEventId int64, newEventDesc string, newEventExtras *base.EventsMap)) *PipelineEventsProducer_UpdateEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(string), args[2].(*base.EventsMap))
	})
	return _c
}

func (_c *PipelineEventsProducer_UpdateEvent_Call) Return(_a0 error) *PipelineEventsProducer_UpdateEvent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PipelineEventsProducer_UpdateEvent_Call) RunAndReturn(run func(int64, string, *base.EventsMap) error) *PipelineEventsProducer_UpdateEvent_Call {
	_c.Call.Return(run)
	return _c
}

// NewPipelineEventsProducer creates a new instance of PipelineEventsProducer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPipelineEventsProducer(t interface {
	mock.TestingT
	Cleanup(func())
}) *PipelineEventsProducer {
	mock := &PipelineEventsProducer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
