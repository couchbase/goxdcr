package mocks

import (
	common "github.com/couchbase/goxdcr/common"
	mock "github.com/stretchr/testify/mock"
)

// AdvComponent is an autogenerated mock type for the AdvComponent type
type AdvComponent struct {
	mock.Mock
}

// AsyncComponentEventListeners provides a mock function with given fields:
func (_m *AdvComponent) AsyncComponentEventListeners() map[string]common.AsyncComponentEventListener {
	ret := _m.Called()

	var r0 map[string]common.AsyncComponentEventListener
	if rf, ok := ret.Get(0).(func() map[string]common.AsyncComponentEventListener); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]common.AsyncComponentEventListener)
		}
	}

	return r0
}

// Id provides a mock function with given fields:
func (_m *AdvComponent) Id() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// RaiseEvent provides a mock function with given fields: event
func (_m *AdvComponent) RaiseEvent(event *common.Event) {
	_m.Called(event)
}

// RegisterComponentEventListener provides a mock function with given fields: eventType, listener
func (_m *AdvComponent) RegisterComponentEventListener(eventType common.ComponentEventType, listener common.ComponentEventListener) error {
	ret := _m.Called(eventType, listener)

	var r0 error
	if rf, ok := ret.Get(0).(func(common.ComponentEventType, common.ComponentEventListener) error); ok {
		r0 = rf(eventType, listener)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterSpecificComponentEventListener provides a mock function with given fields: topic, eventType, listener
func (_m *AdvComponent) RegisterSpecificComponentEventListener(topic string, eventType common.ComponentEventType, listener common.ComponentEventListener) error {
	ret := _m.Called(topic, eventType, listener)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, common.ComponentEventType, common.ComponentEventListener) error); ok {
		r0 = rf(topic, eventType, listener)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SpecificAsyncComponentEventListeners provides a mock function with given fields: topic
func (_m *AdvComponent) SpecificAsyncComponentEventListeners(topic string) map[string]common.AsyncComponentEventListener {
	ret := _m.Called(topic)

	var r0 map[string]common.AsyncComponentEventListener
	if rf, ok := ret.Get(0).(func(string) map[string]common.AsyncComponentEventListener); ok {
		r0 = rf(topic)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]common.AsyncComponentEventListener)
		}
	}

	return r0
}

// UnRegisterComponentEventListener provides a mock function with given fields: eventType, listener
func (_m *AdvComponent) UnRegisterComponentEventListener(eventType common.ComponentEventType, listener common.ComponentEventListener) error {
	ret := _m.Called(eventType, listener)

	var r0 error
	if rf, ok := ret.Get(0).(func(common.ComponentEventType, common.ComponentEventListener) error); ok {
		r0 = rf(eventType, listener)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UnRegisterSpecificComponentEventListener provides a mock function with given fields: topic, eventType, listener
func (_m *AdvComponent) UnRegisterSpecificComponentEventListener(topic string, eventType common.ComponentEventType, listener common.ComponentEventListener) error {
	ret := _m.Called(topic, eventType, listener)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, common.ComponentEventType, common.ComponentEventListener) error); ok {
		r0 = rf(topic, eventType, listener)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
