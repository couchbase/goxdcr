package mocks

import (
	common "github.com/couchbase/goxdcr/common"
	mock "github.com/stretchr/testify/mock"
)

// Connectable is an autogenerated mock type for the Connectable type
type Connectable struct {
	mock.Mock
}

// AdvConnector provides a mock function with given fields:
func (_m *Connectable) AdvConnector() (common.AdvConnector, error) {
	ret := _m.Called()

	var r0 common.AdvConnector
	if rf, ok := ret.Get(0).(func() common.AdvConnector); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.AdvConnector)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Connector provides a mock function with given fields:
func (_m *Connectable) Connector() common.Connector {
	ret := _m.Called()

	var r0 common.Connector
	if rf, ok := ret.Get(0).(func() common.Connector); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Connector)
		}
	}

	return r0
}

// SetAdvConnector provides a mock function with given fields: connector
func (_m *Connectable) SetAdvConnector(connector common.AdvConnector) error {
	ret := _m.Called(connector)

	var r0 error
	if rf, ok := ret.Get(0).(func(common.AdvConnector) error); ok {
		r0 = rf(connector)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetConnector provides a mock function with given fields: connector
func (_m *Connectable) SetConnector(connector common.Connector) error {
	ret := _m.Called(connector)

	var r0 error
	if rf, ok := ret.Get(0).(func(common.Connector) error); ok {
		r0 = rf(connector)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
