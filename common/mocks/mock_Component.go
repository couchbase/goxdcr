// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	common "github.com/couchbase/goxdcr/common"
	mock "github.com/stretchr/testify/mock"
)

// Component is an autogenerated mock type for the Component type
type Component struct {
	mock.Mock
}

type Component_Expecter struct {
	mock *mock.Mock
}

func (_m *Component) EXPECT() *Component_Expecter {
	return &Component_Expecter{mock: &_m.Mock}
}

// AsyncComponentEventListeners provides a mock function with given fields:
func (_m *Component) AsyncComponentEventListeners() map[string]common.AsyncComponentEventListener {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for AsyncComponentEventListeners")
	}

	var r0 map[string]common.AsyncComponentEventListener
	if rf, ok := ret.Get(0).(func() map[string]common.AsyncComponentEventListener); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]common.AsyncComponentEventListener)
		}
	}

	return r0
}

// Component_AsyncComponentEventListeners_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AsyncComponentEventListeners'
type Component_AsyncComponentEventListeners_Call struct {
	*mock.Call
}

// AsyncComponentEventListeners is a helper method to define mock.On call
func (_e *Component_Expecter) AsyncComponentEventListeners() *Component_AsyncComponentEventListeners_Call {
	return &Component_AsyncComponentEventListeners_Call{Call: _e.mock.On("AsyncComponentEventListeners")}
}

func (_c *Component_AsyncComponentEventListeners_Call) Run(run func()) *Component_AsyncComponentEventListeners_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Component_AsyncComponentEventListeners_Call) Return(_a0 map[string]common.AsyncComponentEventListener) *Component_AsyncComponentEventListeners_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Component_AsyncComponentEventListeners_Call) RunAndReturn(run func() map[string]common.AsyncComponentEventListener) *Component_AsyncComponentEventListeners_Call {
	_c.Call.Return(run)
	return _c
}

// Id provides a mock function with given fields:
func (_m *Component) Id() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Id")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Component_Id_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Id'
type Component_Id_Call struct {
	*mock.Call
}

// Id is a helper method to define mock.On call
func (_e *Component_Expecter) Id() *Component_Id_Call {
	return &Component_Id_Call{Call: _e.mock.On("Id")}
}

func (_c *Component_Id_Call) Run(run func()) *Component_Id_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Component_Id_Call) Return(_a0 string) *Component_Id_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Component_Id_Call) RunAndReturn(run func() string) *Component_Id_Call {
	_c.Call.Return(run)
	return _c
}

// RaiseEvent provides a mock function with given fields: event
func (_m *Component) RaiseEvent(event *common.Event) {
	_m.Called(event)
}

// Component_RaiseEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RaiseEvent'
type Component_RaiseEvent_Call struct {
	*mock.Call
}

// RaiseEvent is a helper method to define mock.On call
//   - event *common.Event
func (_e *Component_Expecter) RaiseEvent(event interface{}) *Component_RaiseEvent_Call {
	return &Component_RaiseEvent_Call{Call: _e.mock.On("RaiseEvent", event)}
}

func (_c *Component_RaiseEvent_Call) Run(run func(event *common.Event)) *Component_RaiseEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*common.Event))
	})
	return _c
}

func (_c *Component_RaiseEvent_Call) Return() *Component_RaiseEvent_Call {
	_c.Call.Return()
	return _c
}

func (_c *Component_RaiseEvent_Call) RunAndReturn(run func(*common.Event)) *Component_RaiseEvent_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterComponentEventListener provides a mock function with given fields: eventType, listener
func (_m *Component) RegisterComponentEventListener(eventType common.ComponentEventType, listener common.ComponentEventListener) error {
	ret := _m.Called(eventType, listener)

	if len(ret) == 0 {
		panic("no return value specified for RegisterComponentEventListener")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(common.ComponentEventType, common.ComponentEventListener) error); ok {
		r0 = rf(eventType, listener)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Component_RegisterComponentEventListener_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterComponentEventListener'
type Component_RegisterComponentEventListener_Call struct {
	*mock.Call
}

// RegisterComponentEventListener is a helper method to define mock.On call
//   - eventType common.ComponentEventType
//   - listener common.ComponentEventListener
func (_e *Component_Expecter) RegisterComponentEventListener(eventType interface{}, listener interface{}) *Component_RegisterComponentEventListener_Call {
	return &Component_RegisterComponentEventListener_Call{Call: _e.mock.On("RegisterComponentEventListener", eventType, listener)}
}

func (_c *Component_RegisterComponentEventListener_Call) Run(run func(eventType common.ComponentEventType, listener common.ComponentEventListener)) *Component_RegisterComponentEventListener_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.ComponentEventType), args[1].(common.ComponentEventListener))
	})
	return _c
}

func (_c *Component_RegisterComponentEventListener_Call) Return(_a0 error) *Component_RegisterComponentEventListener_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Component_RegisterComponentEventListener_Call) RunAndReturn(run func(common.ComponentEventType, common.ComponentEventListener) error) *Component_RegisterComponentEventListener_Call {
	_c.Call.Return(run)
	return _c
}

// UnRegisterComponentEventListener provides a mock function with given fields: eventType, listener
func (_m *Component) UnRegisterComponentEventListener(eventType common.ComponentEventType, listener common.ComponentEventListener) error {
	ret := _m.Called(eventType, listener)

	if len(ret) == 0 {
		panic("no return value specified for UnRegisterComponentEventListener")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(common.ComponentEventType, common.ComponentEventListener) error); ok {
		r0 = rf(eventType, listener)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Component_UnRegisterComponentEventListener_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnRegisterComponentEventListener'
type Component_UnRegisterComponentEventListener_Call struct {
	*mock.Call
}

// UnRegisterComponentEventListener is a helper method to define mock.On call
//   - eventType common.ComponentEventType
//   - listener common.ComponentEventListener
func (_e *Component_Expecter) UnRegisterComponentEventListener(eventType interface{}, listener interface{}) *Component_UnRegisterComponentEventListener_Call {
	return &Component_UnRegisterComponentEventListener_Call{Call: _e.mock.On("UnRegisterComponentEventListener", eventType, listener)}
}

func (_c *Component_UnRegisterComponentEventListener_Call) Run(run func(eventType common.ComponentEventType, listener common.ComponentEventListener)) *Component_UnRegisterComponentEventListener_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.ComponentEventType), args[1].(common.ComponentEventListener))
	})
	return _c
}

func (_c *Component_UnRegisterComponentEventListener_Call) Return(_a0 error) *Component_UnRegisterComponentEventListener_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Component_UnRegisterComponentEventListener_Call) RunAndReturn(run func(common.ComponentEventType, common.ComponentEventListener) error) *Component_UnRegisterComponentEventListener_Call {
	_c.Call.Return(run)
	return _c
}

// NewComponent creates a new instance of Component. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewComponent(t interface {
	mock.TestingT
	Cleanup(func())
}) *Component {
	mock := &Component{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
