// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	common "github.com/couchbase/goxdcr/v8/common"
	mock "github.com/stretchr/testify/mock"
)

// SupervisorFailureHandler is an autogenerated mock type for the SupervisorFailureHandler type
type SupervisorFailureHandler struct {
	mock.Mock
}

type SupervisorFailureHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *SupervisorFailureHandler) EXPECT() *SupervisorFailureHandler_Expecter {
	return &SupervisorFailureHandler_Expecter{mock: &_m.Mock}
}

// OnError provides a mock function with given fields: supervisor, errors
func (_m *SupervisorFailureHandler) OnError(supervisor common.Supervisor, errors map[string]error) {
	_m.Called(supervisor, errors)
}

// SupervisorFailureHandler_OnError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnError'
type SupervisorFailureHandler_OnError_Call struct {
	*mock.Call
}

// OnError is a helper method to define mock.On call
//   - supervisor common.Supervisor
//   - errors map[string]error
func (_e *SupervisorFailureHandler_Expecter) OnError(supervisor interface{}, errors interface{}) *SupervisorFailureHandler_OnError_Call {
	return &SupervisorFailureHandler_OnError_Call{Call: _e.mock.On("OnError", supervisor, errors)}
}

func (_c *SupervisorFailureHandler_OnError_Call) Run(run func(supervisor common.Supervisor, errors map[string]error)) *SupervisorFailureHandler_OnError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.Supervisor), args[1].(map[string]error))
	})
	return _c
}

func (_c *SupervisorFailureHandler_OnError_Call) Return() *SupervisorFailureHandler_OnError_Call {
	_c.Call.Return()
	return _c
}

func (_c *SupervisorFailureHandler_OnError_Call) RunAndReturn(run func(common.Supervisor, map[string]error)) *SupervisorFailureHandler_OnError_Call {
	_c.Call.Return(run)
	return _c
}

// NewSupervisorFailureHandler creates a new instance of SupervisorFailureHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSupervisorFailureHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *SupervisorFailureHandler {
	mock := &SupervisorFailureHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
