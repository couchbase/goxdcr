// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	common "github.com/couchbase/goxdcr/common"
	metadata "github.com/couchbase/goxdcr/metadata"

	mock "github.com/stretchr/testify/mock"
)

// Connector is an autogenerated mock type for the Connector type
type Connector struct {
	mock.Mock
}

type Connector_Expecter struct {
	mock *mock.Mock
}

func (_m *Connector) EXPECT() *Connector_Expecter {
	return &Connector_Expecter{mock: &_m.Mock}
}

// AddDownStream provides a mock function with given fields: partId, part
func (_m *Connector) AddDownStream(partId string, part common.Part) error {
	ret := _m.Called(partId, part)

	if len(ret) == 0 {
		panic("no return value specified for AddDownStream")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, common.Part) error); ok {
		r0 = rf(partId, part)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Connector_AddDownStream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddDownStream'
type Connector_AddDownStream_Call struct {
	*mock.Call
}

// AddDownStream is a helper method to define mock.On call
//   - partId string
//   - part common.Part
func (_e *Connector_Expecter) AddDownStream(partId interface{}, part interface{}) *Connector_AddDownStream_Call {
	return &Connector_AddDownStream_Call{Call: _e.mock.On("AddDownStream", partId, part)}
}

func (_c *Connector_AddDownStream_Call) Run(run func(partId string, part common.Part)) *Connector_AddDownStream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(common.Part))
	})
	return _c
}

func (_c *Connector_AddDownStream_Call) Return(_a0 error) *Connector_AddDownStream_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Connector_AddDownStream_Call) RunAndReturn(run func(string, common.Part) error) *Connector_AddDownStream_Call {
	_c.Call.Return(run)
	return _c
}

// AsyncComponentEventListeners provides a mock function with given fields:
func (_m *Connector) AsyncComponentEventListeners() map[string]common.AsyncComponentEventListener {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for AsyncComponentEventListeners")
	}

	var r0 map[string]common.AsyncComponentEventListener
	if rf, ok := ret.Get(0).(func() map[string]common.AsyncComponentEventListener); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]common.AsyncComponentEventListener)
		}
	}

	return r0
}

// Connector_AsyncComponentEventListeners_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AsyncComponentEventListeners'
type Connector_AsyncComponentEventListeners_Call struct {
	*mock.Call
}

// AsyncComponentEventListeners is a helper method to define mock.On call
func (_e *Connector_Expecter) AsyncComponentEventListeners() *Connector_AsyncComponentEventListeners_Call {
	return &Connector_AsyncComponentEventListeners_Call{Call: _e.mock.On("AsyncComponentEventListeners")}
}

func (_c *Connector_AsyncComponentEventListeners_Call) Run(run func()) *Connector_AsyncComponentEventListeners_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Connector_AsyncComponentEventListeners_Call) Return(_a0 map[string]common.AsyncComponentEventListener) *Connector_AsyncComponentEventListeners_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Connector_AsyncComponentEventListeners_Call) RunAndReturn(run func() map[string]common.AsyncComponentEventListener) *Connector_AsyncComponentEventListeners_Call {
	_c.Call.Return(run)
	return _c
}

// DownStreams provides a mock function with given fields:
func (_m *Connector) DownStreams() map[string]common.Part {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DownStreams")
	}

	var r0 map[string]common.Part
	if rf, ok := ret.Get(0).(func() map[string]common.Part); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]common.Part)
		}
	}

	return r0
}

// Connector_DownStreams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DownStreams'
type Connector_DownStreams_Call struct {
	*mock.Call
}

// DownStreams is a helper method to define mock.On call
func (_e *Connector_Expecter) DownStreams() *Connector_DownStreams_Call {
	return &Connector_DownStreams_Call{Call: _e.mock.On("DownStreams")}
}

func (_c *Connector_DownStreams_Call) Run(run func()) *Connector_DownStreams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Connector_DownStreams_Call) Return(_a0 map[string]common.Part) *Connector_DownStreams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Connector_DownStreams_Call) RunAndReturn(run func() map[string]common.Part) *Connector_DownStreams_Call {
	_c.Call.Return(run)
	return _c
}

// Forward provides a mock function with given fields: data
func (_m *Connector) Forward(data interface{}) error {
	ret := _m.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for Forward")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Connector_Forward_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Forward'
type Connector_Forward_Call struct {
	*mock.Call
}

// Forward is a helper method to define mock.On call
//   - data interface{}
func (_e *Connector_Expecter) Forward(data interface{}) *Connector_Forward_Call {
	return &Connector_Forward_Call{Call: _e.mock.On("Forward", data)}
}

func (_c *Connector_Forward_Call) Run(run func(data interface{})) *Connector_Forward_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *Connector_Forward_Call) Return(_a0 error) *Connector_Forward_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Connector_Forward_Call) RunAndReturn(run func(interface{}) error) *Connector_Forward_Call {
	_c.Call.Return(run)
	return _c
}

// GetUpstreamObjRecycler provides a mock function with given fields:
func (_m *Connector) GetUpstreamObjRecycler() func(interface{}) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetUpstreamObjRecycler")
	}

	var r0 func(interface{})
	if rf, ok := ret.Get(0).(func() func(interface{})); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(func(interface{}))
		}
	}

	return r0
}

// Connector_GetUpstreamObjRecycler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUpstreamObjRecycler'
type Connector_GetUpstreamObjRecycler_Call struct {
	*mock.Call
}

// GetUpstreamObjRecycler is a helper method to define mock.On call
func (_e *Connector_Expecter) GetUpstreamObjRecycler() *Connector_GetUpstreamObjRecycler_Call {
	return &Connector_GetUpstreamObjRecycler_Call{Call: _e.mock.On("GetUpstreamObjRecycler")}
}

func (_c *Connector_GetUpstreamObjRecycler_Call) Run(run func()) *Connector_GetUpstreamObjRecycler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Connector_GetUpstreamObjRecycler_Call) Return(_a0 func(interface{})) *Connector_GetUpstreamObjRecycler_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Connector_GetUpstreamObjRecycler_Call) RunAndReturn(run func() func(interface{})) *Connector_GetUpstreamObjRecycler_Call {
	_c.Call.Return(run)
	return _c
}

// Id provides a mock function with given fields:
func (_m *Connector) Id() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Id")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Connector_Id_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Id'
type Connector_Id_Call struct {
	*mock.Call
}

// Id is a helper method to define mock.On call
func (_e *Connector_Expecter) Id() *Connector_Id_Call {
	return &Connector_Id_Call{Call: _e.mock.On("Id")}
}

func (_c *Connector_Id_Call) Run(run func()) *Connector_Id_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Connector_Id_Call) Return(_a0 string) *Connector_Id_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Connector_Id_Call) RunAndReturn(run func() string) *Connector_Id_Call {
	_c.Call.Return(run)
	return _c
}

// IsStartable provides a mock function with given fields:
func (_m *Connector) IsStartable() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsStartable")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Connector_IsStartable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsStartable'
type Connector_IsStartable_Call struct {
	*mock.Call
}

// IsStartable is a helper method to define mock.On call
func (_e *Connector_Expecter) IsStartable() *Connector_IsStartable_Call {
	return &Connector_IsStartable_Call{Call: _e.mock.On("IsStartable")}
}

func (_c *Connector_IsStartable_Call) Run(run func()) *Connector_IsStartable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Connector_IsStartable_Call) Return(_a0 bool) *Connector_IsStartable_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Connector_IsStartable_Call) RunAndReturn(run func() bool) *Connector_IsStartable_Call {
	_c.Call.Return(run)
	return _c
}

// RaiseEvent provides a mock function with given fields: event
func (_m *Connector) RaiseEvent(event *common.Event) {
	_m.Called(event)
}

// Connector_RaiseEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RaiseEvent'
type Connector_RaiseEvent_Call struct {
	*mock.Call
}

// RaiseEvent is a helper method to define mock.On call
//   - event *common.Event
func (_e *Connector_Expecter) RaiseEvent(event interface{}) *Connector_RaiseEvent_Call {
	return &Connector_RaiseEvent_Call{Call: _e.mock.On("RaiseEvent", event)}
}

func (_c *Connector_RaiseEvent_Call) Run(run func(event *common.Event)) *Connector_RaiseEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*common.Event))
	})
	return _c
}

func (_c *Connector_RaiseEvent_Call) Return() *Connector_RaiseEvent_Call {
	_c.Call.Return()
	return _c
}

func (_c *Connector_RaiseEvent_Call) RunAndReturn(run func(*common.Event)) *Connector_RaiseEvent_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterComponentEventListener provides a mock function with given fields: eventType, listener
func (_m *Connector) RegisterComponentEventListener(eventType common.ComponentEventType, listener common.ComponentEventListener) error {
	ret := _m.Called(eventType, listener)

	if len(ret) == 0 {
		panic("no return value specified for RegisterComponentEventListener")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(common.ComponentEventType, common.ComponentEventListener) error); ok {
		r0 = rf(eventType, listener)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Connector_RegisterComponentEventListener_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterComponentEventListener'
type Connector_RegisterComponentEventListener_Call struct {
	*mock.Call
}

// RegisterComponentEventListener is a helper method to define mock.On call
//   - eventType common.ComponentEventType
//   - listener common.ComponentEventListener
func (_e *Connector_Expecter) RegisterComponentEventListener(eventType interface{}, listener interface{}) *Connector_RegisterComponentEventListener_Call {
	return &Connector_RegisterComponentEventListener_Call{Call: _e.mock.On("RegisterComponentEventListener", eventType, listener)}
}

func (_c *Connector_RegisterComponentEventListener_Call) Run(run func(eventType common.ComponentEventType, listener common.ComponentEventListener)) *Connector_RegisterComponentEventListener_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.ComponentEventType), args[1].(common.ComponentEventListener))
	})
	return _c
}

func (_c *Connector_RegisterComponentEventListener_Call) Return(_a0 error) *Connector_RegisterComponentEventListener_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Connector_RegisterComponentEventListener_Call) RunAndReturn(run func(common.ComponentEventType, common.ComponentEventListener) error) *Connector_RegisterComponentEventListener_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with given fields:
func (_m *Connector) Start() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Connector_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type Connector_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
func (_e *Connector_Expecter) Start() *Connector_Start_Call {
	return &Connector_Start_Call{Call: _e.mock.On("Start")}
}

func (_c *Connector_Start_Call) Run(run func()) *Connector_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Connector_Start_Call) Return(_a0 error) *Connector_Start_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Connector_Start_Call) RunAndReturn(run func() error) *Connector_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function with given fields:
func (_m *Connector) Stop() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Connector_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type Connector_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *Connector_Expecter) Stop() *Connector_Stop_Call {
	return &Connector_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *Connector_Stop_Call) Run(run func()) *Connector_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Connector_Stop_Call) Return(_a0 error) *Connector_Stop_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Connector_Stop_Call) RunAndReturn(run func() error) *Connector_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// UnRegisterComponentEventListener provides a mock function with given fields: eventType, listener
func (_m *Connector) UnRegisterComponentEventListener(eventType common.ComponentEventType, listener common.ComponentEventListener) error {
	ret := _m.Called(eventType, listener)

	if len(ret) == 0 {
		panic("no return value specified for UnRegisterComponentEventListener")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(common.ComponentEventType, common.ComponentEventListener) error); ok {
		r0 = rf(eventType, listener)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Connector_UnRegisterComponentEventListener_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnRegisterComponentEventListener'
type Connector_UnRegisterComponentEventListener_Call struct {
	*mock.Call
}

// UnRegisterComponentEventListener is a helper method to define mock.On call
//   - eventType common.ComponentEventType
//   - listener common.ComponentEventListener
func (_e *Connector_Expecter) UnRegisterComponentEventListener(eventType interface{}, listener interface{}) *Connector_UnRegisterComponentEventListener_Call {
	return &Connector_UnRegisterComponentEventListener_Call{Call: _e.mock.On("UnRegisterComponentEventListener", eventType, listener)}
}

func (_c *Connector_UnRegisterComponentEventListener_Call) Run(run func(eventType common.ComponentEventType, listener common.ComponentEventListener)) *Connector_UnRegisterComponentEventListener_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.ComponentEventType), args[1].(common.ComponentEventListener))
	})
	return _c
}

func (_c *Connector_UnRegisterComponentEventListener_Call) Return(_a0 error) *Connector_UnRegisterComponentEventListener_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Connector_UnRegisterComponentEventListener_Call) RunAndReturn(run func(common.ComponentEventType, common.ComponentEventListener) error) *Connector_UnRegisterComponentEventListener_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateSettings provides a mock function with given fields: settings
func (_m *Connector) UpdateSettings(settings metadata.ReplicationSettingsMap) error {
	ret := _m.Called(settings)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSettings")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(metadata.ReplicationSettingsMap) error); ok {
		r0 = rf(settings)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Connector_UpdateSettings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateSettings'
type Connector_UpdateSettings_Call struct {
	*mock.Call
}

// UpdateSettings is a helper method to define mock.On call
//   - settings metadata.ReplicationSettingsMap
func (_e *Connector_Expecter) UpdateSettings(settings interface{}) *Connector_UpdateSettings_Call {
	return &Connector_UpdateSettings_Call{Call: _e.mock.On("UpdateSettings", settings)}
}

func (_c *Connector_UpdateSettings_Call) Run(run func(settings metadata.ReplicationSettingsMap)) *Connector_UpdateSettings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(metadata.ReplicationSettingsMap))
	})
	return _c
}

func (_c *Connector_UpdateSettings_Call) Return(_a0 error) *Connector_UpdateSettings_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Connector_UpdateSettings_Call) RunAndReturn(run func(metadata.ReplicationSettingsMap) error) *Connector_UpdateSettings_Call {
	_c.Call.Return(run)
	return _c
}

// NewConnector creates a new instance of Connector. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConnector(t interface {
	mock.TestingT
	Cleanup(func())
}) *Connector {
	mock := &Connector{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
