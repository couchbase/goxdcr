package mocks

import (
	common "github.com/couchbase/goxdcr/common"
	metadata "github.com/couchbase/goxdcr/metadata"

	mock "github.com/stretchr/testify/mock"
)

// PartCommon is an autogenerated mock type for the PartCommon type
type PartCommon struct {
	mock.Mock
}

// AdvConnector provides a mock function with given fields:
func (_m *PartCommon) AdvConnector() (common.AdvConnector, error) {
	ret := _m.Called()

	var r0 common.AdvConnector
	if rf, ok := ret.Get(0).(func() common.AdvConnector); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.AdvConnector)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Connector provides a mock function with given fields:
func (_m *PartCommon) Connector() common.Connector {
	ret := _m.Called()

	var r0 common.Connector
	if rf, ok := ret.Get(0).(func() common.Connector); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Connector)
		}
	}

	return r0
}

// GetType provides a mock function with given fields:
func (_m *PartCommon) GetType() common.PartType {
	ret := _m.Called()

	var r0 common.PartType
	if rf, ok := ret.Get(0).(func() common.PartType); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(common.PartType)
	}

	return r0
}

// Receive provides a mock function with given fields: data
func (_m *PartCommon) Receive(data interface{}) error {
	ret := _m.Called(data)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetAdvConnector provides a mock function with given fields: connector
func (_m *PartCommon) SetAdvConnector(connector common.AdvConnector) error {
	ret := _m.Called(connector)

	var r0 error
	if rf, ok := ret.Get(0).(func(common.AdvConnector) error); ok {
		r0 = rf(connector)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetConnector provides a mock function with given fields: connector
func (_m *PartCommon) SetConnector(connector common.Connector) error {
	ret := _m.Called(connector)

	var r0 error
	if rf, ok := ret.Get(0).(func(common.Connector) error); ok {
		r0 = rf(connector)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Start provides a mock function with given fields: settings
func (_m *PartCommon) Start(settings metadata.ReplicationSettingsMap) error {
	ret := _m.Called(settings)

	var r0 error
	if rf, ok := ret.Get(0).(func(metadata.ReplicationSettingsMap) error); ok {
		r0 = rf(settings)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// State provides a mock function with given fields:
func (_m *PartCommon) State() common.PartState {
	ret := _m.Called()

	var r0 common.PartState
	if rf, ok := ret.Get(0).(func() common.PartState); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(common.PartState)
	}

	return r0
}

// Stop provides a mock function with given fields:
func (_m *PartCommon) Stop() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateSettings provides a mock function with given fields: settings
func (_m *PartCommon) UpdateSettings(settings metadata.ReplicationSettingsMap) error {
	ret := _m.Called(settings)

	var r0 error
	if rf, ok := ret.Get(0).(func(metadata.ReplicationSettingsMap) error); ok {
		r0 = rf(settings)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
