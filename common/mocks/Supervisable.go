// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// Supervisable is an autogenerated mock type for the Supervisable type
type Supervisable struct {
	mock.Mock
}

// HeartBeat_async provides a mock function with given fields: respchan, timestamp
func (_m *Supervisable) HeartBeat_async(respchan chan []interface{}, timestamp time.Time) error {
	ret := _m.Called(respchan, timestamp)

	if len(ret) == 0 {
		panic("no return value specified for HeartBeat_async")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(chan []interface{}, time.Time) error); ok {
		r0 = rf(respchan, timestamp)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// HeartBeat_sync provides a mock function with given fields:
func (_m *Supervisable) HeartBeat_sync() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for HeartBeat_sync")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Id provides a mock function with given fields:
func (_m *Supervisable) Id() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Id")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// IsReadyForHeartBeat provides a mock function with given fields:
func (_m *Supervisable) IsReadyForHeartBeat() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsReadyForHeartBeat")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NewSupervisable creates a new instance of Supervisable. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSupervisable(t interface {
	mock.TestingT
	Cleanup(func())
}) *Supervisable {
	mock := &Supervisable{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
