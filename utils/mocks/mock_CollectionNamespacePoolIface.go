// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	base "github.com/couchbase/goxdcr/base"
	mock "github.com/stretchr/testify/mock"
)

// CollectionNamespacePoolIface is an autogenerated mock type for the CollectionNamespacePoolIface type
type CollectionNamespacePoolIface struct {
	mock.Mock
}

type CollectionNamespacePoolIface_Expecter struct {
	mock *mock.Mock
}

func (_m *CollectionNamespacePoolIface) EXPECT() *CollectionNamespacePoolIface_Expecter {
	return &CollectionNamespacePoolIface_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields:
func (_m *CollectionNamespacePoolIface) Get() *base.CollectionNamespace {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *base.CollectionNamespace
	if rf, ok := ret.Get(0).(func() *base.CollectionNamespace); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*base.CollectionNamespace)
		}
	}

	return r0
}

// CollectionNamespacePoolIface_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type CollectionNamespacePoolIface_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
func (_e *CollectionNamespacePoolIface_Expecter) Get() *CollectionNamespacePoolIface_Get_Call {
	return &CollectionNamespacePoolIface_Get_Call{Call: _e.mock.On("Get")}
}

func (_c *CollectionNamespacePoolIface_Get_Call) Run(run func()) *CollectionNamespacePoolIface_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *CollectionNamespacePoolIface_Get_Call) Return(_a0 *base.CollectionNamespace) *CollectionNamespacePoolIface_Get_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CollectionNamespacePoolIface_Get_Call) RunAndReturn(run func() *base.CollectionNamespace) *CollectionNamespacePoolIface_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Put provides a mock function with given fields: ns
func (_m *CollectionNamespacePoolIface) Put(ns *base.CollectionNamespace) {
	_m.Called(ns)
}

// CollectionNamespacePoolIface_Put_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Put'
type CollectionNamespacePoolIface_Put_Call struct {
	*mock.Call
}

// Put is a helper method to define mock.On call
//   - ns *base.CollectionNamespace
func (_e *CollectionNamespacePoolIface_Expecter) Put(ns interface{}) *CollectionNamespacePoolIface_Put_Call {
	return &CollectionNamespacePoolIface_Put_Call{Call: _e.mock.On("Put", ns)}
}

func (_c *CollectionNamespacePoolIface_Put_Call) Run(run func(ns *base.CollectionNamespace)) *CollectionNamespacePoolIface_Put_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*base.CollectionNamespace))
	})
	return _c
}

func (_c *CollectionNamespacePoolIface_Put_Call) Return() *CollectionNamespacePoolIface_Put_Call {
	_c.Call.Return()
	return _c
}

func (_c *CollectionNamespacePoolIface_Put_Call) RunAndReturn(run func(*base.CollectionNamespace)) *CollectionNamespacePoolIface_Put_Call {
	_c.Call.Return(run)
	return _c
}

// NewCollectionNamespacePoolIface creates a new instance of CollectionNamespacePoolIface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCollectionNamespacePoolIface(t interface {
	mock.TestingT
	Cleanup(func())
}) *CollectionNamespacePoolIface {
	mock := &CollectionNamespacePoolIface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
