// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// RecycleObjFunc is an autogenerated mock type for the RecycleObjFunc type
type RecycleObjFunc struct {
	mock.Mock
}

type RecycleObjFunc_Expecter struct {
	mock *mock.Mock
}

func (_m *RecycleObjFunc) EXPECT() *RecycleObjFunc_Expecter {
	return &RecycleObjFunc_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: obj
func (_m *RecycleObjFunc) Execute(obj interface{}) {
	_m.Called(obj)
}

// RecycleObjFunc_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type RecycleObjFunc_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - obj interface{}
func (_e *RecycleObjFunc_Expecter) Execute(obj interface{}) *RecycleObjFunc_Execute_Call {
	return &RecycleObjFunc_Execute_Call{Call: _e.mock.On("Execute", obj)}
}

func (_c *RecycleObjFunc_Execute_Call) Run(run func(obj interface{})) *RecycleObjFunc_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *RecycleObjFunc_Execute_Call) Return() *RecycleObjFunc_Execute_Call {
	_c.Call.Return()
	return _c
}

func (_c *RecycleObjFunc_Execute_Call) RunAndReturn(run func(interface{})) *RecycleObjFunc_Execute_Call {
	_c.Run(run)
	return _c
}

// NewRecycleObjFunc creates a new instance of RecycleObjFunc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRecycleObjFunc(t interface {
	mock.TestingT
	Cleanup(func())
}) *RecycleObjFunc {
	mock := &RecycleObjFunc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
