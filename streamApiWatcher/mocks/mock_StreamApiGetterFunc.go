// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	base "github.com/couchbase/goxdcr/base"
	log "github.com/couchbase/goxdcr/log"

	mock "github.com/stretchr/testify/mock"

	streamApiWatcher "github.com/couchbase/goxdcr/streamApiWatcher"

	utils "github.com/couchbase/goxdcr/utils"
)

// StreamApiGetterFunc is an autogenerated mock type for the StreamApiGetterFunc type
type StreamApiGetterFunc struct {
	mock.Mock
}

type StreamApiGetterFunc_Expecter struct {
	mock *mock.Mock
}

func (_m *StreamApiGetterFunc) EXPECT() *StreamApiGetterFunc_Expecter {
	return &StreamApiGetterFunc_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: path, connInfo, _a2, callback, logger
func (_m *StreamApiGetterFunc) Execute(path string, connInfo base.ClusterConnectionInfoProvider, _a2 utils.UtilsIface, callback func(), logger *log.CommonLogger) streamApiWatcher.StreamApiWatcher {
	ret := _m.Called(path, connInfo, _a2, callback, logger)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 streamApiWatcher.StreamApiWatcher
	if rf, ok := ret.Get(0).(func(string, base.ClusterConnectionInfoProvider, utils.UtilsIface, func(), *log.CommonLogger) streamApiWatcher.StreamApiWatcher); ok {
		r0 = rf(path, connInfo, _a2, callback, logger)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(streamApiWatcher.StreamApiWatcher)
		}
	}

	return r0
}

// StreamApiGetterFunc_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type StreamApiGetterFunc_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - path string
//   - connInfo base.ClusterConnectionInfoProvider
//   - _a2 utils.UtilsIface
//   - callback func()
//   - logger *log.CommonLogger
func (_e *StreamApiGetterFunc_Expecter) Execute(path interface{}, connInfo interface{}, _a2 interface{}, callback interface{}, logger interface{}) *StreamApiGetterFunc_Execute_Call {
	return &StreamApiGetterFunc_Execute_Call{Call: _e.mock.On("Execute", path, connInfo, _a2, callback, logger)}
}

func (_c *StreamApiGetterFunc_Execute_Call) Run(run func(path string, connInfo base.ClusterConnectionInfoProvider, _a2 utils.UtilsIface, callback func(), logger *log.CommonLogger)) *StreamApiGetterFunc_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(base.ClusterConnectionInfoProvider), args[2].(utils.UtilsIface), args[3].(func()), args[4].(*log.CommonLogger))
	})
	return _c
}

func (_c *StreamApiGetterFunc_Execute_Call) Return(_a0 streamApiWatcher.StreamApiWatcher) *StreamApiGetterFunc_Execute_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamApiGetterFunc_Execute_Call) RunAndReturn(run func(string, base.ClusterConnectionInfoProvider, utils.UtilsIface, func(), *log.CommonLogger) streamApiWatcher.StreamApiWatcher) *StreamApiGetterFunc_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewStreamApiGetterFunc creates a new instance of StreamApiGetterFunc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStreamApiGetterFunc(t interface {
	mock.TestingT
	Cleanup(func())
}) *StreamApiGetterFunc {
	mock := &StreamApiGetterFunc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
