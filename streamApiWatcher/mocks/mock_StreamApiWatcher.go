// Code generated by mockery. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// StreamApiWatcher is an autogenerated mock type for the StreamApiWatcher type
type StreamApiWatcher struct {
	mock.Mock
}

type StreamApiWatcher_Expecter struct {
	mock *mock.Mock
}

func (_m *StreamApiWatcher) EXPECT() *StreamApiWatcher_Expecter {
	return &StreamApiWatcher_Expecter{mock: &_m.Mock}
}

// GetResult provides a mock function with given fields:
func (_m *StreamApiWatcher) GetResult() map[string]interface{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetResult")
	}

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func() map[string]interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	return r0
}

// StreamApiWatcher_GetResult_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetResult'
type StreamApiWatcher_GetResult_Call struct {
	*mock.Call
}

// GetResult is a helper method to define mock.On call
func (_e *StreamApiWatcher_Expecter) GetResult() *StreamApiWatcher_GetResult_Call {
	return &StreamApiWatcher_GetResult_Call{Call: _e.mock.On("GetResult")}
}

func (_c *StreamApiWatcher_GetResult_Call) Run(run func()) *StreamApiWatcher_GetResult_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *StreamApiWatcher_GetResult_Call) Return(_a0 map[string]interface{}) *StreamApiWatcher_GetResult_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamApiWatcher_GetResult_Call) RunAndReturn(run func() map[string]interface{}) *StreamApiWatcher_GetResult_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with given fields:
func (_m *StreamApiWatcher) Start() {
	_m.Called()
}

// StreamApiWatcher_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type StreamApiWatcher_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
func (_e *StreamApiWatcher_Expecter) Start() *StreamApiWatcher_Start_Call {
	return &StreamApiWatcher_Start_Call{Call: _e.mock.On("Start")}
}

func (_c *StreamApiWatcher_Start_Call) Run(run func()) *StreamApiWatcher_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *StreamApiWatcher_Start_Call) Return() *StreamApiWatcher_Start_Call {
	_c.Call.Return()
	return _c
}

func (_c *StreamApiWatcher_Start_Call) RunAndReturn(run func()) *StreamApiWatcher_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function with given fields:
func (_m *StreamApiWatcher) Stop() {
	_m.Called()
}

// StreamApiWatcher_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type StreamApiWatcher_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *StreamApiWatcher_Expecter) Stop() *StreamApiWatcher_Stop_Call {
	return &StreamApiWatcher_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *StreamApiWatcher_Stop_Call) Run(run func()) *StreamApiWatcher_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *StreamApiWatcher_Stop_Call) Return() *StreamApiWatcher_Stop_Call {
	_c.Call.Return()
	return _c
}

func (_c *StreamApiWatcher_Stop_Call) RunAndReturn(run func()) *StreamApiWatcher_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// NewStreamApiWatcher creates a new instance of StreamApiWatcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStreamApiWatcher(t interface {
	mock.TestingT
	Cleanup(func())
}) *StreamApiWatcher {
	mock := &StreamApiWatcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
